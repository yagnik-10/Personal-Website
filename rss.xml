<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
  <channel>
    <title><![CDATA[leanrada.com notes]]></title>
    <description><![CDATA[leanrada.com notes]]></description>
    <link>https://leanrada.com</link>
    <atom:link href="https://leanrada.com/rss.xml" rel="self" type="application/rss+xml"/>

    <item>
      <title><![CDATA[Language evolves, so we must too. On generative art]]></title>
      <link><![CDATA[https://leanrada.com/notes/language-evolves-generative-art/?ref=rss]]></link>
      <guid isPermaLink="true"><![CDATA[https://leanrada.com/notes/language-evolves-generative-art/?ref=rss]]></guid>
      <pubDate>Thu, 03 Apr 2025 00:00:00 GMT</pubDate>
      <description><![CDATA[
<p>A year ago, I stood by the statement that <a href="https://leanrada.com/notes/ai-art-not-generative-art?ref=rss">AI Art is not Generative Art</a>, arguing that the term ‘generative art’ is an art movement in itself that is separate from AI art.</p>

<p>Safe to say, it has been a losing battle.</p>

<p>Even the converse, <em>“generative art is not necessarily AI art”</em>, would be met by confusion from most people. ‘Generative’ has been equated to AI.</p>

<figure>
  <img src="https://leanrada.com/notes/language-evolves-generative-art/fidenza.jpg?ref=rss" loading="lazy" width="1000" height="1200">
  <figcaption>Fidenza, a generative artwork system, by Tyler Hobbs</figcaption>
</figure>

<h2>Exhibition</h2>

<img src="https://leanrada.com/notes/language-evolves-generative-art/sadly-yes.png?ref=rss" loading="lazy" width="654" height="140">

<img src="https://leanrada.com/notes/language-evolves-generative-art/when-we-talk.png?ref=rss" loading="lazy" width="805" height="101">

<img src="https://leanrada.com/notes/language-evolves-generative-art/the-other-day.png?ref=rss" loading="lazy" width="718" height="118">

<p><a href="https://www.reddit.com/r/generative/comments/1hks3sg/has_the_word_generative_been_hijacked_by_ai/" target="_blank">r/generative - Has the word 'generative' been hijacked by AI?</a></p>

<p>I think it's time to move on to a different label. Words are for
communication, and if a word results in failure of communication, we
should either agree on a common definition (we can’t) or just use better
word.</p>

<h2>So, what are the other words for this art?</h2>
<box-note>If you haven’t read the mentioned <a href="https://leanrada.com/notes/ai-art-not-generative-art?ref=rss" target="_blank">prequel post</a>, you may not understand what “art” I’m taliking about. There’s one example above, but <a href="https://leanrada.com/art?ref=rss" target="_blank">here’s more</a>.</box-note>
<p>Fortunately, there are already well-established terms to describe the
medium:</p>

<ul>
  <li>Procedural art
  </li><li>Algorithmic art
  </li><li>Creative coding
</li></ul>

<p>It’s just a matter of choosing one and leaving the now-loaded
‘generative’ term behind.</p>

<p>By the process of elimination, I think ‘procedural art’ is the best
term to use. Let me explain each of the other options.</p>

<h2>Why not Algorithmic</h2>

<p>‘Algorithmic art’ is a top candidate, for sure, and many others have <a href="https://monokai.com/articles/algorithmic-art-as-a-subset-of-generative-art" target="_blank">opted for it in the exodus from ‘generative’</a>. Algorithmic art and procedural art are pretty much synonymous, so why or why not?</p>

<p><strong>Pros:</strong> Unlike generative art, algorithmic art doesn’t
have the unfortunate connotation from sharing a word with ‘generative
AI’.</p>

<p><strong>Cons:</strong> While ‘algorithmic art’ doesn’t immediately
invoke visions of generative AI, the term ‘algortihm’ under the broad definition
of a ‘set of instructions’ would still include machine learning
models.</p>

<p>In fact, the word ‘algorithm’ has also entered commonplace usage via
<strong>‘social media algorithms’</strong>, which are yet another application of machine
learning and statistics. In this sense, it is used interchangeably with
the recommender system used to construct personalised content feeds.
<em>“The algorithm”</em> is a black box, and the word <a href="https://www.technologyreview.com/2021/02/26/1020007/what-is-an-algorithm/" target="_blank">suggests a system beyond understanding</a>. This connotation is not in the spirit of procedural art, where the procedures are authored knowingly.</p>

<p>Another distinction is that while an algorithm is usually defined as a process that takes some <strong>input</strong> and processes it into an <strong>output</strong>, most procedural art programs don’t need inputs at all. They create things from scratch, from maths, from chaos. <small>OK, technically random seeds would be considerend input. But on a conceptual level, no inputs!</small></p>

<h2>Why not Creative Coding</h2>

<p>First of all, it’s such a vague phrase. Why not ‘dynamic
programming’? 😉</p>

<p>Anyway, that’s not the main point.</p>

<p>Procedural art has grown beyond <em>just coding</em>. I would even
say most procedural artists don't use code, but nodes and graphs. The
majority of these procedural art would be used in video games and movie
VFX.</p>

<p>Instead of coding, one would use <a href="https://pixieditor.net/blog/2024/07/12/devlog5#nodes" target="_blank">node-based programming</a> connecting
<strong>nodes</strong> that represent operations, building up a
<strong>graph</strong> to produce a complex image or even a
3D model.</p>

<figure>
  <img src="https://leanrada.com/notes/language-evolves-generative-art/nodes.jpg?ref=rss" alt="Node graph and its output" loading="lazy" width="1100" height="910">
  <figcaption><a href="https://shahriyarshahrabi.medium.com/procedural-chinese-landscape-painting-in-geometry-nodes-blender-3d-6417403430e6" target="_blank">Shahriar Shahrabi - Procedural Chinese Landscape Painting in Geometry Nodes</a></figcaption>
</figure>

<p>And it’s not just for industrial VFX purposes. It’s also used mainly
for multimedia, interactive, and installation art.</p>

<figure>
  <img src="https://leanrada.com/notes/language-evolves-generative-art/sydney1_0.jpg?ref=rss" alt="Sydney Opera House with a projected image on it" loading="lazy" width="640" height="320">
  <figcaption>Audiovisual projection by <a href="https://derivative.ca/community-post/obscura-digital-turns-sydney-opera-house-inside-out-outside/60793" target="_blank">Obscura Digital using TouchDesigner, a node-based software</a>. (<a href="https://www.youtube.com/watch?v=YKFxkqPdsoI" target="_blank">Picture from YouTube Symphony Orchestra</a>)</figcaption>
</figure>

<p>So... yeah this genre of art, is not coding.</p>

<h2>OK, then why Procedural Art</h2>

<p>Because the ‘procedure’, the ‘how’ is the core feature of procedural art.</p>

<p>In procedural art, we describe precisely <strong>how</strong> the
artwork is made. And it’s far from describing to a chatbot in plain
English. The how is well-defined and understood. Every shape, stroke,
their positions, colours, ranges, constraints, rules of interaction,
etc., are all described in some precise way. Sometimes we go down to individual
pixel level as in a shader. Sometimes at a more geometric level, like in
turtle or vector graphics. Sometimes on a mathematical level, like
fractals. Sometimes it’s even a simulation with emergent properties!</p>

<p>Procedural art is more about the <em>process</em>, watching things unfold and emerge, rather than the final output that algorithms are obsessed about.</p>

<p>Procedural art is about the interaction of rules in interesting ways, regardless of whether the rules were written in code, or connected as a graph, or wired in redstone dust.</p>

<p>Finally, <em>procedural art is not AI art</em>. [Insert same exact argument as <a href="https://leanrada.com/notes/ai-art-not-generative-art?ref=rss" target="_blank">AI Art is not Generative Art</a> but with a different name, here]. For funsies, here’s a quick guide: <em>In AI art, you describe <strong>what</strong> the artwork should be. In procedural art, you describe <strong>how</strong> the artwork could be.</em></p>

<h2>What now</h2>

<p>Language evolves because of general usage. See: <em>AI, <a href="https://www.vice.com/en/article/cryptocurrency-are-not-crypto-bitcoin/" target="_blank">crypto</a>,
cyber, generative</em>. As a fellow user of language, I must evolve my languaging as well — starting with this website.</p>

<p>I have updated the following pages to either disambiguate or even
completely replace mentions of “generative art”:</p>

<ul>
  <li>/art/</li>
  <li>/wares/dimensions/</li>
</ul>

<p>For the record, I’m not rejecting the other perfectly acceptable terms like algorithmic art and creative coding. My art is still algorithmic, and it’s the result of creative coding. I’m just moving away from ‘generative’.</p>

<p>I’m sure we’ll settle on a universal term soon. Language evolves, after all.</p>

<h2>Appendix</h2>

<figure>
  <img src="https://leanrada.com/notes/language-evolves-generative-art/search-time.png?ref=rss" loading="lazy" width="1122" height="424">
  <figcaption>Searches for “generative art” over time</figcaption>
</figure>

<figure>
  <img src="https://leanrada.com/notes/language-evolves-generative-art/i-like.png?ref=rss" alt="Note saying: I like your algorithmic art" loading="lazy" width="402" height="115">
  <figcaption>A visitor has left me this note, which made me rethink</figcaption>
</figure>
]]></description>
    </item>

    <item>
      <title><![CDATA[Minimal CSS-only blurry image placeholders]]></title>
      <link><![CDATA[https://leanrada.com/notes/css-only-lqip/?ref=rss]]></link>
      <guid isPermaLink="true"><![CDATA[https://leanrada.com/notes/css-only-lqip/?ref=rss]]></guid>
      <pubDate>Sun, 30 Mar 2025 00:00:00 GMT</pubDate>
      <description><![CDATA[
<p>Here’s a CSS technique that produces blurry image placeholders (LQIPs) without cluttering up your markup — <em>Only a single custom property needed!</em></p>
<card-box>
  <code-block language="html">
    <pre><code>&lt;img src="…" style="--lqip:192900"&gt;</code></pre>
  </code-block>

  <p>The custom property above gives you this image:</p>

  <p>
  </p><div></div>
  <p></p>

  <label>
    Try changing the property’s value <strong>(WARNING: FLASHING)</strong>
    <input type="range" min="-999999" max="999999">
  </label>
  <script>
    {
      const card = document.currentScript.parentElement;
      const input = card.querySelector("input");
      const code = card.querySelector("code");
      const preview = card.querySelector("div");

      let currentValueStr = "192900";
      let targetCode = null

      input.addEventListener("input", event => {
        if (!targetCode) {
          targetCode = Array.from(code.querySelectorAll("span")).filter(el => el.textContent.includes(currentValueStr)).slice(-1)[0] ?? code;
        }

        const lqip = Number(event.currentTarget.value);
        // use this page's lqip to avoid breakage if I ever update the scheme
        preview.style.setProperty("--my-lqip", lqip);
        targetCode.innerHTML = targetCode.innerHTML.replace(currentValueStr, lqip);
        currentValueStr = String(lqip);
      });
    }
  </script>
</card-box>
<p>Granted, it’s a <em>very blurry</em> placeholder especially in contrast to other leading solutions. But the point is that it’s minimal and non-invasive! No need for wrapper elements or attributes with long strings of data, or JavaScript at all.</p>
<box-note>Note for RSS readers / ‘Reader’ mode clients: This post makes heavy use of CSS-based images. Your client may not support it.</box-note>
<h2>Example images</h2>
<lqip-examples>
  <img src="https://leanrada.com/notes/css-only-lqip/gallery/aj-McsNra2VRQQ-unsplash.jpg?ref=rss" width="300" height="199">
  <img src="https://leanrada.com/notes/css-only-lqip/gallery/henry-co-3JFVNo4ukKQ-unsplash.jpg?ref=rss" width="300" height="200">
  <img src="https://leanrada.com/notes/css-only-lqip/gallery/tienko-dima-uYoVf9I6ANI-unsplash.jpg?ref=rss" width="300" height="196">
  <a href="https://leanrada.com/notes/css-only-lqip/javascript:(()=%3E%7Blet%20s;(s=document.getElementById('lqip-debug'))?s.remove%28%29%3A%28%28s=document.createElement%28%27style%27%29%29.innerHTML%3D%60%5Bstyle*%3D%27--my-lqip%3A%27%5D%3Anot%28%3Ahover%29%7Bobject-position%3Acalc%28infinity*1px%29%21important%7D%60%2Cs.id%3D%27lqip-debug%27%2Cdocument.head.append%28s%29%29%7D%29%28%29&amp;ref=rss">
    Toggle images
  </a>
</lqip-examples><card-box>
  <a href="https://leanrada.com/notes/css-only-lqip/gallery?ref=rss" target="_blank">Check out the LQIP gallery for examples!</a>
</card-box>
<h2>Survey of LQIP approaches</h2>

<p>There have been many different techniques to implement LQIPs (low quality image placeholders), such as a very low
  resolution WebP or JPEG (<a href="https://engineering.fb.com/2015/08/06/android/the-technology-behind-preview-photos/" target="_blank">beheaded JPEGs</a> even), optimised SVG shape placements (<a href="https://github.com/axe312ger/sqip" target="_blank">SQIP</a>), and directly applying a discrete cosine
  transform (<a href="https://blurha.sh/" target="_blank">BlurHash</a>). Don’t forget good old progressive JPEGs and interlaced
  PNGs!</p>

<figure>
  <img src="https://leanrada.com/notes/css-only-lqip/solid-colour.png?ref=rss" alt="image gallery with solid colour placeholders" width="1368" height="832">
  <figcaption>Canva and Pinterest use solid colour placeholders.</figcaption>
</figure>

<p>At the other end of the spectrum, we have low tech solutions such as a simple solid fill of the image’s average colour.</p>

<p>Pure inline CSS solutions have the advantage rendering immediately — even a <code>background-image: url(…a data URL)</code> would be fine!</p>

<figure>
  <img src="https://leanrada.com/notes/css-only-lqip/gradient-css.png?ref=rss" alt="image gallery with gradient placeholders" width="1368" height="832">
  <figcaption><a href="https://github.com/fraser-hemp/gradify" target="_blank">Gradify</a> generates linear-gradients
    that very roughly approximate the full image.</figcaption>
</figure>

<p>The big disadvantage of pure CSS approaches is that you typically litter your markup with lengthy inline styles or obnoxious data URLs. My handcoded site with no build step would be extra incompatible with this approach!</p>

<pre><code>&lt;!-- typical gradify css --&gt;
&lt;img width="200" height="150" style="
  background: linear-gradient(45deg, #f4a261, transparent),
    linear-gradient(-45deg, #e76f51, transparent),
    linear-gradient(90deg, #8ab17d, transparent),
    linear-gradient(0deg, #d62828, #023047);
"&gt;
</code></pre>

<p><strong><a href="https://blurha.sh/">BlurHash</a></strong> is a solution that minimises markup by compressing image
  data into a
  <strong>short base-83 string</strong>, but decoding and rendering that data requires additional JS…
</p>

<pre><code>&lt;!-- a blurhash markup --&gt;
&lt;img width="200" height="150" src="…"
  data-blurhash="LEHV6nWB2yk8pyo0adR*.7kCMdnj"&gt;</code></pre>

<figure>
  <img src="https://leanrada.com/notes/css-only-lqip/blurhash.png?ref=rss" width="276" height="171">
  <figcaption>BlurHash example</figcaption>
</figure>

<p>Is it possible to decode a blur hash in CSS instead?</p>

<h2>Decoding in pure CSS</h2>

<p>Unlike BlurHash, we can’t use a string encoding because there are very few if any string manipulation
  functions in CSS (2025), so strings are out.</p>

<p>In the end, I came up with my own hash / encoding, and the <b>integer</b> type was the best vessel for it.</p>

<p>The usual way to encode stuff in a single integer is by <a href="https://en.wikipedia.org/wiki/Bit_manipulation" target="_blank"><strong>bit packing</strong></a>, where you pack multiple numbers in an integer as bits. Amazingly, we can unpack them in pure CSS!</p>

<p>To unpack bits, all you need is bit shifting and bit masking. <strong>Bit shifting</strong> can be done by division and floor operations — <code>calc(x / y)</code> and <code>round(down,n)</code> — and <strong>bit masking</strong> via the modulo function <code>mod(a,b)</code>.</p>

<pre><code>* {
/* Example packed int: */
/* 0b11_00_001_101 */
--packed-int: 781;
--bits-9-10: mod(round(down, calc(var(--packed-int) / 256)), 4); /* 3 */
--bits-7-8: mod(round(down, calc(var(--packed-int) / 64)), 4); /* 0 */
--bits-4-6: mod(round(down, calc(var(--packed-int) / 8)), 8); /* 1 */
--bits-0-3: mod(var(--packed-int), 8); /* 5 */
}</code></pre>

<p>Of course, we could also use <code>pow(2,n)</code> instead of hardcoded powers of two.</p>

<p>So, a <strong>single CSS integer value</strong> was going to be the encoding of the “hash” of my CSS-only blobhash
  (that’s what I’m calling it now). But how much information can we pack in a single CSS int?</p>

<h2>Side quest: Limits of CSS values</h2>

<p>The spec doesn’t say anything about the allowed range for int values, leaving the fate of my shenanigans to browser vendors.</p>

<p>From my experiments, apparently you can only use integers from <strong>-999,999 up to 999,999</strong> in custom
  properties before you lose precision. Just beyond that limit, we start getting values rounded to tens —
  1,234,56<del>7</del> becomes 1,234,56<ins>0</ins>. Which is weird (precision is counted in decimal places!?), but I
  bet it’s due to historical, Internet Explorer-esque reasons.</p>

<p>Anyway, within the range of [-999999, 999999] there are <strong>1,999,999</strong> values. This meant that with a
  single integer hash, almost two million LQIP configurations could be described. To make calculation
  easier, I reduced it to the nearest power of two down which is 2<sup>20</sup>.</p>
<card-box>
  <code>2<sup>20</sup> = 1,048,576 &lt; 1,999,999 &lt; 2,097,152 = 2<sup>21</sup></code>
</card-box>
<p><strong>In short, I had 20 bits of information to encode the CSS-based LQIP hash.</strong></p>
<box-note><strong>Why is it called a “hash”?</strong> Because it’s a mapping from an any-size data to a fixed-size
  value. In this case, there are an infinite number of images of arbitrary sizes, but only 1,999,999 possible hash
  values.</box-note>
<h2>The Scheme</h2>

<p>With only 20 bits, the LQIP image must be a very simplified version of the full image. I ended up with this scheme:
  a single base colour + 6 brightness components, to be overlaid on top of the base colour in a 3×2 grid. A
  rather extreme version of <a href="https://en.wikipedia.org/wiki/Chroma_subsampling" target="_blank">chroma
    subsampling</a>.</p>

<img src="https://leanrada.com/notes/css-only-lqip/scheme.png?ref=rss" alt="illustration of encoded components" width="600" height="500">

<p>This totals <strong>9 numbers</strong> to pack into the 20-bit integer:</p>

<p>The <strong>base colour</strong> is encoded in the <strong>lower 8 bits</strong> in the <a href="https://en.wikipedia.org/wiki/Oklab_color_space" target="_blank">Oklab colour space</a>. 2 bits for luminance, and 3 bits for each of the a and b coordinates. I’ve found Oklab to give subjectively balanced results, but RGB should work just as well.</p>

<p>The <strong>6 greyscale components</strong> are encoded in the <strong>higher 12 bits</strong> — 2 bits each.</p>

<p>An offline script was created to compress any given image into this integer format. The script was quite simple: Get the average
  or dominant colour — there are a lot of libraries that can do that — then resize the image down to
  3×2 pixels and get the greyscale values. <a href="https://github.com/Kalabasa/leanrada.com/blob/7b6739c7c30c66c771fcbc9e1dc8942e628c5024/main/scripts/update/lqip.mjs#L118-L159" target="_blank">Here’s my script.</a></p>
<box-note>I even tried a <a href="https://blog.4dcu.be/programming/2020/01/12/Genetic-Art-Algorithm.html" target="_blank">genetic algorithm</a> to optimise the LQIP bits, but the fitness function was hard to establish. Ultimately, I would’ve needed an offline CSS renderer for this to work accurately. Maybe a future iteration could use some headless Chrome solution to automatically compare real renderings of the LQIP against the source image.</box-note>
<p>Once encoded, it’s set as the value of <code>--lqip</code> via the style attribute in the target element. It could then be decoded in CSS. Here’s the actual code I used for decoding:</p>

<pre><code>[style*="--lqip:"] {
--lqip-ca: mod(round(down, calc((var(--lqip) + pow(2, 19)) / pow(2, 18))), 4);
--lqip-cb: mod(round(down, calc((var(--lqip) + pow(2, 19)) / pow(2, 16))), 4);
--lqip-cc: mod(round(down, calc((var(--lqip) + pow(2, 19)) / pow(2, 14))), 4);
--lqip-cd: mod(round(down, calc((var(--lqip) + pow(2, 19)) / pow(2, 12))), 4);
--lqip-ce: mod(round(down, calc((var(--lqip) + pow(2, 19)) / pow(2, 10))), 4);
--lqip-cf: mod(round(down, calc((var(--lqip) + pow(2, 19)) / pow(2, 8))), 4);
--lqip-ll: mod(round(down, calc((var(--lqip) + pow(2, 19)) / pow(2, 6))), 4);
--lqip-aaa: mod(round(down, calc((var(--lqip) + pow(2, 19)) / pow(2, 3))), 8);
--lqip-bbb: mod(calc(var(--lqip) + pow(2, 19)), 8);</code></pre>

<p>Before rendering the decoded values, the raw number data values need to be converted to CSS colours. It’s fairly
  straightforward, just a bunch linear interpolations into colour constructor functions.</p>

<pre><code>/* continued */
--lqip-ca-clr: hsl(0 0% calc(var(--lqip-ca) / 3 * 100%));
--lqip-cb-clr: hsl(0 0% calc(var(--lqip-cb) / 3 * 100%));
--lqip-cc-clr: hsl(0 0% calc(var(--lqip-cc) / 3 * 100%));
--lqip-cd-clr: hsl(0 0% calc(var(--lqip-cd) / 3 * 100%));
--lqip-ce-clr: hsl(0 0% calc(var(--lqip-ce) / 3 * 100%));
--lqip-cf-clr: hsl(0 0% calc(var(--lqip-cf) / 3 * 100%));
--lqip-base-clr: oklab(
  calc(var(--lqip-ll) / 3 * 0.6 + 0.2)
  calc(var(--lqip-aaa) / 8 * 0.7 - 0.35)
  calc((var(--lqip-bbb) + 1) / 8 * 0.7 - 0.35)
);
}</code></pre>
<card-box>
  <strong>Time for another demo!</strong>
  <label>
    Try different values of <code>--lqip</code> to decode
    <input type="range" min="-999999" max="999999">
  </label>
  <p>
    <code></code>
  </p>
  <script>
    {
      const card = document.currentScript.parentElement;
      const input = card.querySelector("input");
      const preview = card.querySelector(".lqip-unpack").parentElement;

      let currentValueStr = "-721311";
      render(Number(currentValueStr));

      input.addEventListener("input", event => {
        const lqip = Number(event.currentTarget.value);
        render(lqip);
        currentValueStr = String(lqip);
      });

      function render(lqip) {
        preview.style.setProperty("--my-lqip", lqip);
      };
    }
  </script>
  

  You can see here how each component variable maps to the LQIP image. E.g. the <code>cb</code> value corresponds to
  the relative brightness of the top middle area. <em>Fun fact: The above preview content is implemented in pure
    CSS!</em>
</card-box>
<h2>Rendering it all</h2>

<p>Finally, rendering the LQIP. I used multiple <strong>radial gradients</strong> to render the greyscale components,
  and a flat base colour at the bottom.</p>

<pre><code>[style*="--lqip:"] {
background-image:
  radial-gradient(50% 75% at 16.67% 25%, var(--lqip-ca-clr), transparent),
  radial-gradient(50% 75% at 50% 25%, var(--lqip-cb-clr), transparent),
  radial-gradient(50% 75% at 83.33% 25%, var(--lqip-cc-clr), transparent),
  radial-gradient(50% 75% at 16.67% 75%, var(--lqip-cd-clr), transparent),
  radial-gradient(50% 75% at 50% 75%, var(--lqip-ce-clr), transparent),
  radial-gradient(50% 75% at 83.33% 75%, var(--lqip-cf-clr), transparent),
  linear-gradient(0deg, var(--lqip-base-clr), var(--lqip-base-clr));
}</code></pre>

<p>The above is a simplified version of the full renderer for illustrative purposes. <small>The real one has doubled layers, smooth gradient falloffs, and blend modes.</small></p>

<p>As you might expect, the radial gradients are arranged in a 3×2 grid. You can see it in this interactive deconstructor view!</p>
<card-box>
  <strong>LQIP deconstructor!</strong>
  <label>
    Reveal the individual layers using this slider!
    <input type="range" min="0" max="100" value="0">
    Change the <code>--lqip</code> value,
    <input type="range" min="-999999" max="999999">
  </label>
  <div></div>
  <script>
    {
      const card = document.currentScript.parentElement;
      const [revealInput, lqipInput] = card.querySelectorAll("input");
      const preview = card.querySelector(".lqip-reveal");

      let currentValueStr = "-747540";
      render(Number(currentValueStr));

      lqipInput.addEventListener("input", event => {
        const lqip = Number(event.currentTarget.value);
        render(lqip);
        currentValueStr = String(lqip);
      });

      revealInput.addEventListener("input", event => {
        preview.style.setProperty("--reveal", event.currentTarget.value / 100);
      });

      function render(lqip) {
        preview.style.setProperty("--my-lqip", lqip);
      };
    }
  </script>
  
</card-box>
<p>These radial gradients are the core of the CSS-based LQIP. The position and radius of the gradients are an important detail that would determine how well these can approximate real images. Besides that, another requirement is that these individual radial gradients must be seamless when combined together.</p>

<p>I implemented smooth gradient falloffs to make the final result look seamless. It took special care to make the gradients extra smooth, so let’s dive into it…</p>

<h2>Bilinear interpolation approximation with radial gradients</h2>

<p>Radial gradients use linear interpolation by default. Interpolation refers to how it maps the in-between colours from the start colour to the end colour. And linear interpolation, the most basic interpolation, well…</p>

<figure>
  <interpolation-example></interpolation-example>
  <figcaption>CSS radial-gradients with linear interpolation</figcaption>
</figure>

<p>It doesn’t look good. It gives us these hard edges (highlighted above). You could almost see the elliptical edges of each radial gradient and their centers.</p>

<p>In real raster images, we’d use <a href="https://harmoniccode.blogspot.com/2011/04/bilinear-color-interpolation.html" target="_blank">bilinear interpolation</a> at the very least when scaling up low resolution images. <a href="https://blog.demofox.org/2015/08/15/resizing-images-with-bicubic-interpolation/" target="_blank">Bicubic interpolation is even better.</a></p>

<p>One way to simulate the smoothness of bilinear interpolation in an array of CSS radial-gradients is to use <strong>‘quadratic easing’</strong> to control the gradation of opacity.</p>

<p>This means the opacity falloff of the gradient would be smoother around the center and the edges. Each gradient would get feathered edges, smoothening the overall composite image.</p>
<prose-bleed>
  <fixed-grid>
    <figure>
      <interpolation-example></interpolation-example>
      <figcaption>
        <strong>CSS radial-gradients:</strong>
        Quadratic interpolation <em>(touch to see edges)</em>
      </figcaption>
    </figure>
    <figure>
      <interpolation-example></interpolation-example>
      <figcaption>
        <strong>CSS radial-gradients:</strong>
        Linear interpolation <em>(touch to see edges)</em>
      </figcaption>
    </figure>
    <figure>
      <img src="https://leanrada.com/notes/css-only-lqip/interpolation-bilinear.png?ref=rss" width="900" height="600">
      <figcaption>Image: Bilinear interpolation</figcaption>
    </figure>
    <figure>
      <img src="https://leanrada.com/notes/css-only-lqip/interpolation-bicubic.png?ref=rss" width="900" height="600">
      <figcaption>Image: Bicubic interpolation</figcaption>
    </figure>
    <figure>
      <img src="https://leanrada.com/notes/css-only-lqip/interpolation-pixels.png?ref=rss" width="3" height="2">
      <figcaption>Image: Your browser’s native interpolation</figcaption>
    </figure>
    <figure>
      <img src="https://leanrada.com/notes/css-only-lqip/interpolation-pixels.png?ref=rss" width="3" height="2">
      <figcaption>Image: No interpolation</figcaption>
    </figure>
  
</fixed-grid></prose-bleed>
<p>However, CSS gradients <a href="https://github.com/w3c/csswg-drafts/issues/1332" target="_blank">don’t support nonlinear interpolation of opacity yet as of writing</a> (not to be confused with colour space interpolation, which browsers do support!). The solution for now is to add more points in the gradient to get a smooth opacity curve based on the quadratic formula.</p>

<pre><code>radial-gradient(
  &lt;position&gt;,
  rgb(82 190 240 / 100%) 0%,
  rgb(82 190 204 / 98%) 10%,
  rgb(82 190 204 / 92%) 20%,
  rgb(82 190 204 / 82%) 30%,
  rgb(82 190 204 / 68%) 40%,
  rgb(82 190 204 / 32%) 60%,
  rgb(82 190 204 / 18%) 70%,
  rgb(82 190 204 / 8%) 80%,
  rgb(82 190 204 / 2%) 90%,
  transparent 100%
)</code></pre>

<figure>
  <img src="https://leanrada.com/notes/css-only-lqip/interpolation-graph.png?ref=rss" width="1024" height="768">
  <figcaption>The quadratic interpolation is based on two quadratic curves (parabolas), one for each half of the gradient — one upward and another downward.</figcaption>
</figure>

<p>The quadratic easing blends adjacent radial gradients together, mimicking the smooth bilinear (or even bicubic) interpolation. It’s almost like a fake blur filter, thus achieving the ‘blur’ part of this BlurHash alternative.</p>
<card-box>
  <a href="https://leanrada.com/notes/css-only-lqip/gallery?ref=rss">Check out the gallery for a direct comparison to BlurHash.</a>
</card-box><lqip-examples>
  <img src="https://leanrada.com/notes/css-only-lqip/gallery/karsten-winegeart-613pTZEFf2U-unsplash.jpg?ref=rss" width="300" height="208">
  <img src="https://leanrada.com/notes/css-only-lqip/gallery/fahrul-azmi-Q1l1ofdVYl4-unsplash.jpg?ref=rss" width="225" height="300">
  <img src="https://leanrada.com/notes/css-only-lqip/gallery/esma-melike-sezer-9NRRCTGKYS4-unsplash.jpg?ref=rss" width="191" height="300">
  <img src="https://leanrada.com/notes/css-only-lqip/gallery/daniel-b-herrmann-squbLwpQRQ8-unsplash.jpg?ref=rss" width="240" height="300">
  <a href="https://leanrada.com/notes/css-only-lqip/javascript:(()=%3E%7Blet%20s;(s=document.getElementById('lqip-debug'))?s.remove%28%29%3A%28%28s=document.createElement%28%27style%27%29%29.innerHTML%3D%60%5Bstyle*%3D%27--my-lqip%3A%27%5D%3Anot%28%3Ahover%29%7Bobject-position%3Acalc%28infinity*1px%29%21important%7D%60%2Cs.id%3D%27lqip-debug%27%2Cdocument.head.append%28s%29%29%7D%29%28%29&amp;ref=rss">
    Toggle images
  </a>
</lqip-examples>
<h2>Appendix: Alternatives considered</h2>

<h3>Four colours instead of monochromatic preview</h3>

<p>Four 5-bit colours, where each <b>R</b> is 2 bits, <b>G</b> is 2 bits, and <b>B</b> is just a zero or one.</p>

<p>The four colours would map to the four corners of the image box, rendered as radial gradients</p>

<p>This was my first attempt, and I fiddled with this for a while, but mixing four colours properly require proper bilinear interpolation and probably a shader. Just layering gradients resulted in muddiness (just like mixing too many watercolour pigments), and there was no CSS blend mode that could fix it. So I abandoned it, and moved on to a monochromatic approach.</p>

<h3>Single solid colour</h3>

<p>This was what I used on this website before. It’s simple and effective. A clean-markup approach could still use the custom <code>--lqip</code> variable:</p>

<pre><code>&lt;img src="…" style="--lqip:#9bc28e"&gt;

&lt;style&gt;
/* we save some bytes by ‘aliasing’ this property */
* { background-color: var(--lqip) }
&lt;/style&gt;</code></pre>

<h3>HTML attribute instead of CSS custom property</h3>

<p>We can use HTML attributes to control CSS soon! Here’s what the LQIP markup would look like in the future:</p>

<pre><code>&lt;img src="…" lqip="192900"&gt;</code></pre>

<p>Waiting for <a href="https://developer.chrome.com/blog/advanced-attr" target="_blank"><code>attr()</code> Level 5</a> for this one. It’s nicer and shorter, fewer weird punctuations in markup <small>(who came up with the double dash for CSS vars anyway?)</small>. The value can then be referenced in CSS with <code>attr(lqip type(&lt;number&gt;))</code> instead of <code>var(--lqip)</code>.</p>

<p>For extra safety, a <code>data-</code> prefix could be added to the attribute name.</p>

<p>Can’t wait for this to get widespread adoption. I also want it for my <a href="https://jordanbrennan.hashnode.dev/tac-a-new-css-methodology" target="_blank">TAC components</a>.</p>
]]></description>
    </item>

    <item>
      <title><![CDATA[Inline rendering with document​.currentScript]]></title>
      <link><![CDATA[https://leanrada.com/notes/inline-rendering-currentscript/?ref=rss]]></link>
      <guid isPermaLink="true"><![CDATA[https://leanrada.com/notes/inline-rendering-currentscript/?ref=rss]]></guid>
      <pubDate>Fri, 07 Mar 2025 00:00:00 GMT</pubDate>
      <description><![CDATA[
<p>For quick and dirty rendering of simple dynamic content, you may not need the complexity of a templating language like Handlebars or a PHP backend.</p>

<p>Let’s use the example phrase, <i>“Come on, it’s <code>&lt;currentYear&gt;</code>”</i>. It should result in <i>“Come on, it’s <u><noscript>2025</noscript><script>$(new Date().getFullYear())</script></u>”</i> when rendered today.</p>

<p>You can write this directly in HTML—<em>without IDs, classes, or querySelectors in your JS!</em> Thanks to the <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/currentScript" target="_blank"><code>document.currentScript</code></a> property, we can refer to the <em>currently running <code>&lt;script&gt;</code> element</em> directly and go from there.</p>

<p>So the dynamic phrase <strong>“Come on, it’s <noscript>2025</noscript><script>$(new Date().getFullYear())</script>”</strong> would now be written as:</p>

<pre><code>Come on, it’s
&lt;script&gt;
  document.currentScript.replaceWith(new Date().getFullYear())
&lt;/script&gt;</code></pre>

<p>The script simply replaces itself with its computed value on the spot.</p>

<p>The code’s a bit wordy though, but we can <em>alias</em> it to a constant like <code>$</code> via <code>$=(...n)=&gt;document.currentScript.replaceWith(...n)</code>. Then we’d have something reminiscent of <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals" target="_blank">template literals</a> in JS.</p>

<pre><code>Come on, it’s &lt;script&gt;$(new Date().getFullYear())&lt;/script&gt;</code></pre>

<p>The code is pretty readable at a glance without context (after you get past the bit of indirection that is the <code>$</code> alias).</p>
<box-note role="complementary">
  <details>
    <summary>Click to see the WebComponent version! <small>Disclaimer: This is a joke.</small></summary>

    <code-block language="js">
      <code><pre>&lt;script&gt;$(RenderJS.toString())&lt;/script&gt;</pre></code>
    </code-block>

    <p>This is the <code>RenderJS</code> custom element. All it does is replace itself with the result of its contents treated as JavaScript code.</p>

    <p>To use it, we must first name the tag. The beloved dollar sign <code>$</code> is not allowed, so we use the next best thing—the emoji 💲. Sadly, that’s not enough: Tag names must start with a letter of the alphabet and include a hyphen. As such, we are forced to name it: <code>j-💲</code> representing JavaScript.</p>

    <code-block language="js">
      <code><pre>&lt;script&gt;customElements.define('j-💲', RenderJS);&lt;/script&gt;</pre></code>
    </code-block>

    <h3>Example usage</h3>

    <fixed-grid>
      <code-block>
        <code><pre>I overslept by about &lt;j-💲&gt;Math.PI&lt;/j-💲&gt; hours this morning.</pre></code>
      </code-block>
      <card-box>
        I overslept by about <j-💲>Math.PI</j-💲> hours this morning.
      </card-box>
    </fixed-grid>
  </details>
</box-note>
<p>A <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/noscript" target="_blank"><code>noscript</code></a> fallback would be nice for those that don’t run JS.</p>

<pre><code>Come on, it’s
&lt;noscript&gt;current year&lt;/noscript&gt;
&lt;script&gt;$(new Date().getFullYear())&lt;/script&gt;</code></pre>

<p>The resulting script-noscript juxtaposition in the markup looks almost like Angular/Vue’s if-else markup, neat.</p>
<box-note>IIRC, I learned about this technique from the <a href="https://github.com/gnat/surreal" target="_blank">Surreal</a> library or something similar. But I’m sure this is not a new discovery. These APIs have been standardised for a long time.</box-note>
<h2>Real world examples</h2>

<p>If you thought this technique is only useful for rendering the current year, you’re mostly right! As an example, I’ve used inline scripts to refer to relative dates in my living pages. Because <strong>“<noscript>8</noscript><script>$(new Date().getFullYear()-2017)</script> years ago”</strong> sounds more natural than <strong>“2017”</strong>.</p>

<pre><code>It was planted
&lt;noscript&gt;in 2017&lt;/noscript&gt;
&lt;script&gt;$(new Date().getFullYear()-2017, ' years ago')&lt;/script&gt;
but now it has grown tall and strong.</code></pre>
<card-box>
  It was planted
  <noscript>in 2017</noscript>
  <script>$(new Date().getFullYear()-2017, ' years ago')</script>
  but now it has grown tall and strong.
</card-box>
<h3>Random greeting</h3>

<p>Another example is in my front page, which says a randomly selected greeting on each visit.</p>

<img src="https://leanrada.com/notes/inline-rendering-currentscript/greeting.png?ref=rss" alt="screenshot of my homepage intro section">

<pre><code>&lt;span class="intro-line"&gt;
  &lt;noscript&gt;Hello!&lt;/noscript&gt;
  &lt;script&gt;
    $([
      "Hello!",
      "Hey~~~",
      "What’s up ↑",
      "Hi there →",
      "Hey there →",
    ][Date.now() % 5])
  &lt;/script&gt;
&lt;/span&gt;</code></pre>
<box-note>The randomiser is just a <code>Date.now()</code> with modulo because it was more concise than <code>Math.floor(Math.random() * 5)</code>.</box-note>
<h3>Splitting text for animation</h3>

<p>Split text into characters using inline scripts to generate markup per character which can then be controlled or animated! In my case, I used it to render circular text, but a more common use case is text animation like the following.</p>
<card-box>
  It has been a
  <script>document.currentScript.outerHTML=
    "supercalifragilisticexpialidocious".replace(/./g, c => `<strong>${c}</strong>`)
  </script>
  week.
  
</card-box>
<pre><code>It has been a
&lt;script&gt;document.currentScript.outerHTML=
  "supercalifragilisticexpialidocious"
    .replace(/./g, c =&gt; `&lt;strong&gt;${c}&lt;/strong&gt;`)
&lt;/script&gt;
week.

&lt;style&gt;
  strong {
    display: inline-block;
    animation: wave 0.3s infinite alternate ease-in-out;
    &amp;:nth-child(4n + 1) { animation-delay: -0.6s; }
    &amp;:nth-child(4n + 2) { animation-delay: -0.45s; }
    &amp;:nth-child(4n + 3) { animation-delay: -0.3s; }
    &amp;:nth-child(4n + 4) { animation-delay: -0.15s; }
  }
  @keyframes wave {
    to { transform: translateY(-2px); }
  }
&lt;/style&gt;</code></pre>

<h3>Rendering metadata to reduce duplication</h3>

<p>This post’s heading is dynamically derived from the page title metadata. I only have to define this post’s title once, in the <code>&lt;title&gt;</code> tag.</p>
<code><pre>&lt;blog-header&gt;
  &lt;h1&gt;&lt;script&gt;$(document.title)&lt;/script&gt;&lt;/h1&gt;
  &lt;img src="hero.jpg" alt="" loading="lazy"&gt;&lt;/img&gt;
&lt;/blog-header&gt;</pre></code>
<h3>Auto-updating footer</h3>

<p>How about an auto-updating copyright notice in the footer which may or may not have legal implications? <small>(IANAL)</small></p>

<pre><code>&lt;footer&gt;
  © &lt;script&gt;$(new Date().getFullYear())&lt;/script&gt; Mycorp, Ltd.
&lt;/footer&gt;</code></pre>

<p>For comparison, here’s the StackOverflow/ChatGPT answer:</p>
<fixed-grid>
<code-block language="js">
<pre><code>document
  .getElementById("copyright-year")
  .textContent = new Date().getFullYear();</code></pre>
</code-block>
<code-block language="html">
<pre><code>&lt;footer&gt;
  © &lt;span id="copyright-year"&gt;&lt;/span&gt; Mycorp, Ltd.
&lt;/footer&gt;</code></pre>
</code-block>
</fixed-grid>
<p>Why pollute the global ID namespace and separate coupled code if we can avoid it?</p>
<box-note><code>Date().split` `[3]</code> is also a short (but very hacky) way to get the year.</box-note>
<p>At this point you may be asking, is this technique only really useful for rendering the current year? Maybe, but we can do more than just <em>rendering</em> text.</p>

<p>Come on, it’s <noscript>2025</noscript><script>$(new Date().toLocaleDateString())</script>, the web is rich and interactive!</p>

<h3>The ubiquitous counter app example</h3>

<p>This is not a simple templating example anymore, but shows the power of <code>currentScript</code> in <a href="https://en.wikipedia.org/wiki/Hydration_(web_development)" target="_blank">hydrating</a> self-contained bits of interactive HTML.</p>
<card-box>
  Count: <span>0</span>
  <button theme="button">Increment</button>
  <button theme="button">Decrement</button>
  <script>
    const [span, increment, decrement] = document.currentScript.parentElement.children;
    let count = 0;
    increment.onclick = () => span.replaceChildren(++count);
    decrement.onclick = () => span.replaceChildren(--count);
  </script>
</card-box>
<pre><code>&lt;div&gt;
  Count: &lt;span&gt;0&lt;/span&gt;
  &lt;button&gt;Increment&lt;/button&gt;
  &lt;button&gt;Decrement&lt;/button&gt;
  &lt;script&gt;
    const [span, increment, decrement] =
      document.currentScript.parentElement.children;
    let count = 0;
    increment.onclick = () =&gt; span.replaceChildren(++count);
    decrement.onclick = () =&gt; span.replaceChildren(--count);
  &lt;/script&gt;
&lt;/div&gt;</code></pre>

<p>I used this ‘local script’ pattern all the time in a previous version of this blog. It’s useful when making interactive illustrations in the middle of a long post. You wouldn’t want to put that logic at the very end or start of the file, away from the relevant section! Same goes for styles, now made even better with the <a href="https://developer.chrome.com/docs/css-ui/at-scope#prelude-less_scope" target="_blank"><code>@scope</code> rule</a>.</p>

<p>It’s a good way to manage islands of interactivity.</p>

<h2>The catch</h2>

<p>There are reasons people gravitate to libraries and frameworks. They’re just too convenient.</p>

<p>If you want to use the alias definition above—the <code>$</code> shorthand—then you'd first have to define it at the top of the HTML, <strong>synchronously</strong>. Say you want to use this in multiple pages, so you put this in a common script file and load it via <code>&lt;script src="$.js"&lt;/script&gt;</code>. This could result in a parser- and render-blocking fetch: potentially very bad for performance!</p>

<p>For my own cases, I don’t use the alias. I straight up just use <code>document.currentScript​.replaceWith</code>. Wish it was  <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/write" target="_blank">shorter…</a></p>

<p>Also, you cannot do <strong>data-driven templating</strong> this way, in the sense that you have <strong>templates</strong> to apply <strong>data</strong> onto. Metadata such as date published, post title, and tags that are stored in some posts table or in frontmatter somewhere, cannot be used for inline scripting purposes. You can’t fetch data from inline scripts. Therefore, unless data is somehow pre-injected in the global scope, no luck in pure vanilla JS templating. This is where templating languages like <a href="https://shopify.github.io/liquid/" target="_blank">Liquid</a> really shine.</p>

<p>For my site, I don’t need a templating system—I use direct patching to data-drive my HTML (in which the source and the output files are the same).</p>

<p>Even if you use a templating framework or a static site generator, inline scripts remain useful!</p>

<h2>Further reading</h2>

<ul>
  <li><a href="https://github.com/gnat/surreal" target="_blank">Surreal</a> - a library that offers this technique, plus other jQuery-style helpers. Note the synchronous script tag loading issue though!</li>
  <li><a href="https://github.com/sveltejs/kit/issues/2221" target="_blank">currentScript discussion in SvelteKit</a> - this as an alternative to global IDs for self-hydrating things. In the end they went with generated IDs. :|</li>
</ul>

<h2>Appendix</h2>

<p><a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/write" target="_blank"><code>document.write()</code></a> used to (?) work like this for inline rendering, but it’s now deprecated because it had inconsistent behaviour.</p>
<code><pre>Come on, it’s
&lt;script&gt;document.write(new Date().getFullYear())&lt;/script&gt;,
stop using &lt;code&gt;document.write&lt;/code&gt;!</pre></code><iframe srcdoc="Come on, it’s <noscript>2025</noscript><script>document.write(new Date().getFullYear())</script>, stop using <code>document.write</code>!"></iframe>]]></description>
    </item>

    <item>
      <title><![CDATA[Rewriting my site in vanilla web]]></title>
      <link><![CDATA[https://leanrada.com/notes/vanilla-web-rewrite/?ref=rss]]></link>
      <guid isPermaLink="true"><![CDATA[https://leanrada.com/notes/vanilla-web-rewrite/?ref=rss]]></guid>
      <pubDate>Sat, 01 Mar 2025 00:00:00 GMT</pubDate>
      <description><![CDATA[
<p>I rewrote this website in vanilla HTML/CSS/JS. Here’s the story.</p>

<h2>But why?</h2>

<p>Over the years, I’ve used a bunch of libraries &amp; frameworks to build <a href="https://leanrada.com/wares/personal-website?ref=rss">this website</a>, before finally making my own static site generator that I called <a href="https://github.com/Kalabasa/compose-html" target="_blank"><code>compose-html</code></a>. As the name suggests, it composes HTML files together, very much like <a href="https://astro.build/" target="_blank">Astro</a>.</p>

<figure>
  <img src="https://leanrada.com/notes/vanilla-web-rewrite/compose-html.png?ref=rss" alt="screenshot of compose-html README">
  <figcaption>compose-html’s README</figcaption>
</figure>

<p>I like systems that have a small set of tight abstractions that are easy to understand. I’m not a fan of rigid, non-atomic concepts like “pages” and “layouts”, “themes”, “frontmatters” — I mean, these are just ‘components’ and ‘data’! I dislike those that dictate your project directory structure and coding style.</p>

<figure>
  <img src="https://leanrada.com/notes/vanilla-web-rewrite/project-structure-docs.png?ref=rss" alt="screenshot of a framework’s documentation">
  <figcaption>If your documentation has a ‘Project structure’ section, I’m out!</figcaption>
</figure>

<p>So I built my own simple site builder and that was nice BUT it didn’t end up making life easier. The real world is messy, and HTML more so. Simply composing pieces of HTML together isn’t that straightforward and the abstraction leaked. My <code>compose-html</code> framework eventually turned into a 2k LoC that was more liability than freedom. Though it served me very well, it was a dead end.</p>

<h2>Maybe nothing can solve my problem…</h2>

<p>As in, literally nothing. No framework. No build steps.</p>

<p>What if HTML wasn’t a render target, but was both the authoring and publishing medium?</p>

<p>What if I rewrote my site in vanilla HTML/CSS/JS? A crazy idea infiltrated my conciousness.</p>

<h2>Is it feasible?</h2>

<p>A common reason for adding complexity is to avoid repetitive work like copying headers &amp; footers to every page. So we have PHP, Handlebars, Next.JS.</p>

<p>Modern HTML/JS now has <a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_components" target="_blank"><strong>Web Components</strong></a>, custom elements which could be used to encapsulate repetitive sections! <small>This was already possible without Web Components, but it makes it nicer.</small></p>

<p>One could go write HTML like this:</p>

<pre><code>&lt;!doctype html&gt;
&lt;site-header&gt;&lt;/site-header&gt;
&lt;main&gt;
  My page's content
&lt;/main&gt;
&lt;site-footer&gt;&lt;/site-footer&gt;</code></pre>
<box-note><strong>What about the repetitive &lt;html&gt;, &lt;head&gt;, and &lt;body&gt; tags?</strong> Fortunately, web browsers and the HTML spec itself are lenient. These tags are <a href="https://html.spec.whatwg.org/#optional-tags" target="_blank">actually optional</a>!</box-note>
<p>One would still need to manually copy and paste some common tags like the <code>&lt;script&gt;</code> to load the custom elements, and maybe a <code>common.css</code> file and a few meta tags. But I’d say it’s a similar level of boilerplate as some other frameworks, if not a bit un-DRY.</p>
<box-note><strong>What about people who disable JS?</strong> No problem. They would still see the main content itself, just not the navigational headers &amp; footers. I presume these people would be savvy enough to navigate by URL.</box-note>
<p>Another reason to use a generator is to generate data-driven content, especially for blog sites which usually have a blog index page with autogenerated collections of posts.</p>

<figure>
  <img src="https://leanrada.com/notes/vanilla-web-rewrite/blog-list.png?ref=rss" alt="screenshot of a blog post list">
  <figcaption>A chronological list of posts.</figcaption>
</figure>

<p>I don’t want to hand-code lists of posts. Especially since a slice of the latest posts is mirrored in the homepage. As I said, the real world is messy, and there is not one absolute dogma that can solve it all. A bit of automation is perfectly fine whenever needed! Just there’s no need to build-systemify the entire site.</p>

<p>With these concerns out of the way, the rewrite was looking more feasible.</p>

<h2>My approach</h2>

<p>To make sense of the rewrite and keep the site maintainable going forward, I decided to follow these principles:</p>

<ol>
  <li>Semantic HTML</li>
  <li>TAC CSS methodology</li>
  <li>
    Web Components with Light DOM
  </li>
</ol>

<h3>1. Semantic HTML</h3>

<p>Basically means using semantic tags instead of generic <code>div</code>s and <code>span</code>s</p>

<p>One example is the <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/time" target="_blank"><code>time</code></a> tag that I used to indicate post date.</p>

<pre><code>&lt;time datetime="2025-02-26"&gt;26 Feb 2025&lt;/time&gt;</code></pre>

<p>Along the usual benefits of semantic HTML, the variety of tags will come in handy in this very rewrite, which will become obvious in the next point.</p>

<h3>2. TAC methodology</h3>

<p><a href="https://jordanbrennan.hashnode.dev/tac-a-new-css-methodology" target="_blank">TAC methodology</a> is a modern CSS approach takes advantage of the modern web.</p>

<p>The main takeaway is that we should make up <strong>new tags</strong> instead of divs-with-classes to represent conceptual components. For example:</p>

<pre><code>&lt;blog-post-info hidden&gt;
  &lt;time datetime="2025-02-26"&gt;26 Feb 2025&lt;/time&gt;
  · 1 min read
&lt;/blog-post-info&gt;</code></pre>


Contrast that with, let’s say, <a href="https://getbem.com/" target="_blank">BEM methodology</a>:


<pre><code>&lt;div class="blog-post-info blog-post-info_hidden"&gt;
  &lt;time class="blog-post-info__date" datetime="2025-02-26"&gt;
    26 Feb 2025
  &lt;/time&gt;
  · 1 min read
&lt;/div&gt;</code></pre>


By making up a new tag called <code>blog-post-info</code>, the styling of these elements could easily use <strong>tag</strong> and <strong>attribute</strong> selectors (the T and A of TAC!) without the need for classes! The markup is leaner, and the CSS even looks modular when taking advantage of modern CSS nesting:


<pre><code>blog-post-info {
  display: block; /* note: made-up tags default to `inline` */
  color: #fff;

  &amp;[hidden] {
    display: none;
  }

  /* semantic HTML helps narrow the element to select */
  &gt; time {
    color: #ccc;
    font-weight: bold
  }
}</code></pre>

<p>While TAC was called a CSS methodology by the authors, it influences Web Component philosophy as well, into the next point.</p>

<h3>3. Web Components with light DOM</h3>

<p>I’ve always found the <a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_components" target="_blank">Web Component</a> abstraction to be a bit heavy. You have the Shadow DOM, encapsulation modes (?), slots, templates, and many more related concepts. Now, some of those are pretty useful like slots and templates (which aren’t exclusive to Web Components). But overall, Web Components feel a bit clunky.</p>

<p>The <a href="https://meyerweb.com/eric/thoughts/2023/11/01/blinded-by-the-light-dom/" target="_blank">‘light DOM’</a> approach does away with all of that. Like the example above:</p>

<pre><code>&lt;blog-post-info hidden&gt;
  &lt;time datetime="2025-02-26"&gt;26 Feb 2025&lt;/time&gt;
  · 1 min read
&lt;/blog-post-info&gt;</code></pre>

<p>If implemented with shadow DOM, it could’ve look like this:</p>

<pre><code>&lt;blog-post-info datetime="2025-02-26" minread="1"&gt;&lt;/blog-post-info&gt;
&lt;!-- or maybe --&gt;
&lt;blog-post-info datetime="2025-02-26"&gt;
  1 min read
&lt;/blog-post-info&gt;</code></pre>

<p>The light DOM aligns with the TAC methodology, so it’s a good match.</p>

<p>I admit scoped styles and slots are neat, but there aren’t essential (see TAC) and there are workarounds to slots. <strong>I’m not making a modular design system after all.</strong></p>

<p>Using the light DOM also provides a smoother transition from plain JS style to Web Components. Relevant, as I was converting some old JS code. Imagine the following common pattern:</p>

<pre><code>for (const blogPostInfo of document.querySelectorAll(".blog-post-info")) {
  const time = blogPostInfo.querySelector("time");
  // ... initialisation code
}</code></pre>


This pattern maps neatly to Web Component style:


<pre><code>customElements.define(
  "blog-post-info",
  class BlogPostInfo extends HTMLElement {
    connectedCallback() {
      const time = this.querySelector("time");
      // ... initialisation code
    }
  }
);</code></pre>

<p>The mapping was straightforward enough that I was able to partially automate the conversion via <a href="https://en.wikipedia.org/wiki/GitHub_Copilot" target="_blank">LLM</a>.</p>

<p>While I’m not really making the most out of Web Components technology, I don’t actually need the extra features. I have a confession — I set <code>this.innerHTML</code> directly within a Web Component, and it’s so much simpler than setting up <code>template</code>s. I do try to sanitize.</p>

<p>Details aside, these principles made the whole rewrite easier because it reduced the amount of actual refactoring. I wasn’t able to particularly follow them to the letter, especially for nasty old code. But for future code, I hope to keep using these techniques.</p>

<h2>A brief premature retrospective</h2>

<p><strong>Pros:</strong></p>

<ul>
  <li>Instant feedback loop. Zero build time.</li>
  <li>No bugs out of my control. <small>It’s what turned me off <a href="https://www.11ty.dev/" target="_blank">Eleventy</a>.</small></li>
  <li>No limitations imposed by framework or paradigm.</li>
</ul>

<p><strong>Cons:</strong></p>

<ul>
  <li>Big common files, <code>common.js</code> and <code>common.css</code>, ‘cause no bundler.</li>
  <li>Verbose. No shortcuts, e.g. anchor tag — compare markdown links.</li>
  <li>Frequent copy pasting.</li>
  <li>Harder to redesign the site now.</li>
</ul>

<p>I’m fine with a little bit of verbosity. For contrast, I wrote the <a href="https://leanrada.com/htmz/" target="_blank">htmz page</a> manually in plain HTML, <em>including the syntax-highlighted code snippets!</em></p>

<figure>
  <img src="https://leanrada.com/notes/vanilla-web-rewrite/htmz-page-code.png?ref=rss" alt="source code of htmz page">
  <figcaption>Have you ever tried manual syntax highlighting?</figcaption>
</figure>

<p>But not this time, I added the <a href="https://prismjs.com/" target="_blank">Prism.js</a> library to automate syntax highlighting.</p>

<h2>Tips &amp; tricks</h2>

<p><strong>AI —</strong> I used LLMs to help me convert a bunch of pages into the new style. What I did was give it an example of an old page and the converted version (manually converted by me), and then it gave me a converter script that I tweaked and ran through most of the pages. I did the same to convert components and it was a breeze. The converted script was iteratively improved upon and made more robust by me and the LLM via examples of incorrect conversions and corrected versions. I guess the trick was to give it more examples instead of more elaborate instructions.</p>

<pre><code>// this snippet from the AI-assisted converter script
// converts &lt;blog-post-info&gt; elements
input("blog-post-info").each((i, el) =&gt; {
  const tag = input(el);
  const hidden = tag.attr("hidden") != null;
  const date = tag.attr("date");
  const readMins = tag.attr("read-mins");

  let out = `&lt;blog-post-info${hidden ? " hidden" : ""}&gt;\n`;
  const dateDate = new Date(date);
  const yyyy = dateDate.getFullYear();
  const mm = (dateDate.getMonth() + 1).toString().padStart(2, "0");
  const dd = dateDate.getDate().toString().padStart(2, "0");
  out += `  &lt;time datetime="${yyyy}-${mm}-${dd}"&gt;${date}&lt;/time&gt;\n`;
  out += `  · ${readMins} min read\n`;
  out += `&lt;/blog-post-info&gt;`;
  tag.remove();
  main.before(out + "\n\n");
});</code></pre>

<p><strong>Autoload —</strong> I added client-side JS that searched for custom tags and loaded the appropriate script files when those tags enter the viewport. In short, <em>lazy loading components</em>. I did have to impose a rigid file structure, because whenever it encounters a tag it would try to <code>import(`/components/${tagName}.js`)</code> — all my autoloaded components had to be in that flat directory. Am I a hypocrite? No, I can change that rule anytime.</p>

<pre><code>// autoloads components in the viewport
new IntersectionObserver((entries) =&gt; {
  for (const entry of entries) {
    if (entry.isIntersecting) {
      if (components.has(entry.target.tagName)) {
        import(`/components/${entry.target.tagName}.js`);
        components.delete(entry.target.tagName);
      }
      intersectionObserver.unobserve(entry.target);
    }
  }
});</code></pre>

<p><strong>This is not an exercise in purity —</strong> This is a real website, a personal one at that. This is not a pure HTML proof-of-concept. Not a TAC role model. Not a Web Component masterpiece. I would add inline JS whenever it’s more convenient, break encapsulation if necessary, use classes instead of pure tag selectors. Don’t let the ideal pure plain static TAC+WebComponent vanilla HTML+CSS get in the way of finishing the project. In other words, pragmatism over principles.</p>

<h2>Homepage redesign</h2>

<p>I couldn’t resist the temptation to not just port, but redesign the site (at least, the homepage).</p>
<prose-bleed>
  <img src="https://leanrada.com/notes/vanilla-web-rewrite/homepage-sections.png?ref=rss" alt="screenshot of sections">
</prose-bleed>
<p>The homepage sections are now more dense, more desktop-equal (not mobile-first), and the bento section has been revamped!</p>

<figure>
  <prose-bleed>
    <img src="https://leanrada.com/notes/vanilla-web-rewrite/homepage-bento.png?ref=rss" alt="screenshot of bento section">
  </prose-bleed>
  <figcaption>See also, autoupdating note count, project count, GitHub stats, and hit counter. Sprinkles of automation, no build system required!</figcaption>
</figure>

<p>I’ll probably add a live Spotify card in there somewhere.</p>
<hr><prose-bleed>
  <img src="https://leanrada.com/notes/vanilla-web-rewrite/diff.png?ref=rss" alt="1536 changed files, 25511 additions, 19076 deletions.">
</prose-bleed>
<p>That’s about it! The whole site rewrite went smoother and quicker than expected! And I’m quite liking the raw authoring experience. Now, how long will this new paradigm hold up? 😏</p>

<img src="https://leanrada.com/notes/vanilla-web-rewrite/notebook.jpg?ref=rss" alt="notebook">
]]></description>
    </item>

        <item>
            <title><![CDATA[CSS sprite sheet animations]]></title>
            <description><![CDATA[<p><em>For RSS readers: This article contains interactive content available on the <a href="https://leanrada.com/notes/css-sprite-sheets?ref=rss">original post on leanrada.com</a>.</em></p>

<p>Check out this demo first (Click it!):</p>
<label>
                <input type="checkbox">
                <div>
                  <div role="img" alt="interactive heart animation">
                  </div>
                </div>
                Heart
              </label>
<p>Yes, it’s the Twitter heart button. This heart animation was done using an old technique called <a target="_blank" href="https://en.wikipedia.org/wiki/Texture_atlas"><strong>sprite sheets</strong><span>🡵</span></a>.</p>

<pre>Interactive content: <a href="https://leanrada.com/notes/css-sprite-sheets?ref=rss">Visit the website to play with interactive content!</a>
Alternative text: spinning clover</pre>

<pre>Interactive content: <a href="https://leanrada.com/notes/css-sprite-sheets?ref=rss">Visit the website to play with interactive content!</a>
Alternative text: spinning clover</pre>

<pre>Interactive content: <a href="https://leanrada.com/notes/css-sprite-sheets?ref=rss">Visit the website to play with interactive content!</a>
Alternative text: spinning clover</pre>

<p>On the web sprite sheets are used mainly to reduce the amount of HTTP requests by bundling multiple images together into a single image file. Displaying a sub-image involves clipping the sheet in the appropriate coordinates.</p>

<img srcset="" sizes="" spec="100% [664) 664" loading="lazy" width="100%" data-placeholder="" src="https://leanrada.com/notes/css-sprite-sheets/minecraft.png?ref=rss" caption="Sprite sheet / texture atlas of Minecraft blocks">
<span>Sprite sheet / texture atlas of Minecraft blocks</span>
<p>The bandwidth benefit has been largely mitigated by HTTP/2 now, but sprite sheets have another purpose: <strong>animations!</strong> Displaying animations is one of the primary uses of sprite sheets, besides loading performance.</p>

<img srcset="" sizes="" spec="100% [664) 664" loading="lazy" width="100%" data-placeholder="" src="https://leanrada.com/notes/css-sprite-sheets/animation-opaque.png?ref=rss" caption="Characters w/ animations, sprite sheet by <text-link href='https://opengameart.org/content/classic-hero-and-baddies-pack'>GrafxKid</text-link>">
<span>Characters w/ animations, sprite sheet by <a target="_blank" href="https://opengameart.org/content/classic-hero-and-baddies-pack">GrafxKid</a></span>
<p>It’s neat for small raster-based animations such as loading spinners, characters, icons, and micro-interactions.</p>

<pre>Interactive content: <a href="https://leanrada.com/notes/css-sprite-sheets?ref=rss">Visit the website to play with interactive content!</a>
Alternative text: walking animation of a red monster character</pre>

<pre>Interactive content: <a href="https://leanrada.com/notes/css-sprite-sheets?ref=rss">Visit the website to play with interactive content!</a>
Alternative text: walking animation of a blue monster character</pre>

<h2 id="how">How</h2>

<p>Assumming you already have a sprite sheet image and coordinates in hand, all you need is a way to clip that image for display. There are a few ways to clip an image in CSS.</p>
<table>
                <thead>
                  <tr>
                    <th>method</th>
                    <th>coordinates via</th>
                  </tr>
                </thead>
                <tbody>
                  <tr>
                    <td><code>background-image</code></td>
                    <td><code>background-position</code></td>
                  </tr>
                  <tr>
                    <td><code>overflow: hidden</code> with nested <code>&lt;img&gt;</code></td>
                    <td><code>left</code>, <code>top</code> on the nested element</td>
                  </tr>
                  <tr>
                    <td><code>clip-path</code></td>
                    <td><code>clip-path</code>, <code>left</code>, <code>top</code></td>
                  </tr>
                </tbody>
              </table>
<p>The <code>left</code> and <code>top</code> rules can be substituted for <code>transform: translate(…)</code>.</p>

<p>The <code>background-image</code> way is the most convenient since you only need one element.</p>

<pre><code><span>.element</span> <span>{</span>
  <span>background-image</span><span>:</span> <span><span>url</span><span>(</span><span>'heart.png'</span><span>)</span></span><span>;</span>
  <span>/* size of one frame */</span>
  <span>width</span><span>:</span> 100px<span>;</span>
  <span>height</span><span>:</span> 100px<span>;</span>
  <span>/* size of the whole sheet */</span>
  <span>background-size</span><span>:</span> 2900px 100px<span>;</span>
  <span>/* coordinates of the desired frame (negated) */</span>
  <span>background-position</span><span>:</span> -500px 0px<span>;</span>
<span>}</span></code></pre>

<p>This is the sprite sheet for the heart animation from Twitter:</p>

<img srcset="" sizes="" spec="100% [800) 70% [1750) 1225" loading="lazy" width="400%" src="https://leanrada.com/notes/css-sprite-sheets/twitter.png?ref=rss" type="bleed" alt="Heart animation sprite sheet from Twitter">

<p>Using this image, the code above produces a still image of the frame at (500,0) — the sixth frame.</p>
<figure role="img" alt="6th frame of the heart animation"></figure>
<p>Removing the clipping method reveals that it’s just a part of the whole sheet (this view will be fun when it’s actually animating):</p>
<figure role="img" alt="6th frame of the heart animation">
                <div>
                </div>
              </figure>
<p>If the sprite sheet wasn’t made to be animated, that is, if it was just a collection of multiple unrelated sub-images like the Minecraft example earlier, then the CSS rules above are all we need to know. That’s it.</p>

<p>Since this sprite sheet was made to be animated, that is, it contains animation frames, more needs to be done.</p>

<p>To animate this, we animate the <code>background-position</code> over each frame in the sequence, flashing each frame in quick succession.</p>

<pre><code><span><span> </span><span>.element</span> <span>{</span>
<span> </span>  <span>background-image</span><span>:</span> <span><span>url</span><span>(</span><span>'heart.png'</span><span>)</span></span><span>;</span>
<span> </span>  <span>/* size of one frame */</span>
<span> </span>  <span>width</span><span>:</span> 100px<span>;</span>
<span> </span>  <span>height</span><span>:</span> 100px<span>;</span>
<span> </span>  <span>/* size of the whole sheet */</span>
<span> </span>  <span>background-size</span><span>:</span> 2900px 100px<span>;</span>
</span><span><span>-</span>  <span>/* coordinates of the desired frame (negated) */</span>
<span>-</span>  <span>background-position</span><span>:</span> -500px 0px<span>;</span>
</span><span><span>+</span>  <span>/* animate the coordinates */</span>
<span>+</span>  <span>animation</span><span>:</span> heartAnimation 2s <span>steps</span><span>(</span>29<span>,</span> jump-none<span>)</span> infinite<span>;</span>
<span>+</span><span>}</span>
<span>+</span>
<span>+</span><span><span>@keyframes</span> heartAnimation</span> <span>{</span>
<span>+</span>  <span>from</span> <span>{</span>
<span>+</span>    <span>/* first frame */</span>
<span>+</span>    <span>background-position</span><span>:</span> 0px 0px<span>;</span>
<span>+</span>  <span>}</span>
<span>+</span>  <span>to</span> <span>{</span>
<span>+</span>    <span>/* last frame */</span>
<span>+</span>    <span>background-position</span><span>:</span> -2800px 0px<span>;</span>
<span>+</span>  <span>}</span>
<span>+</span><span>}</span></span></code></pre>

<p><span><strong>Important: Note the <a target="_blank" href="https://developer.mozilla.org/en-US/docs/Web/CSS/animation-timing-function#stepsinteger_step-position"><code>steps()</code><span>🡵</span></a> timing function in the <code>animation</code> rule above!</strong> This is required for the transition to land exactly <em>on</em> the frames.</span></p>

<p>Voilà.</p>
<figure role="img" alt="the heart animation"></figure>
<p>And the view without clipping:</p>
<figure role="img" alt="the heart animation (unclipped)">
                <div>
                </div>
              </figure>
<img loading="lazy" width="100%" data-placeholder="" src="https://leanrada.com/notes/css-sprite-sheets/zoetrope.gif?ref=rss" caption="It’s like a <text-link href='https://deniseanimation.weebly.com/zoetropes.html'>zoetrope</text-link>">
<span>It’s like a <a target="_blank" href="https://deniseanimation.weebly.com/zoetropes.html">zoetrope</a></span>
<p>The exact parameters for the <code>steps()</code> function are a bit fiddly and it depends on whether you loop it or reverse it, but here’s what worked for the heart animation with 29 total frames.</p>

<pre><code><span>animation-timing-function</span><span>:</span> <span>steps</span><span>(</span>29<span>,</span> jump-none<span>)</span><span>;</span></code></pre>

<p>Using any other timing function results in a weird smooth in-betweening movement like this:</p>
<figure role="img" alt="janky heart animation"></figure>
<p>Remember, <a target="_blank" href="https://developer.mozilla.org/en-US/docs/Web/CSS/animation-timing-function#stepsinteger_step-position"><code>steps()</code><span>🡵</span></a> is crucial!</p>

<h2 id="why-not-apng">Why not APNG?</h2>

<p>For autoplaying stuff like loading spinners, you might want plain old GIFs or <a target="_blank" href="https://en.wikipedia.org/wiki/APNG">APNGs<span>🡵</span></a> instead.</p>

<p>But we don’t have tight control over the playback with these formats.</p>

<p>With sprite sheets, we can pause, reverse, play on hover, change the frame rate…</p>

<p>…make it <strong>scroll-driven</strong>,</p>
<figure>
              <div>
                <pre>Interactive content: <a href="https://leanrada.com/notes/css-sprite-sheets?ref=rss">Visit the website to play with interactive content!</a>
Alternative text: spinning globe</pre>
                <pre>Interactive content: <a href="https://leanrada.com/notes/css-sprite-sheets?ref=rss">Visit the website to play with interactive content!</a>
Alternative text: spinning moon</pre>
                <pre>Interactive content: <a href="https://leanrada.com/notes/css-sprite-sheets?ref=rss">Visit the website to play with interactive content!</a>
Alternative text: spinning globe</pre>
              </div>
              <figcaption>Note: Scroll-driven animations are experimental. No Firefox support atm.</figcaption>
            </figure>
<p>… or make it <strong>interactive</strong>!</p>

<h2 id="interactivity">Interactivity</h2>

<p>The nice thing about this being in CSS is that we can make it interactive via selectors.</p>

<p>Continuing with the heart example, we can turn it into a stylised toggle control via HTML &amp; CSS:</p>
<label>
                <input type="checkbox">
                <div>
                  <div role="img" alt="interactive heart animation">
                  </div>
                </div>
                Heart
              </label>
<pre><code><span><span> </span><span>.element</span> <span>{</span>
<span> </span>  <span>background-image</span><span>:</span> <span><span>url</span><span>(</span><span>'heart.png'</span><span>)</span></span><span>;</span>
<span> </span>  <span>/* size of one frame */</span>
<span> </span>  <span>width</span><span>:</span> 100px<span>;</span>
<span> </span>  <span>height</span><span>:</span> 100px<span>;</span>
<span> </span>  <span>/* size of the whole sheet */</span>
<span> </span>  <span>background-size</span><span>:</span> 2900px 100px<span>;</span>
</span><span><span>+</span> <span>}</span>
<span>+</span>
<span>+</span><span>.input:checked ~ .element</span> <span>{</span>
</span><span><span> </span>  <span>/* animate the coordinates */</span>
</span><span><span>-</span>  <span>animation</span><span>:</span> heartAnimation 2s <span>steps</span><span>(</span>29<span>,</span> jump-none<span>)</span> infinite<span>;</span>
</span><span><span>+</span>  <span>animation</span><span>:</span> heartAnimation 2s <span>steps</span><span>(</span>29<span>,</span> jump-none<span>)</span> forwards<span>;</span>
</span><span><span> </span><span>}</span>
<span> </span>
<span> </span><span><span>@keyframes</span> heartAnimation</span> <span>{</span>
<span> </span>  <span>from</span> <span>{</span>
<span> </span>    <span>/* first frame */</span>
<span> </span>    <span>background-position</span><span>:</span> 0px 0px<span>;</span>
<span> </span>  <span>}</span>
<span> </span>  <span>to</span> <span>{</span>
<span> </span>    <span>/* last frame */</span>
<span> </span>    <span>background-position</span><span>:</span> -2800px 0px<span>;</span>
<span> </span>  <span>}</span>
<span> </span><span>}</span></span></code></pre>

<p>Or use the new <code>:has(:checked)</code>.</p>

<p><span>Additionally, CSS doesn’t block the main thread. In modern browsers, the big difference between CSS animations and JS-driven animations (i.e. <code>requestAnimationFrame</code> loops) is that the JS one runs on the main thread along with event handlers and DOM operations, so if you have some heavy JS (like React rerendering the DOM), JS animations would suffer along with it.</span></p>

<p>Of course, JS could still be used, if only to <em>trigger</em> these CSS sprite animations by adding or removing CSS classes.</p>

<h2 id="why-not-animated-svgs">Why not animated SVGs?</h2>

<p>If you have a vector format, then an <a target="_blank" href="https://developer.mozilla.org/en-US/docs/Web/SVG/SVG_animation_with_SMIL">animated SVG<span>🡵</span></a> is a decent option!</p>

<p>This format is kinda hard to author and integrate though — one would need both animation skills and coding skills to implement it. Some paid tools apparently exist to make it easier?</p>

<p>And Lottie? That 300-kilobyte library? Uh, sure, if you really need it.</p>

<h2 id="limitations-of-sprite-sheets">Limitations of sprite sheets</h2>

<ul>
              <li>The sheet could end up as a very large image file if you’re not very careful.</li>
              <li>It’s only effective for the narrow case of small frame-by-frame raster animations. Beyond that, better options may exist, such animated SVGs, the <code>&lt;video&gt;</code> tag, the <code>&lt;canvas&gt;</code> tag, etc.</li>
              <li>How do you support higher pixel densities? Media queries on <code>background-image</code>? <code>&lt;img&gt;</code> with <code>srcset</code> could work, but the coordinates are another matter. But it could be solved generally with CSS custom properties and <code>calc</code>.</li>
            </ul>

<h2 id="gallery">Gallery</h2>
<figure>
              <div>
                <pre>Interactive content: <a href="https://leanrada.com/notes/css-sprite-sheets?ref=rss">Visit the website to play with interactive content!</a>
Alternative text: star animation from Twitter</pre>
              </div>
              <figcaption>‘Favorite’ icon animation</figcaption>
            </figure><figure>
              <div>
                <pre>Interactive content: <a href="https://leanrada.com/notes/css-sprite-sheets?ref=rss">Visit the website to play with interactive content!</a>
Alternative text: walking animation of a snail</pre>
                <pre>Interactive content: <a href="https://leanrada.com/notes/css-sprite-sheets?ref=rss">Visit the website to play with interactive content!</a>
Alternative text: idle hiding animation of a snail</pre>
                <pre>Interactive content: <a href="https://leanrada.com/notes/css-sprite-sheets?ref=rss">Visit the website to play with interactive content!</a>
Alternative text: climb animation of a snail</pre>
                <pre>Interactive content: <a href="https://leanrada.com/notes/css-sprite-sheets?ref=rss">Visit the website to play with interactive content!</a>
Alternative text: attack animation of a snail</pre>
                <pre>Interactive content: <a href="https://leanrada.com/notes/css-sprite-sheets?ref=rss">Visit the website to play with interactive content!</a>
Alternative text: death animation of a snail</pre>
              </div>
              <figcaption>Snail enemy sprites from my game <a target="_blank" href="https://leanrada.com/wares/miniforts?ref=rss">MiniForts</a></figcaption>
            </figure>
<video muted="" autoplay="" loop="" playsinline="" caption="I actually had to implement these hover animations via sprite sheets at work." data-src="/notes/css-sprite-sheets/work.mp4">
                <source src="https://leanrada.com/notes/css-sprite-sheets/work.mp4?ref=rss">

                Video: | Source: /notes/css-sprite-sheets/work.mp4

              </video>
<span>I actually had to implement these hover animations via sprite sheets at work.</span>
<video muted="" autoplay="" loop="" playsinline="" media-class="u-media" caption="Behind the scenes" data-src="/notes/css-sprite-sheets/work2.mp4">
                <source src="https://leanrada.com/notes/css-sprite-sheets/work2.mp4?ref=rss">

                Video: | Source: /notes/css-sprite-sheets/work2.mp4

              </video>
<span>Behind the scenes</span><iframe height="414" scrolling="no" title="GSAP Draggable 360° sprite slider" src="https://codepen.io/jamiejefferson/embed/DgqxVe?default-tab=result&amp;theme-id=dark" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">
              See the Pen <a href="https://codepen.io/jamiejefferson/pen/DgqxVe">
                GSAP Draggable 360° sprite slider</a> by Jamie Jefferson (<a href="https://codepen.io/jamiejefferson">@jamiejefferson</a>)
              on <a href="https://codepen.io">CodePen</a>.
            </iframe><iframe height="333" scrolling="no" title="Steps Animation" src="https://codepen.io/simurai/embed/krWaKX?default-tab=result&amp;theme-id=dark" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">
              See the Pen <a href="https://codepen.io/simurai/pen/krWaKX">
                Steps Animation</a> by simurai (<a href="https://codepen.io/simurai">@simurai</a>)
              on <a href="https://codepen.io">CodePen</a>.
            </iframe>]]></description>
            <link>https://leanrada.com/notes/css-sprite-sheets?ref=rss</link>
            <guid isPermaLink="true">https://leanrada.com/notes/css-sprite-sheets?ref=rss</guid>
            <pubDate>Sun, 03 Nov 2024 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Centering a div in a div in 2020]]></title>
            <description><![CDATA[
<p>tl;dr: use <code>place-content: center</code> on a <code>grid</code> container.</p>

<pre><code><span>.container</span> <span>{</span>
  <span>display</span><span>:</span> grid<span>;</span>
  <span>place-content</span><span>:</span> center<span>;</span>
<span>}</span></code></pre>

<p>Here’s how that looks like:</p>
div child
<p>That’s it. Two CSS rules.</p>

<p>Yes, four years late according to <em>caniuse</em>. But this is apparently still not well-known today.</p>

<p>Based on <a target="_blank" href="https://build-your-own.org/blog/20240813_css_vertical_center/">recent developments<span>🡵</span></a>, looks like we just need a few more years
              before we can finally get rid of the extra <code>display</code> rule so we can have the one CSS rule to center them all.
            </p>
]]></description>
            <link>https://leanrada.com/notes/how-to-center-in-css?ref=rss</link>
            <guid isPermaLink="true">https://leanrada.com/notes/how-to-center-in-css?ref=rss</guid>
            <pubDate>Thu, 17 Oct 2024 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[I made an app to fix my motion sickness]]></title>
            <description><![CDATA[
<p>Last May, Apple announced a new feature called <strong>Vehicle Motion Cues</strong> for their iOS devices. It’s an overlay that can help reduce motion sickness while riding a vehicle.</p>

<p>I have really bad motion sickness, and riding cars, buses, and trains makes me nauseous. This feature would have been a nice relief for me, but as it stands, I use Android.</p>

<p>Instead of buying a Malus fruit device, I took the matter into my own programmer hands. I created an alternative app for Android.</p>

<p><span>To be sure, I checked the patents. Apple does have one regarding a certain motion sickness solution, but it’s specifically for head-mounted displays, not handheld devices. I figured it’s because there is prior art for handheld devices, such as <a target="_blank" href="https://play.google.com/store/apps/details?id=com.urbandroid.kinestop&amp;pcampaignid=web_share"><strong>KineStop</strong> for Android by Urbandroid<span>🡵</span></a>.</span></p>

<p>My app is called <strong>EasyQueasy</strong>. What it does is display onscreen vestibular signals that try to help prevent motion sickness. This functions as an overlay that is displayed on top of whatever you’re doing, browsing the web or watching videos.</p>

<video muted="" autoplay="" loop="" playsinline="" aria-label="demo video showing the app running in a moving train" alt="demo video showing the app running in a moving train" data-src="/notes/motion-sickness-app/demo.mp4">
                <source src="https://leanrada.com/gen/_notes_motion_sickness_app_demo_664.generated.mp4?ref=rss">

                Video: demo video showing the app running in a moving train | Source: /notes/motion-sickness-app/demo.mp4

              </video>

<p>The app is open source. I might try to get it on F-Droid someday. <small>Probably not Google Play since Google suspended my developer account due to “inactivity”.</small></p>

<p>I made this for myself so I haven’t really sorted out distribution. <a target="_blank" href="https://github.com/Kalabasa/EasyQueasy">GitHub repo is here anyway<span>🡵</span></a>.</p>

<p><span>Side note: Apologies to the RSS readers of this blog and <code>segfault</code>. I accidentally published this post in the RSS feed, but not on the site, which lead to an incomplete draft post and a 404 error.</span></p>

<h2 id="how-does-it-work">How does it work?</h2>

<p>There are two facets to this inquiry:</p>

<ol>
              <li>How does it help with motion sickness?</li>
              <li>How does the app work behind the scenes?</li>
            </ol>

<p>Let’s go over them sequentially.</p>

<h2 id="how-to-unsick-motion">How to unsick motion</h2>

<p><a target="_blank" href="https://en.wikipedia.org/wiki/Motion_sickness"><strong>Motion sickness</strong><span>🡵</span></a> happens when your brain receives conflicting motion cues from your senses. Motion cues come from the <strong>vestibular system</strong> (“sense of balance”, inner ears) and the <strong>visual system</strong> (eyes).</p>

<img srcset="" sizes="" spec="100% [664) 664" loading="lazy" width="100%" data-placeholder="" caption="The system diagram" src="https://leanrada.com/notes/motion-sickness-app/1.png?ref=rss">
<span>The system diagram</span>
<p>When you’re in a moving car, your eyes mostly see the stationary interiors of the car but your inner ears feel the movement. The signal of being stationary and the signal of being in motion does not make <em>sense</em> in the central processing system somewhere in the brain <em>(which decides that the solution to this particular situation is to vomit)</em>.</p>

<img srcset="" sizes="" spec="100% [664) 664" loading="lazy" width="100%" data-placeholder="" caption="There’s a bug in the central processing module that triggers an unexpected response to conflicting signals." src="https://leanrada.com/notes/motion-sickness-app/2.png?ref=rss">
<span>There’s a bug in the central processing module that triggers an unexpected response to conflicting signals.</span>
<p><span>Side note: The inverse happens in virtual reality when you move or rotate your character — your eyes recognise motion but your inner ears (your physical body) feel no motion, causing sickness. As I mentioned, I have really bad motion sickness, and both car movement and VR movement are almost unbearable to me.</span></p>

<p>To reduce motion sickness, we need to match the visual input with the vestibular input. Unfortunately, there’s no hardware that can override the inner ears’ sense of motion just yet. But we can semi-hijack the visual system via age-old hardware called screens.</p>

<p>By displaying movement on-screen that matches the actual movement of the body, motion sickness can be thus reduced!</p>

<img srcset="" sizes="" spec="100% [664) 664" loading="lazy" width="100%" data-placeholder="" caption="The workaround is to hijack one of the sources to produce a ‘correct’ signal. In this case, we add an override to the visual input." src="https://leanrada.com/notes/motion-sickness-app/3.png?ref=rss">
<span>The workaround is to hijack one of the sources to produce a ‘correct’ signal. In this case, we add an override to the visual input.</span>
<h2 id="behind-the-screens">Behind the screens</h2>

<p>Almost every smartphone has an <strong>accelerometer</strong> in them. It’s a hardware module that measures <em>acceleration</em> in real time.</p>

<p>Coincidentally, the inner ears also sense the same particular aspect of motion, <em>acceleration</em>. That’s why it can detect up or down (the planet’s gravity is an ever-present acceleration towards “down”), functioning as a “sense of balance”, and detect relative motion at the same time.</p>

<p>So, smartphones have “inner ear” hardware. By reading off of this sensor, we can generate the correct visuals.</p>

<img srcset="" sizes="" spec="100% [664) 664" loading="lazy" width="100%" data-placeholder="" caption="The visual layer is just an adapter to same acceleration data used by the other source. By converting motion data to visual data, we can be sure that the signals match! This is the final solution." src="https://leanrada.com/notes/motion-sickness-app/4.png?ref=rss">
<span>The visual layer is just an adapter to same acceleration data used by the other source. By converting motion data to visual data, we can be sure that the signals match! This is the final solution.</span><span>
              <p>The other Android app, KineStop, appear to use the phone’s magnetic sensor (compass) in addition to the accelerometer. So, it also knows about your absolute orientation in the world. It’s more effective in turning motions, but not so much for bumpy rides.</p>
              <p>There are definitely multiple ways to solve the problem, but I find that the purely acceleration-based solution is sufficient for me.</p>
            </span>
<h2 id="dead-reckoning">Dead reckoning</h2>

<p>The accelerometer provides acceleration data, but what we actually need to draw dots on the screen is <strong>position</strong>.</p>

<p>Recall in calculus or physics that the integral of acceleration is the <em>velocity</em> and the integral of velocity is <em>position</em>. There are two layers of integration before we can draw dots on the screen.</p>

<p><code>acceleration → velocity → position</code></p>

<p>What the app does is <a target="_blank" href="http://lampx.tugraz.at/~hadley/physikm/apps/a2x.en.php"><strong>numerical integration</strong><span>🡵</span></a>. It keeps track of an estimated velocity and an estimated position in memory. Then, on every tick, it adds the current acceleration vector to the velocity vector, and add the velocity to the position. Note: all vectors here are in 3D. </p>

<p>The calculated position vector provides an estimate of the phone’s current position! Finally, we can draw dots!</p>

<p>To provide the correct sensation of movement, the dots must appear stable relative to the origin, that is, the earth. Negating the calculated position vector achieves this effect.</p>

<pre><code><span>// pseudocode</span>
<span>onEveryFrame</span><span>(</span><span>)</span> <span>{</span>
  velocity <span>+=</span> accelerometer<span>.</span><span>getAcceleration</span><span>(</span><span>)</span>
  position <span>+=</span> velocity
  <span>drawDots</span><span>(</span>offset <span>=</span> <span>-</span>position<span>)</span>
<span>}</span></code></pre>

<h2 id="error-correction">Error correction</h2>

<p>The accelerometer signal is very <strong>noisy</strong>. While that is workable for many applications, when we’re doing position integration the errors really add up, and simple dead reckoning is way off.</p>

<p>Standard signal processing techniques can be applied to deal with noise, like a low-pass filter.</p>

<pre><code><span>// Example: With a low-pass filter</span>
<span>onEveryFrame</span><span>(</span><span>)</span> <span>{</span>
  <span>// low-pass filter</span>
  smoothAcceleration <span>+=</span>
    <span>(</span>accelerometer<span>.</span><span>getAcceleration</span><span>(</span><span>)</span> <span>-</span> smoothAcceleration<span>)</span> <span>*</span> <span>0.60</span>

  <span>// position integration</span>
  velocity <span>+=</span> smoothAcceleration
  position <span>+=</span> velocity

  <span>drawDots</span><span>(</span>offset <span>=</span> <span>-</span>position<span>)</span>
<span>}</span></code></pre>

<p>But a simpler solution like dampening the velocity over time is plenty sufficient.</p>

<pre><code><span>// Example: With velocity dampening</span>
<span>onEveryFrame</span><span>(</span><span>)</span> <span>{</span>
  <span>// position integration</span>
  velocity <span>+=</span> accelerometer<span>.</span><span>getAcceleration</span><span>(</span><span>)</span>
  position <span>+=</span> velocity

  <span>// dampen</span>
  velocity <span>*=</span> <span>0.80</span>

  <span>drawDots</span><span>(</span>offset <span>=</span> <span>-</span>position<span>)</span>
<span>}</span></code></pre>

<p>And that is basically how EasyQueasy works. And presumably iOS does it similarly as well.</p>

<h2 id="easyqueasy-features">EasyQueasy features</h2>

<p>EasyQueasy’s features and advantages over the current iOS solution are:</p>

<ul>
              <li>Configurable speed and other parameters.</li>
              <li>It’s 3D! Because movement in the real-world is three-dimensional!</li>
              <li>Option to activate the overlay from any screen via quick gesture shortcuts.</li>
            </ul>

<h3 id="gallery">Gallery</h3>

<img srcset="" sizes="" spec="100% [664) 664" loading="lazy" width="67.5%" data-placeholder="" alt="Screenshot of EasyQueasy features" src="https://leanrada.com/notes/motion-sickness-app/ss1.png?ref=rss">

<img srcset="" sizes="" spec="100% [664) 664" loading="lazy" width="67.5%" data-placeholder="" alt="Screenshot of EasyQueasy features" src="https://leanrada.com/notes/motion-sickness-app/ss2.png?ref=rss">

<img srcset="" sizes="" spec="100% [664) 664" loading="lazy" width="67.5%" data-placeholder="" alt="Screenshot of EasyQueasy features" src="https://leanrada.com/notes/motion-sickness-app/ss3.png?ref=rss">

<img srcset="" sizes="" spec="100% [664) 664" loading="lazy" width="67.5%" data-placeholder="" alt="Screenshot of EasyQueasy features" src="https://leanrada.com/notes/motion-sickness-app/ss5.png?ref=rss">

<img srcset="" sizes="" spec="100% [664) 664" loading="lazy" width="67.5%" data-placeholder="" alt="Screenshot of EasyQueasy features" src="https://leanrada.com/notes/motion-sickness-app/ss6.png?ref=rss">
]]></description>
            <link>https://leanrada.com/notes/motion-sickness-app?ref=rss</link>
            <guid isPermaLink="true">https://leanrada.com/notes/motion-sickness-app?ref=rss</guid>
            <pubDate>Mon, 02 Sep 2024 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Stop using ease-out in your UIs!]]></title>
            <description><![CDATA[<p><em>For RSS readers: This article contains interactive content available on the <a href="https://leanrada.com/notes/stop-using-ease-out?ref=rss">original post on leanrada.com</a>.</em></p>

<p>Before anything, let me present you with a set of controls with no context.</p>
<table>
              <tbody>
                <tr>
                  <td>
                    <button>Press me</button>
                  </td>
                  <td>
                    <button>Press me</button>
                  </td>
                </tr>
                <tr>
                  <td>
                    <input type="checkbox">
                  </td>
                  <td>
                    <input type="checkbox">
                  </td>
                </tr>
              </tbody>
            </table>
<p><strong>Stop using ease-out, or ease-in-out, or whatever-out, in every UI animation!</strong></p>

<p>There is a lot of propaganda on the internet against ease-in, saying that it's “unnatural”, “unusual”, or that it's “of the devil”. Some say that it's both “sluggish” and “abrupt”. Many pointing to ease-out as the safe, smooth, satisfying messiah of animation (including its safer kin, ease-in-out). There are even published ‘best practices’ which can be summed up to <a target="_blank" href="https://web.dev/articles/the-basics-of-easing">“just use ease-out”<span>🡵</span></a>. This post is here to set things straight — in a nonlinear fashion.</p>

<p>So, why not ease-out? And what to use instead?</p>

<h2 id="reason-1-its-overused">Reason #1. It’s overused</h2>

<p>Let’s get the weakest point out of the way. Ease out is boring because it’s everywhere. Because it’s part of the browser default <code>ease</code> function (which is a combination of a fast ease-in with a slow ease-out). </p>

<p>It’s like how corners are getting rounder and rounder on the web simply because it's easy and built-in.</p>

<img loading="lazy" width="100%" data-placeholder="" src="https://leanrada.com/notes/stop-using-ease-out/figma-ease-out.gif?ref=rss" caption="Source: Figma">
<span>Source: Figma</span>
<p>Is the public missing out on better web animations (and better corners) because of the ubiquity of these practices? Yes.</p>

<h2 id="reason-2-its-unrealistic">Reason #2. It’s unrealistic</h2>

<p>How about a study in skeuomorphism?</p>

<p>Imagine a mechanical toggle switch. Something like the following video:</p>
<iframe width="560" height="315" src="https://www.youtube-nocookie.com/embed/l-G_uejx0Rs?si=g-RJXjgqsY8euukl" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen=""></iframe>
<p>Now here’s an interactive physics simulation of the same spring-based toggle switch:</p>

<pre>Interactive content: <a href="https://leanrada.com/notes/stop-using-ease-out?ref=rss">Visit the website to play with interactive content!</a>
Alternative text: interactive simulation of a mechanical switch</pre>

<p><span><em>Drag your pointer horizontally and vertically across the simulation window to control the appendage that toggles the switch.</em></span></p>

<p>This is a physics-based simulation with simulated forces, torques, and constraints. Let’s slow the simulation down and show some force lines for a better look.</p>

<pre>Interactive content: <a href="https://leanrada.com/notes/stop-using-ease-out?ref=rss">Visit the website to play with interactive content!</a>
Alternative text: interactive simulation of a mechanical switch</pre>

<p>Play around with the simulation!</p>

<p>Here’s what a typical motion looks like:</p>

<img srcset="" sizes="" spec="100% [664) 664" loading="lazy" width="100%" data-placeholder="" src="https://leanrada.com/notes/stop-using-ease-out/typical.png?ref=rss" caption="Typical output graph of the above simulation">
<span>Typical output graph of the above simulation</span>
<p>Notice the <span>position curve (red)</span>. <small>We'll get to the force curve later.</small> Does the position curve look anything familiar? Compare that with some standard easing functions:</p>

<img srcset="" sizes="" spec="100% [664) 664" loading="lazy" width="100%" data-placeholder="" src="https://leanrada.com/notes/stop-using-ease-out/standard-easing.png?ref=rss" caption="Common easing functions. Source: MDN">
<span>Common easing functions. Source: MDN</span>
<p><strong>The toggle switch’s position curve follows the ease-in curve!</strong> A slow start, gradually building up momentum, then finally stopping to a satisfying ‘click’!</p>

<p>Contrary to “best practice”, the natural motion of a toggle switch does not follow an ease-out nor an ease-in-out curve! I’ll go further and say that ease-out is unnatural for any kind of UI control that represents a tactile interaction.</p>

<p>Like buttons. In the real world, buttons (the ones that are nice to press anyway) have some kind of buckling mechanism when pressed. Similar to the toggle switch example above, there’s a buildup, a fall, and a final ‘click’ into place.</p>

<video muted="" autoplay="" loop="" playsinline="" caption="A button. In the real world." data-src="/notes/stop-using-ease-out/button.mp4">
                <source src="https://leanrada.com/notes/stop-using-ease-out/button.mp4?ref=rss">

                Video: | Source: /notes/stop-using-ease-out/button.mp4

              </video>
<span>A button. In the real world.</span>
<p>Best practice says that the sharp stop is unnatural and should be avoided. But that well-defined resolution is part of what makes switches and buttons feel good. Just imagine a button that dampens the motion the more you press it. It’ll feel squishy and mushy. You know what else slows down the further you go? Ease-out!</p>

<p>And yet, thousands of UIs still use ease out for UI controls!</p>

<video muted="" autoplay="" loop="" playsinline="" caption="Ease out everywhere. One of these is a skeuomorphic rocker switch, ironically." data-src="/notes/stop-using-ease-out/examples.mp4">
                <source src="https://leanrada.com/notes/stop-using-ease-out/examples.mp4?ref=rss">

                Video: | Source: /notes/stop-using-ease-out/examples.mp4

              </video>
<span>Ease out everywhere. One of these is a skeuomorphic rocker switch, ironically.</span>
<p>Has abstract UI design gone too far?</p>

<h3 id="counterexamples">Counterexamples</h3>

<p>Of course, not all UI animations need ease in, such as macro interactions, card movement, scrolling, expand/collapse, or any object that ‘animate themselves’ as opposed to raw manipulation.</p>

<video muted="" autoplay="" loop="" playsinline="" caption="Source: Material Design" data-src="/notes/stop-using-ease-out/material-pager.mp4">
                <source src="https://leanrada.com/notes/stop-using-ease-out/material-pager.mp4?ref=rss">

                Video: | Source: /notes/stop-using-ease-out/material-pager.mp4

              </video>
<span>Source: Material Design</span>
<p>Unlike switches and buttons, these things don’t have a frame or housing that can immediately stop them when they ‘bottom out’. So they have to decelerate naturally.</p>

<p>In the end, it depends. But as a general rule? Ease-in for tactile things.</p>

<h2 id="reason-3-ease-in-is-more-satisfying">Reason #3. Ease-in is more satisfying</h2>

<img srcset="" sizes="" spec="100% [664) 664" loading="lazy" width="100%" data-placeholder="" src="https://leanrada.com/notes/stop-using-ease-out/typical.png?ref=rss" caption="The graph again. This time focus on the force curve.">
<span>The graph again. This time focus on the force curve.</span>
<p>If you’re a mechanical keyboard enthusiast, you might’ve recognised the general landmarks in the <span>force curve (blue)</span> above. That ‘tactile bump’ and subsequent drop in force is a big part of what provides the satisfying feedback that mechanical keys are known for (and coincidentally, produces the ease-in motion).</p>

<img srcset="" sizes="" spec="100% [664) 664" loading="lazy" width="100%" data-placeholder="" src="https://leanrada.com/notes/stop-using-ease-out/cherry.png?ref=rss" caption="Force curve of a tactile keyboard switch. Source: deskthority.net">
<span>Force curve of a tactile keyboard switch. Source: deskthority.net</span>
<p>But <em>why</em> is it satisfying?</p>

<p><audio controls="" src="/notes/stop-using-ease-out/vsauce.mp3"></audio></p>

<p>I present my sub-thesis:</p>
<blockquote>
              <p><strong>The sequence of tension and release is intrinsically satisfying.</strong>
                <cite>me</cite>
              </p>
            </blockquote>
<p>I will now present supporting evidence with xkcd-style graphs.</p>

<h3 id="a-popping-bubble-wraps">A. Popping bubble wraps</h3>

<p><span><strong>Disclaimer:</strong> We are getting into subjective and pseudoscience territory.</span></p>

<img srcset="" sizes="" spec="100% [664) 664" loading="lazy" width="100%" data-placeholder="" src="https://leanrada.com/notes/stop-using-ease-out/bubble-wrap.png?ref=rss" caption="Estimated force curve of popping a bubble in a bubble wrap.">
<span>Estimated force curve of popping a bubble in a bubble wrap.</span>
<p>Popping bubble wraps is a satisfying sensation. Popping a bubble in a bubble wrap follows the familiar buildup, release, and resolution pattern that is associated with ease-in.</p>

<p><small><a target="_blank" href="https://xkcd.com/2458/">Relevant xkcd.<span>🡵</span></a></small></p>

<h3 id="b-scratching-an-itch">B. Scratching an itch</h3>

<img srcset="" sizes="" spec="100% [664) 664" loading="lazy" width="100%" data-placeholder="" src="https://leanrada.com/notes/stop-using-ease-out/itch.png?ref=rss" caption="Estimated discomfort experienced during an itch’s lifetime.">
<span>Estimated discomfort experienced during an itch’s lifetime.</span>
<p>While the act of scratching by itself is mildly pleasurable, when paired with an itchy skin, it becomes a satisfying experience.</p>

<h3 id="c-music-theory">C. Music theory</h3>

<p>🚧 This section is WIP, something about dissonance and consonance 🚧</p>

<h3 id="d-arousal-jag-theory">D. Arousal jag theory</h3>
<blockquote>
              <p>The abrupt fall from elevated levels of arousal to a lower, more appropriate level is thought to produce a pleasurable response.
                <cite>APA Dictionary of Psychology, <a target="_blank" href="https://dictionary.apa.org/arousal-jag">‘arousal jag’<span>🡵</span></a></cite>
              </p>
            </blockquote>
<p>This theory was introduced by a psychologist named Daniel E. Berlyne in 1970. The idea is that an increase in tension followed by a sharp decrease produces a satisfying feeling. This framework works well for ease-in’s case in the context of the force curve, or more directly, with ease-in’s initial slow buildup followed by its abrupt resolution.</p>

<p>If you’re looking for the psychology behind microinteractions, well, that’s one of them.</p>

<h3 id="e-the-three-act-structure">E. The Three-Act Structure</h3>

<img srcset="" sizes="" spec="100% [664) 664" loading="lazy" width="100%" data-placeholder="" src="https://leanrada.com/notes/stop-using-ease-out/3act.png?ref=rss" caption="The three-act structure with a tension graph.">
<span>The three-act structure with a tension graph.</span>
<p>In storytelling or filmmaking, the <a target="_blank" href="https://tvtropes.org/pmwiki/pmwiki.php/Main/ThreeActStructure">three-act structure<span>🡵</span></a> is a model for analysing or creating good stories. It mirrors the tension-resolution sequence in a grander scale. And with bigger scope comes the potential for a higher level of satisfaction — <em>catharsis</em>. Great stories that use the three-act structure always leave you in a state of catharsis.</p>

<p>Is it possible to have micro-catharses in UI animations?</p>
<hr>
<p>All of these patterns of satisfaction reflect ease-in’s slow buildup and sudden resolution. While there are other kinds of satisfying phenomenon, like <a target="_blank" href="https://youtu.be/3clqk2U3T9Y">sand slicing<span>🡵</span></a> which has nothing to do with any of this; tension and release is a way to induce the positive effect.</p>

<p>There must be a balance to the proportion of tension and release, else the negative effects of the tension may overcome the positive effects of release, or the tension too light that the release is too shallow. A bubble wrap that is really hard to pop would be quite annoying, and a grand story that ends prematurely would be disappointing. The easing curve must be manually finetuned depending on the purpose. For buttons and toggles, keep it shorter than a bubble wrap pop.</p>

<p><span>🫰 <strong>Snap!</strong> Try snapping your fingers. Did you do it? If so, you just made an ease-in motion. <a target="_blank" href="https://www.youtube.com/watch?v=4DHQ4mKSZXU">Don’t believe me?<span>🡵</span></a> When people say they want <em>snappy</em> animations, what do they really want?</span></p>

<h2 id="tips">Tips</h2>

<ul>
              <li>Use a custom curve appropriate to the size of the element. Don’t use the default ease-in because it’s likely to feel too slow for most use cases. In CSS, there’s <a target="_blank" href="https://cubic-bezier.com/"><code>cubic-bezier()</code><span>🡵</span></a> for example.</li>
              <li>Use a duration appropriate to the curve, the size of the element, and the scale of the movement.</li>
              <li>Partially start the animation on pointer press, not on release.<ul>
                  <li>For mouse users, there’s already an initial ‘actuation force’ required to trigger the mouse button. In these cases, the initial velocity shouldn’t be zero (the easing curve shouldn’t start at a horizontal slope). For touchscreens, there’s no such actuation force.</li>
                </ul>
              </li>
            </ul>

<h2 id="conclusion">Conclusion</h2>

<p>Don’t use ease-out in everything! Try ease-in! Or try a combination of both with varying weights! Just try anything at all. Tweak your curves as often as you tweak your paddings.
            </p>
]]></description>
            <link>https://leanrada.com/notes/stop-using-ease-out?ref=rss</link>
            <guid isPermaLink="true">https://leanrada.com/notes/stop-using-ease-out?ref=rss</guid>
            <pubDate>Mon, 15 Jul 2024 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Creating a halftone effect with CSS]]></title>
            <description><![CDATA[<p><em>For RSS readers: This article contains interactive content available on the <a href="https://leanrada.com/notes/pure-css-halftone?ref=rss">original post on leanrada.com</a>.</em></p>

<p>Here’s a quick halftone effect (i.e. a retro printed look) using CSS with only one div at the minimum.</p>

<p>First of all, here’s a live demo:</p>

<pre>Interactive content: <a href="https://leanrada.com/notes/pure-css-halftone?ref=rss">Visit the website to play with interactive content!</a>
Alternative text: CSS halftone demo</pre>
<label>
              Toggle effect
              <input type="checkbox" checked="" onchange="onChangeHalftoneDemoEnabled(event)">
            </label>
<p>Toggle the filter class using the checkbox above.</p>

<p>To further illustrate the halftone effect, the following demo can vary the <strong>size</strong> of the dots and the degree to which they <strong>‘bleed’</strong>:</p>

<pre>Interactive content: <a href="https://leanrada.com/notes/pure-css-halftone?ref=rss">Visit the website to play with interactive content!</a>
Alternative text: CSS halftone demo</pre>
<label>
              Size
              <input type="range" min="4" max="20" value="12" step="1" oninput="onInputHalftoneDemoSize(event)">
            </label><label>
              Bleed
              <input type="range" min="0.1" max="0.45" value="0.2" step="0.01" oninput="onInputHalftoneDemoBleed(event)">
            </label>
<p>There are several ways to do this in CSS. The above is a bit more advanced with 2-3 extra divs. I’ll try to show a simple method, first.</p>

<h2 id="halftone-basics">Halftone basics</h2>

<p>To keep it simple, let’s start with a black-and-white image. It should be easy to layer in additional colors with the same principle.</p>

<pre>Interactive content: <a href="https://leanrada.com/notes/pure-css-halftone?ref=rss">Visit the website to play with interactive content!</a>
Alternative text: CSS halftone demo</pre>

<p>Actually, let’s start with a simpler image. A gradient, to illustrate how halftone works in the first place.</p>

<pre>Interactive content: <a href="https://leanrada.com/notes/pure-css-halftone?ref=rss">Visit the website to play with interactive content!</a>
Alternative text: CSS halftone demo</pre>
<label>
              Size
              <input type="range" min="4" max="20" value="5" step="1" oninput="onInputHalftoneDemoSize(event)">
            </label><label>
              Bleed
              <input type="range" min="0.1" max="2" value="1.5" step="0.01" oninput="onInputHalftoneDemoBleed(event)">
            </label>
<p>A <a target="_blank" href="https://en.wikipedia.org/wiki/Halftone">halftone<span>🡵</span></a> pattern is an array of ink dots simulating the appearance of smooth gradiation of tones using just two pure tones (pure black ‘ink’ and pure white background in this case). By varying the size of the dots, the average ink coverage in a given area determines how light or dark the tone is in that area.</p>

<p>Dots large enough would bleed into each other, creating the effect of negative dots.</p>

<h2 id="screen-and-threshold">Screen and threshold</h2>

<p>Dot size and bleed can be emulated in one go using two simple image processing operations, <strong>screen</strong> and <strong>threshold</strong>.</p>

<p>The first step is to <em>screen</em> the source image (in this case, the gradient) with a <em>blurry dot matrix pattern</em>.</p>

<p><a target="_blank" href="https://en.wikipedia.org/wiki/Blend_modes#Screen"><strong>Screen</strong><span>🡵</span></a> is an operation that mixes the pixels of the source image and the overlay image using some kind of an inverted multiplication formula. Essentially, it <em>lightens lighter areas multiplicatively</em>.</p>

<p>Because the dots are blurry (i.e. having feathered edges), the screen operation gives us smaller-looking dots in lighter areas on the original image and denser dots in darker areas — exactly what we want in halftone.</p>

<p>This operation is done via CSS <code>mix-blend-mode: screen</code>.</p>

<p>The blurry dot pattern is generated using a <code>radial-gradient</code> as a repeated <code>background-image</code>, like this:</p>

<pre><code><span>background-image</span><span>:</span> <span>radial-gradient</span><span>(</span>14px at 50% 50%<span>,</span> black<span>,</span> white<span>)</span><span>;</span>
<span>background-size</span><span>:</span> 20px 20px<span>;</span></code></pre>

<p>The next step is to <a target="_blank" href="https://en.wikipedia.org/wiki/Thresholding_(image_processing)"><strong>threshold</strong><span>🡵</span></a> the resulting image. That is, convert the image into pure black &amp; pure white pixels. Dark pixels become fully black, and light pixels become white — according to some defined <em>threshold</em> between light vs dark.</p>

<p>This creates the signature black-ink-matrix-on-white-paper look.</p>

<p>In CSS, there is no threshold filter, but it can be simulated by applying an extremely high <strong>contrast</strong> filter, pushing pixel values to the extremes of pure white and pure black. Effectively the same result as thresholding. In code, that’s simply a <code>filter: contrast(999)</code>.</p>

<p>Another thing we can add is a <strong>blur</strong> filter, <em>just before</em> the thresholding operation. This emulates surface tension of the ink, or something.</p>

<p>Let’s take a moment to look at the basic black-and-white solution so far:</p>

<pre><code><span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>"</span>halftone<span>"</span></span><span>&gt;</span></span>
  <span><span><span>&lt;</span>img</span> <span>src</span><span><span>=</span>...</span><span>&gt;</span></span>
<span><span><span>&lt;/</span>div</span><span>&gt;</span></span>

<span><span><span>&lt;</span>style</span><span>&gt;</span></span><span><span>
  <span>.halftone</span> <span>{</span>
    <span>position</span><span>:</span> relative<span>;</span>
    <span>/* brightness controls the threshold point */</span>
    <span>filter</span><span>:</span> <span>brightness</span><span>(</span>0.8<span>)</span> <span>blur</span><span>(</span>3px<span>)</span> <span>contrast</span><span>(</span>999<span>)</span><span>;</span>
  <span>}</span>
  <span>.halftone::after</span> <span>{</span>
    <span>position</span><span>:</span> absolute<span>;</span>
    <span>inset</span><span>:</span> 0<span>;</span>
    <span>background</span><span>:</span> <span>radial-gradient</span><span>(</span>10px at center<span>,</span> black<span>,</span> white<span>)</span><span>;</span>
    <span>background-size</span><span>:</span> 20px 20px<span>;</span>
    <span>mix-blend-mode</span><span>:</span> screen<span>;</span>
  <span>}</span>
</span></span><span><span><span>&lt;/</span>style</span><span>&gt;</span></span></code></pre>

<h2 id="colours-may-yeet-knowingly">Colours may yeet knowingly</h2>

<p>When you get the black ink dots going, adding the rest of the colours is easy. Just add a set of dots for each of CMY — cyan, magenta, and yellow, the “primary colours” of ink — to complete the <a target="_blank" href="https://en.wikipedia.org/wiki/CMYK_color_model">CMYK<span>🡵</span></a>! Make sure to stagger the dots so they are distributed evenly. How to stagger them well is left as an exercise to the dear reader, you (see <a target="_blank" href="https://the-print-guide.blogspot.com/2009/05/halftone-screen-angles.html">halftone angles<span>🡵</span></a>, <a target="_blank" href="https://proofing.de/whats-moire-and-can-i-see-moire-in-a-proof/">moiré patterns<span>🡵</span></a>, etc).</p>

<pre><code><span>background</span><span>:</span>
  <span>radial-gradient</span><span>(</span>10px at center<span>,</span> #000<span>,</span> white<span>)</span><span>,</span>
  <span>radial-gradient</span><span>(</span>10px at ...<span>,</span> #0ff<span>,</span> white<span>)</span><span>,</span>
  <span>radial-gradient</span><span>(</span>10px at ...<span>,</span> #f0f<span>,</span> white<span>)</span><span>,</span>
  <span>radial-gradient</span><span>(</span>10px at ...<span>,</span> #ff0<span>,</span> white<span>)</span><span>;</span></code></pre>

<p>These additional layers will work just as well as black because the <code>contrast</code> filter operates on each RGB channel independently. The colours of cyan <span>(#0ff)</span>, magenta <span>(#f0f)</span>, and yellow <span>(#ff0)</span> are at their own extremes in each RGB channel, just like black (#000) and white (#fff). Thus, the <code>contrast</code> filter produces a similar thresholding effect on each colour in CMYK independently and simultaneously!</p>

<p><span>Note: This is not a very accurate representation of halftone, mainly due to the operations being in RGB, not CMY. An accurate simulation would be to apply thresholding to each channel in some CMY space via JS or maybe WebGL. But this shallow emulation may look good enough in many cases.</span></p>

<p>Here’s the result…?</p>

<img srcset="" sizes="" spec="100% [664) 664" loading="lazy" width="100%" data-placeholder="" src="https://leanrada.com/notes/pure-css-halftone/no-ink-mixing.png?ref=rss" alt="halftone effect with only magenta dots visible">

<p>Only magenta is showing, because the magenta layer is the top layer in that <code>background-image</code> list! The other layers are hidden beneath the magenta layer. We need to combine these layers to see all the colours.</p>

<p>In order to mix the four layers of ‘ink’ correctly, you must use the <strong>multipy</strong> blend mode to simulate how inks mix together (i.e. <a target="_blank" href="https://en.wikipedia.org/wiki/Subtractive_color">subtractive colour mixing<span>🡵</span></a>).</p>

<p>Since we’re mixing <code>background-image</code>s together, we use this property: <code>background-blend-mode: multiply</code>.</p>

<pre>Interactive content: <a href="https://leanrada.com/notes/pure-css-halftone?ref=rss">Visit the website to play with interactive content!</a>
Alternative text: CSS halftone demo</pre>
<label>
              Size
              <input type="range" min="4" max="20" value="5" step="1" oninput="onInputHalftoneDemoSize(event)">
            </label>
<p>Aaand that’s it! A simple Halftone effect with a single div wrapper!</p>

<p>This simple filter is not very robust, so you may want to tailor the brightness and saturation levels of the particular source image.</p>

<pre><code><span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>"</span>halftone<span>"</span></span><span>&gt;</span></span>
  <span><span><span>&lt;</span>img</span> <span>src</span><span><span>=</span>...</span><span>&gt;</span></span>
<span><span><span>&lt;/</span>div</span><span>&gt;</span></span>

<span><span><span>&lt;</span>style</span><span>&gt;</span></span><span><span>
  <span>.halftone</span> <span>{</span>
    <span>position</span><span>:</span> relative<span>;</span>
    <span>filter</span><span>:</span> <span>brightness</span><span>(</span>0.8<span>)</span> <span>blur</span><span>(</span>3px<span>)</span> <span>contrast</span><span>(</span>999<span>)</span><span>;</span>
  <span>}</span>
  <span>.halftone::after</span> <span>{</span>
    <span>position</span><span>:</span> absolute<span>;</span>
    <span>inset</span><span>:</span> 0<span>;</span>
    <span>background</span><span>:</span>
      <span>radial-gradient</span><span>(</span>10px at center<span>,</span> black<span>,</span> white<span>)</span><span>,</span>
      <span>radial-gradient</span><span>(</span>10px at 5px 5px<span>,</span> cyan<span>,</span> white<span>)</span><span>,</span>
      <span>radial-gradient</span><span>(</span>10px at 15px 5px<span>,</span> magenta<span>,</span> white<span>)</span><span>,</span>
      <span>radial-gradient</span><span>(</span>10px at 10px 15px<span>,</span> yellow<span>,</span> white<span>)</span><span>;</span>
    <span>background-size</span><span>:</span> 20px 20px<span>;</span>
    <span>background-blend-mode</span><span>:</span> multiply<span>;</span>
    <span>mix-blend-mode</span><span>:</span> screen<span>;</span>
  <span>}</span>
</span></span><span><span><span>&lt;/</span>style</span><span>&gt;</span></span></code></pre>

<p><span>A minor point, but the demo above actually uses two separate overlay divs instead of a single div. This is to achieve better dot staggering.</span></p>

<h2 id="variations">Variations</h2>

<p>Notice anything wrong with the last image above? There’s an unexpected pattern on the magenta in that flower petal. It should be a neat grid matrix, not this weird smiley face pattern or whatever it is. Even worse, the amount of ink is not correctly in proportion to the original image’s colour — There are more magenta dots than expected!</p>

<img srcset="" sizes="" spec="100% [664) 664" loading="lazy" width="100%" data-placeholder="" src="https://leanrada.com/notes/pure-css-halftone/too-many-magenta.png?ref=rss" alt="too many magenta dots (zoomed-in)">

<p>Apparently, the black dots were turning into the coloured ones. I think the problem was that: <strong><span>coloured source image</span> ⊕ black dot pattern = <span>coloured dots</span></strong>, <em>where the symbol ⊕ represents the screen-threshold operation.</em> In other words, colour is contagious!</p>

<p>What I did to fix this was separate the K layer (black) from CMY, and have it use its own greyscale copy of the source image. <strong>greyscale source image ⊕ black dot pattern = black dots</strong>.</p>

<p>Here’s a vivid example where you can toggle the ‘separate-K’ version for comparison purposes:</p>

<pre>Interactive content: <a href="https://leanrada.com/notes/pure-css-halftone?ref=rss">Visit the website to play with interactive content!</a>
Alternative text: CSS halftone demo</pre>
<label>
              Toggle effect
              <input type="checkbox" checked="" onchange="onChangeHalftoneDemoEnabled(event)">
            </label><label>
              Separate K layer
              <input type="checkbox" onchange="onChangeHalftoneDemoSeparateK(event)">
            </label><label>
              Size
              <input type="range" min="4" max="20" value="7" step="1" oninput="onInputHalftoneDemoSize(event)">
            </label><label>
              Bleed
              <input type="range" min="0.1" max="0.45" value="0.35" step="0.01" oninput="onInputHalftoneDemoBleed(event)">
            </label><label>
              Rotation
              <input type="range" min="0" max="360" value="0" step="0.1" oninput="onInputHalftoneDemoRotation(event)">
            </label>
<p>There are more ways to go about this with different qualities and levels of realism and complexity. Like dithering.</p>

<p>I think the initial single-div solution is actually fine as long as you tweak the source image to be more readable under the filter.</p>

<h2 id="gallery">Gallery</h2>

<p>To finish with, here are a more demos!</p>

<pre>Interactive content: <a href="https://leanrada.com/notes/pure-css-halftone?ref=rss">Visit the website to play with interactive content!</a>
Alternative text: CSS halftone demo</pre>
<label>
              Toggle effect
              <input type="checkbox" checked="" onchange="onChangeHalftoneDemoEnabled(event)">
            </label><label>
              Separate K layer
              <input type="checkbox" checked="" onchange="onChangeHalftoneDemoSeparateK(event)">
            </label><label>
              Size
              <input type="range" min="4" max="20" value="5" step="1" oninput="onInputHalftoneDemoSize(event)">
            </label><label>
              Bleed
              <input type="range" min="0.1" max="0.45" value="0.4" step="0.01" oninput="onInputHalftoneDemoBleed(event)">
            </label><label>
              Rotation
              <input type="range" min="0" max="360" value="0" step="0.1" oninput="onInputHalftoneDemoRotation(event)">
            </label>
<pre>Interactive content: <a href="https://leanrada.com/notes/pure-css-halftone?ref=rss">Visit the website to play with interactive content!</a>
Alternative text: CSS halftone demo</pre>
<label>
              Toggle effect
              <input type="checkbox" checked="" onchange="onChangeHalftoneDemoEnabled(event)">
            </label><label>
              Separate K layer
              <input type="checkbox" checked="" onchange="onChangeHalftoneDemoSeparateK(event)">
            </label><label>
              Size
              <input type="range" min="4" max="20" value="5" step="1" oninput="onInputHalftoneDemoSize(event)">
            </label><label>
              Bleed
              <input type="range" min="0.1" max="0.45" value="0.4" step="0.01" oninput="onInputHalftoneDemoBleed(event)">
            </label><label>
              Rotation
              <input type="range" min="0" max="360" value="0" step="0.1" oninput="onInputHalftoneDemoRotation(event)">
            </label>
<pre>Interactive content: <a href="https://leanrada.com/notes/pure-css-halftone?ref=rss">Visit the website to play with interactive content!</a>
Alternative text: CSS halftone demo</pre>
<label>
              Toggle effect
              <input type="checkbox" checked="" onchange="onChangeHalftoneDemoEnabled(event)">
            </label><label>
              Separate K layer
              <input type="checkbox" checked="" onchange="onChangeHalftoneDemoSeparateK(event)">
            </label><label>
              Size
              <input type="range" min="4" max="20" value="5" step="1" oninput="onInputHalftoneDemoSize(event)">
            </label><label>
              Bleed
              <input type="range" min="0.1" max="0.45" value="0.4" step="0.01" oninput="onInputHalftoneDemoBleed(event)">
            </label><label>
              Rotation
              <input type="range" min="0" max="360" value="0" step="0.1" oninput="onInputHalftoneDemoRotation(event)">
            </label>
<pre>Interactive content: <a href="https://leanrada.com/notes/pure-css-halftone?ref=rss">Visit the website to play with interactive content!</a>
Alternative text: CSS halftone demo</pre>
<label>
              Toggle effect
              <input type="checkbox" checked="" onchange="onChangeHalftoneDemoEnabled(event)">
            </label><label>
              Separate K layer
              <input type="checkbox" checked="" onchange="onChangeHalftoneDemoSeparateK(event)">
            </label><label>
              Size
              <input type="range" min="4" max="20" value="5" step="1" oninput="onInputHalftoneDemoSize(event)">
            </label><label>
              Bleed
              <input type="range" min="0.1" max="0.45" value="0.4" step="0.01" oninput="onInputHalftoneDemoBleed(event)">
            </label><label>
              Rotation
              <input type="range" min="0" max="360" value="0" step="0.1" oninput="onInputHalftoneDemoRotation(event)">
            </label>
<p>P.S. Please don’t look at the demos’ source code. It’s terrible.
            </p>
]]></description>
            <link>https://leanrada.com/notes/pure-css-halftone?ref=rss</link>
            <guid isPermaLink="true">https://leanrada.com/notes/pure-css-halftone?ref=rss</guid>
            <pubDate>Sun, 05 May 2024 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[AI art is not generative art]]></title>
            <description><![CDATA[
<p><strong>AI art is not <em>generative art</em></strong> (clickbait title). While the technical definition says that one is a subset of the other, I think it’s useful to distinguish between these two categories.</p>

<p><strong>Why I’m writing this in the first place —</strong> Starting 2022, the term “generative art” had been progressively becoming synonymous with art produced by AI text-to-image systems. As a consumer and producer of (traditional) generative art, it was becoming a bit annoying to browse generative art content on the internet. Whether through tags like <code>#generativeart</code> or communities like <code>r/generative</code>, spaces are being flooded with AI-generated images which I and many others are not interested in. End rant.</p>

<p><span>In 2024, things are a bit different. AI art is now commonly referred to as ‘AI art’. I shouldn’t have procrastinated writing this post for so long.</span></p>

<p>There are also cases where generative artists are pressured to relabel their art, so as to not be mistaken for being AI (and avoid things associated with it). It’s an unfortunate niche pressured to be nichey-er.</p>

<p>It’s kinda like animals vs humans. While technically &amp; scientifically, humans are (a subset of) animals; in daily life “animals” usually mean non-human animals, as in “animal lover” and “animal rights”. I digress.</p>

<h2 id="section-overview">Section overview</h2>

<p>This article looks at the similarities and differences between (traditional) generative art and text-to-image AI art in <span>different</span> <span>angles</span>. Skip to different sections if you want.</p>

<ol>
              <li><a target="_self" href="https://leanrada.com/notes/ai-art-not-generative-art/#history?ref=rss">History<span></span></a></li>
              <li><a target="_self" href="https://leanrada.com/notes/ai-art-not-generative-art/#the-craft?ref=rss">Craft<span></span></a></li>
              <li><a target="_self" href="https://leanrada.com/notes/ai-art-not-generative-art/#the-process?ref=rss">Process<span></span></a></li>
            </ol>

<h2 id="history">History</h2>

<p>Tracing the history of each practice may offer insights and nuance. Don’t worry, there are pictures! <del>And interactive things!</del> <small>(too lazy to implement interactive things for now)</small></p>

<p><span>This is not a comprehensive history of either field. Btw, this timeline layout is better viewed on a large screen.</span></p>
1940s

                  The first <strong>artificial neural networks</strong> were proposed; abstract machines modeled after biological neurons (brain cells).

                
<img srcset="" sizes="" spec="100% [664) 664" loading="lazy" width="100%" data-placeholder="" src="https://leanrada.com/notes/ai-art-not-generative-art/neurons.png?ref=rss" alt="Diagrams of a human neuron and an artificial neuron">
1950s
<h3>The Perceptron</h3>

<p><a target="_blank" href="https://en.wikipedia.org/wiki/Frank_Rosenblatt">Frank Rosenblatt</a> built a relatively simple neural network that can be trained, called the <em>perceptron</em>.</p>

<p>The perceptron was designed for image recognition. The perceptron looks at some input (an image) and decides from a set of pre-learned classes of images, which kind of image it is.</p>
1960s
<h3>Conceptual art</h3>

<p>Artist <a target="_blank" href="https://en.wikipedia.org/wiki/Sol_LeWitt#Wall_drawings">Sol LeWitt</a> started doing something called wall drawings, which are sets of instructions that produce abstract drawings. These can be thought of as precursors to generative art.</p>

<p>Example Wall Drawing:</p>
<blockquote>“<strong>Wall Drawing #797.</strong> <i>The first drafter has a black marker and makes an irregular horizontal line near the top of the wall. Then the second drafter tries to copy it (without touching it) using a red marker. The third drafter does the same, using a yellow marker. The fourth drafter does the same using a blue marker. Then the second drafter followed by the third and fourth copies the last line drawn until the bottom of the wall is reached.</i>”</blockquote>
<img srcset="" sizes="" spec="100% [664) 664" loading="lazy" width="100%" data-placeholder="" src="https://leanrada.com/notes/ai-art-not-generative-art/lewitt.jpg?ref=rss" alt="Picture of Wall Drawing #797" caption="Product of Wall Drawing #797, executed from instructions written by LeWitt.">
<span>Product of Wall Drawing #797, executed from instructions written by LeWitt.</span>
<p><i>"The idea becomes a machine that makes the art."</i> (Paragraphs on Conceptual Art, 1967) It’s not quite ‘generative art’ but it’s close. Besides, LeWitt called it something else: <strong>‘conceptual art’</strong>.</p>
1960s
<h3>Code art</h3>

<p><a target="_blank" href="https://en.wikipedia.org/wiki/Vera_Moln%C3%A1r">Vera Molnár</a> brought us closer to modern generative art by actually using computers and writing code to generate artworks.</p>

<img srcset="" sizes="" spec="100% [664) 664" loading="lazy" width="100%" data-placeholder="" src="https://leanrada.com/notes/ai-art-not-generative-art/molnar.jpg?ref=rss" alt="Picture of art of Vera Molnár" caption="Vera Molnár">
<span>Vera Molnár</span>1970s
<h3>AI winter ⛄</h3>

<p>The limitations of relatively primitive AI and weak computing power back then resulted in massive disappointment about AI. Budgets were cut. R&amp;D slowed down. Hype was lost.</p>

<p>The Perceptron did not achieve self-awareness as promised.</p>
1990s
<p>Artists began meeting in generative art conferences and the artistic community started converging on a shared definition of generative art.</p>
<blockquote><strong>Generative art —</strong> work that has been produced by the execution, usually by a computer system, of a set of rules or procedures determined by the artist.</blockquote>2010s
<h3>Deep learning</h3>

<p>The intersection of advancements in computing power, improved machine learning algorithms, and huge ever-growing datasets of digital things resulted in bigger and better neural networks. The great potential of AI was reignited. It’s the start of the <strong>deep learning revolution</strong>.</p>

<p>Image recognition, picture captioning, automated language translation, text-to-speech, speech-to-text, etc. got seriously buffed.</p>

<img srcset="" sizes="" spec="100% [664) 664" loading="lazy" width="100%" data-placeholder="" src="https://leanrada.com/notes/ai-art-not-generative-art/deepdream.jpg?ref=rss" alt="Picture of DeepDream output" caption="Google’s DeepDream exploits image recognition feeding into digital pareidolia. It can be considered early AI art, but it’s quite different from modern AI art.">
<span>Google’s DeepDream exploits image recognition feeding into digital pareidolia. It can be considered early AI art, but it’s quite different from modern AI art.</span>
<h3>Generative networks</h3>

<p>Due to deep learning, we had advancements in generative networks, which are networks that can generate new data on their own instead of simply being a complex input-output mapping.</p>

<p>This appears to be the start of the <strong>image synthesis</strong> wave.</p>

<p>
                    <img srcset="" sizes="" spec="100" loading="lazy" width="100%" data-placeholder="" alt="Portrait of a person" src="https://leanrada.com/notes/ai-art-not-generative-art/thisperson.jpg?ref=rss"> Here is a fake person generated by a generative adversarial network (GAN) trained specifically on portraits. Tap to regenerate a new one from <a target="_blank" href="https://www.thispersondoesnotexist.com/">thispersondoesnotexist.com</a>.
                  </p>
2015
<h3>Text to image</h3>

<p>The first modern text-to-image model was introduced.</p>

<p>It was called <strong>alignDRAW</strong>.</p>

<p>It can generate images from <em>natural language descriptions</em>, making these machines massively accessible to the general public. Anyone could potentially create any image!</p>

<img srcset="" sizes="" spec="100% [664) 664" loading="lazy" width="100%" data-placeholder="" src="https://leanrada.com/notes/ai-art-not-generative-art/aligndraw.jpg?ref=rss" alt="8 blurry images of a white blob on a green background" caption="alignDRAW’s output for “A toilet seat sits open in
            the grass field.”">
<span>alignDRAW’s output for “A toilet seat sits open in
                      the grass field.”</span>2021
<p><strong><a target="_blank" href="https://en.wikipedia.org/wiki/DALL-E">DALL·E</a></strong> was revealed by OpenAI. Another text-to-image model, and it became famous. (Or, rather it was made famous by “DALL-E mini” which was <em>viral</em>.)</p>

<img srcset="" sizes="" spec="100% [664) 664" loading="lazy" width="100%" data-placeholder="" src="https://leanrada.com/notes/ai-art-not-generative-art/dalle.png?ref=rss" alt="Image of a toilet seat in a field" caption="DALL·E’s output for “A toilet seat sits open in the grass field.”">
<span>DALL·E’s output for “A toilet seat sits open in the grass field.”</span>2022
<p>Meanwhile, 2022 saw a burst of NFTs, most of which have been associated with generative art.</p>

<p>Honestly, some of them are on the borderline shallow end of generative art, Mad Libs-style images generated from shufflings of pre-drawn hairstyles, sunglasses, and clothes. Automated dress-up. They are more akin to the <a target="_blank" href="https://en.wikipedia.org/wiki/Musikalisches_W%C3%BCrfelspiel">musical dice game</a>.</p>

<img srcset="" sizes="" spec="100% [664) 664" loading="lazy" width="100%" data-placeholder="" src="https://leanrada.com/notes/ai-art-not-generative-art/apes.png?ref=rss" alt="Images resembling the Bored Apes collection of images" caption="Typical images associated with NFTs">
<span>Typical images associated with NFTs</span>2022
<p>Text-to-image models were approaching the quality of real images. Generated artworks were approaching the quality of human art.</p>

<img srcset="" sizes="" spec="100% [664) 664" loading="lazy" width="100%" data-placeholder="" src="https://leanrada.com/notes/ai-art-not-generative-art/house.png?ref=rss" alt="Image of a painting of a house" caption="AI-generated painting">
<span>AI-generated painting</span>2020s
<p>Today, we see different techniques and tools to make generative art, from straight up canvas coding, to frameworks like <a target="_blank" href="https://p5js.org/">p5.js</a>, to full-blown authoring software like <a target="_blank" href="https://derivative.ca/">TouchDesigner</a> and <a target="_blank" href="https://www.sidefx.com/">Houdini</a>.</p>

<img srcset="" sizes="" spec="100% [664) 664" loading="lazy" width="100%" data-placeholder="" src="https://leanrada.com/notes/ai-art-not-generative-art/qql.jpg?ref=rss" alt="Abstract art composed of many non-overlapping small circles" caption="An output of the QQL algorithm which uses the p5.js library">
<span>An output of the QQL algorithm which uses the p5.js library</span>2020s
<p>Tools to make AI art and images have been heavily commercialised, with online image generation services provided by OpenAI/Microsoft, Google, and Midjourney. There are also local models for advanced users and tinkerers.</p>

<img srcset="" sizes="" spec="100% [664) 664" loading="lazy" width="100%" data-placeholder="" src="https://leanrada.com/notes/ai-art-not-generative-art/midjournee.png?ref=rss" alt="Screenshot of an online image generator" caption="Microsoft’s image creator which at the time used the DALL·E 3 model">
<span>Microsoft’s image creator which at the time used the DALL·E 3 model</span>
<p>So. AI art is a relatively new movement borne out of general image synthesizers. This was made possible since visual artworks are images too. Meanwhile, there have been decades of development and refinement in (traditional) generative art, techniques, and algorithms.</p>

<p>The terminology may overlap (generative networks ~ generative art), but these are just labels. You may call them whatever you want, but they’re still <strong>separate art movements that cannot be historically reconciled</strong>.</p>

<p><span>By the way, I don’t care if you want to call them ‘art’ or not. That’s not the point of this post. If it bothers you, please imagine that all instances of the word ‘art’ were replaced with ‘image’. Same for the word ‘artist’.</span></p>

<h2 id="the-craft">The craft</h2>

<p>OK so, whatever sure, history is in the past. Why don’t we look at it in terms of what artists are doing today. What do they do? What do they practise to improve?</p>

<h3 id="unique-skills">Unique skills</h3>

<p>Both practices involve some skills that are not in common with the other. They each have their own defining skills.</p>
<table>
                <tbody>
                  <tr>
                    <th>Generative artists</th>
                    <th>AI artists</th>
                  </tr>
                  <tr>
                    <td>
                      programming<br>
                      math / geometry / trigonometry<br>
                    </td>
                    <td>
                      prompting<br>
                      curation / training<br>
                      data science<br>
                    </td>
                  </tr>
                </tbody>
              </table>
<p><strong>Generative art</strong> involves programming and uses math (usually geometry or trigonometry) to create graphics. A good undertanding of functions and their domains and ranges and how they compose together is essential, especially when utilising random number generators.</p>

<img srcset="" sizes="" spec="100% [664) 664" loading="lazy" width="100%" data-placeholder="" src="https://leanrada.com/notes/ai-art-not-generative-art/math.png?ref=rss" caption="Typical generative art math">
<span>Typical generative art math</span>
<p>Beyond these core skills, there are a lot of areas generative artists could expand into, like graph theory, simulations, fractals, image processing, and other algorithms.</p>

<img srcset="" sizes="" spec="100% [664) 664" loading="lazy" width="100%" data-placeholder="" src="https://leanrada.com/notes/ai-art-not-generative-art/pathways.png?ref=rss">
<span><span slot="caption">
                  <a target="_blank" href="https://www.fxhash.xyz/generative/slug/scattered-pathways">Scattered Pathways</a> by Nate Nolting.<br>Generative art using a graph pathfinding algorithm
                </span></span>
<p><strong>AI art</strong>, on the other hand, is heavy on prompt engineering. It could be as simple as writing English descriptions, or as precise as inputting parameterised labels if the tool allows for it.</p>
<b><u>Prompt:</u></b> Dog, (Artist Name, Artist Name), Masterpiece, Studio Quality, 6k, glowing, axe, mecha, science_fiction, solo, weapon, jungle, green_background, nature, outdoors, solo, tree, weapon, mask, dynamic lighting, detailed shading, digital texture painting
              <br><b><u>Negative prompt:</u></b> un-detailed skin, semi-realistic, cgi, 3d, render, sketch, cartoon, drawing, ugly eyes, (out of frame:1.3), worst quality, low quality, jpeg artifacts, cgi, sketch, cartoon, drawing, (out of frame:1.1)
              <br><b><u>Parameters:</u></b> Steps: 50, Sampler: Euler a, CFG scale: 7.0, Seed: 1579799523, Face restoration, Size: 512x512

            <span>Example prompt with advanced parameters (e.g. for StableDiffusion)</span>
<p>Beyond writing prompts, there are several tools that allow more control like influencing certain compositional elements. AI artists could also train or fine-tune models by curating image-label datasets as extra training data.</p>

<img srcset="" sizes="" spec="100% [664) 664" loading="lazy" width="100%" data-placeholder="" src="https://leanrada.com/notes/ai-art-not-generative-art/control.png?ref=rss">
<span><span slot="caption">
                  Images generated with <a target="_blank" href="https://github.com/lllyasviel/ControlNet">ControlNet</a>, controlling the general shape of the subject.
                </span></span>
<p>There seems to be little to no transferable skills between these practices. Sure, you can program some scripts to automate parts of an AI art workflow, or add an AI filter step to an otherwise procedurally-generated image. But there is no inherent overlap.</p>

<p><strong>At the highest level, it is the difference between computer science vs data science. At the lowest, it is the difference between coding and writing English.</strong></p>

<p>That’s why you can’t just ask an AI artist to please create an interactive audio-reactive visualisation for your music video, or <a target="_blank" href="https://www.cityartsydney.com.au/artwork/high-water/">a public art installation that reacts to the weather</a>. Likewise, you can’t expect a generative artist to easily generate photorealistic art in seconds.</p>

<h3 id="skills-in-common">Skills in common</h3>

<p>One big thing that’s common between these practices is the need to curate. Since there is an element of chaos and randomness in both processes, a curation step is almost always required before finishing a work. Curation requires artistic vision, which could be considered a skill in itself.</p>
<table aria-label="Venn-diagram showing curation &amp; artistic vision in the intersection between Generative artists and AI artists">
                <tbody>
                  <tr>
                    <td>
                      <b>Generative<br>artists</b>
                    </td>
                    <td>
                      <div>
                        curation<br>
                        artistic vision
                      </div>
                    </td>
                    <td>
                      <b>AI<br>artists</b>
                    </td>
                  </tr>
                </tbody>
              </table>
<p><strong>What’s curation?</strong> As one finishes a piece, they usually generate multiple outputs by running the process with different seeds or starting parameters. These produce different variations, from which the best one(s) are selected for publishing, discarding the rest. That’s curation.</p>

<p>Alternatively, one might refine and iterate their prompt or program until the outputs satisfy a certain artistic vision.</p>

<img srcset="" sizes="" spec="100% [664) 664" loading="lazy" width="100%" data-placeholder="" src="https://leanrada.com/notes/ai-art-not-generative-art/uncurated.png?ref=rss" caption="Uncurated set of outputs from a generative art algorithm">
<span>Uncurated set of outputs from a generative art algorithm</span>
<img srcset="" sizes="" spec="100% [664) 664" loading="lazy" width="100%" data-placeholder="" src="https://leanrada.com/notes/ai-art-not-generative-art/ai-outputs.png?ref=rss" caption="AI image generators usually generate multiple outputs at a time for you to curate.">
<span>AI image generators usually generate multiple outputs at a time for you to curate.</span>
<p>It could be argued that having artistic vision and doing iterations are pretty common to all arts, and so those alone don’t make generative art and AI art any more similar to each other than any other art.</p>

<p>Overall, the significant differences in skillsets mean that <strong>generative artists and AI artists are not interchangeable</strong>, and the same should go for their respective arts.</p>

<h2 id="the-process">The process</h2>

<p>Finally, let’s attack the subject from the POV of processes and systems.</p>

<p>Setting aside the question of whether Art is Product or Process, let us indulge in these animations of art in the process of being products.</p>

<video muted="" autoplay="" loop="" playsinline="" caption="AI art being formed via denoising" data-src="/notes/ai-art-not-generative-art/diffusion.mp4">
                  <source src="https://leanrada.com/notes/ai-art-not-generative-art/diffusion.mp4?ref=rss">

                  Video: | Source: /notes/ai-art-not-generative-art/diffusion.mp4

                </video>
<span>AI art being formed via denoising</span>
<video muted="" autoplay="" loop="" playsinline="" caption="Generative art being formed via procedural strokes" data-src="/notes/ai-art-not-generative-art/flowers.mp4">
                  <source src="https://leanrada.com/notes/ai-art-not-generative-art/flowers.mp4?ref=rss">

                  Video: | Source: /notes/ai-art-not-generative-art/flowers.mp4

                </video>
<span>Generative art being formed via procedural strokes</span>
<p>Most modern AI image generators are based on diffusion models — they form images via <strong>‘denoising’</strong>. The animation above (left) shows the sequence of steps to progressively denoise a pure noise image into something coherent based on a prompt. The prompt for the above generation specifically was <i>‘cherry blossom branches against a clear blue sky’</i>.</p>

<p>The denoising process is a black box, an inscrutable network of billions of artificial neurons trained to generate coherent arrays of pixels.</p>

<p>Generative art algorithms, on the other hand, are relatively more hand-crafted, less magical. A generative art algorithm consists of instructions to explicitly draw every element that will be in the piece. This is apparent in the above animation (right) where each drawn stroke can be seen. <i>This particular animation was from <strong><a target="_blank" href="https://www.fxhash.xyz/generative/slug/the-soul-of-flowers">The Soul of Flowers</a></strong> by Che-Yu Wu.</i></p>

<p>There is large contrast in the transparency of these processes. <strong>One is a black box. The other is literally the instructions to create the art.</strong></p>

<h3 id="system-diagrams">System diagrams</h3>

<p>Beyond the processes themselves, art interacts with the context of its creation. And there is a lot to unpack here, especially for AI art. I’ll use diagrams to illustrate the context of the creation process.</p>

<p><strong>In the generative art process,</strong> I see 3 components at the minimum: the artist, the program, and the rendered output.</p>

<img srcset="" sizes="" spec="100% [800) 70% [1750) 1225" loading="lazy" width="400%" src="https://leanrada.com/notes/ai-art-not-generative-art/gen-system.png?ref=rss" type="bleed" caption="The generative artist writes the program that renders the piece of art">
<span>The generative artist writes the program that renders the piece of art</span>
<p>They may use libraries or frameworks as part of the program, but the artist ultimately writes, at a certain level of abstraction, the specific steps or rules which the program would execute.</p>

<p>The medium is code.</p>

<p><strong>In AI art,</strong> there are 4 components to the process: the artist, the model, the rendered output, and <em>the dataset</em>.</p>

<img srcset="" sizes="" spec="100% [800) 70% [1750) 1225" loading="lazy" width="400%" src="https://leanrada.com/notes/ai-art-not-generative-art/ai-system.png?ref=rss" type="bleed" caption="The AI artist prompts the model trained from the dataset to produce the piece of art">
<span>The AI artist prompts the model trained from the dataset to produce the piece of art</span>
<p>There is an immediate difference. Unlike AI art, <strong>generative art don’t need datasets</strong>.</p>

<p>And it’s also a controversial thing, <em>the dataset</em>. The data used to train a text-to-image model can consist of billions of images, usually scraped from the internet and includes other artworks by other artists.</p>

<p>If you consider that the model has been influenced by a lot of other images on the web, then the question of how important the AI artist’s influence over the final piece is raised. <em>Was that chiaroscuro an artistic choice, or an emergent byproduct of the model? Were those bold paint strokes an explicit expression of the artist, or just some typical style chosen by the model?</em></p>

<p>In AI art, there is confusion over which elements were expressed by the artist and which by the machine.</p>

<p>Leaving the contentious topic of datasets aside, there is another point, but not as essential, of <strong>who authored the main program</strong>. Who created the most crucial piece of the system?</p>

<p>Generative art programs are usually created by the artists themselves, while AI art programs are usually created by AI researchers, only to be used as a product by AI artists.</p>

<p>One <em>makes</em> the machine that makes the art, the other <em>uses</em> a machine to make the art.</p>

<p>Of course, AI artists could train (not fine-tune!) their own models from scratch, if they have a big(!) enough dataset of their own and some machine learning know-how. But I don't think that’s a common occurrence.</p>

<p>In summary, one is <strong>a direct expression from the artist where the medium is code</strong>, and the other is a <strong>complicated web of datasets including other artworks, machine learning, and just-add-water kind of products</strong>, and I don’t even know what the medium is.</p>

<h2 id="conclusion">Conclusion</h2>

<p>The point is that these are separate <em>art mediums</em>. Or <em>art movements</em>, if you will. The histories, the crafts, and the processes point to the same conclusion — they are no more similar than oil painting is to photography, or a film director to an animator.</p>

<p>So let’s not confuse one with the other. :)</p>

<p><span>Some aspects of the post have probably been outdated by the time I publish this post. I’ll still include them in the post because why not.</span></p>

<p>P.S. a similar thing: <a target="_blank" href="https://cryptoisnotcryptocurrency.com">cryptoisnotcryptocurrency.com</a>, <a target="_blank" href="https://en.wikipedia.org/wiki/Crypto_naming_controversy">Wikipedia article</a>.</p>

<p>Now, I should go back to regular programming for this blog.
            </p>
]]></description>
            <link>https://leanrada.com/notes/ai-art-not-generative-art?ref=rss</link>
            <guid isPermaLink="true">https://leanrada.com/notes/ai-art-not-generative-art?ref=rss</guid>
            <pubDate>Mon, 25 Mar 2024 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[htmz story]]></title>
            <description><![CDATA[
<p>This post is not the usual programming post. It’s been an interesting week, I guess.</p>

<p>I just finished my mini side-project <a target="_blank" href="https://leanrada.com/leanrada.com/htmz?ref=rss"><strong>htmz</strong><span>🡵</span></a>, a snippet / library / microframework / whatever for HTML whose main feature was that it only weighed a total of <strong>181 bytes</strong>. It almost fits inside a single ‘tweet’ (wait, the limit is now 280 not 140?).</p>

<p>Here is the entire framework in its final form:</p>

<pre><code><span><span><span>&lt;</span>iframe</span> <span>hidden</span> <span>name</span><span><span>=</span>htmz</span> <span><span>onload</span><span><span>=</span><span>"</span><span><span>setTimeout</span><span>(</span><span>(</span><span>)</span><span>=&gt;</span>
document<span>.</span><span>querySelector</span><span>(</span>contentWindow<span>.</span>location<span>.</span>hash<span>||</span><span>null</span><span>)</span>
<span>?.</span><span>replaceWith</span><span>(</span><span>...</span>contentDocument<span>.</span>body<span>.</span>childNodes<span>)</span><span>)</span></span><span>"</span></span></span><span>&gt;</span></span><span><span><span>&lt;/</span>iframe</span><span>&gt;</span></span></code></pre>

<p>See the <a target="_blank" href="https://leanrada.com/leanrada.com/htmz?ref=rss">project documentation<span>🡵</span></a> for more info on what it does.</p>

<p>I <a target="_blank" href="https://news.ycombinator.com/item?id=39429370">posted it on Hacker News<span>🡵</span></a>, went to sleep because it was 3am at that point. Then the next morning it was at the top of HN!</p>

<img srcset="" sizes="" spec="100% [664) 664" loading="lazy" width="100%" data-placeholder="" src="https://leanrada.com/notes/htmz-story/hn.png?ref=rss" alt="screenshot of HN. Stories from February 19, 2024. 1. Show HN: htmz – a low power tool for HTML (leanrada.com). 1017 points by Kalabasa 9 days ago | 242 comments">

<p>I didn’t expect this at all. But naturally I rushed to the comments section which quickly grew too numerous for me to read. They were generally positive, and acknowledged the project’s hackyness and elegance (these adjectives usually mean opposite things). It was pretty cool! The top comment in the thread sums it up.</p>

<p>A bunch of common themes were raised. I guess I’ll write about them in this post.</p>

<h2 id="why-htmz">Why htmz?</h2>

<p>htmz was initially inspired by <a target="_blank" href="https://htmx.org/">htmx<span>🡵</span></a>, another web library/framework. One of htmx’s main features was that it provides the capability for any element, not just the entire window, to be the target for update by an HTTP request (e.g. by clicking a link you load a partial HTML update to the page).</p>

<img srcset="" sizes="" spec="100% [664) 664" loading="lazy" width="100%" data-placeholder="" src="https://leanrada.com/notes/htmz-story/htmx.png?ref=rss" alt="Why should you only be able to replace the entire screen? By removing these constraints, htmx completes HTML as a hypertext.">

<p>I wondered for a bit then remembered that we already have <strong>iframes</strong>, a native HTML way for links to update not just the entire window, but a ‘part’ of the page. Granted, iframes are limited and not as dynamic as some of htmx’s operations like appends and deletions.</p>

<p>So I set out to make an iframe-only solution to this class of problems. htmz initially stood for <strong>‘htmx zero’</strong> or something like that, because you need exactly zero JavaScript to be able to use iframes, while htmx stood at around 16 kB compressed (decompresses to a total of 48 kB of JavaScript!).</p>

<h2 id="principles">Principles</h2>

<p>The initial premise was that browsers already offer much of the required functionality out of the box. Unfortunately, iframes have lots of limitations and a bit of JS is needed after all. As the solution evolved, I needed to keep the amount of JS in check, otherwise I’d just reinvent existing libraries.</p>

<p>The main principle became “lean on existing browser functionality”. This meant, among other things:</p>

<ul>
              <li><strong>No click handlers.</strong> Browsers can handle clicks by themselves. No need for JS to intercept and babysit every interaction.</li>
              <li><strong>No AJAX / fetch.</strong> Browsers can fetch HTML resources by themselves. In fact, this is a primary function of a browser!</li>
              <li><strong>No DOM parsing.</strong> Browsers can load HTML by themselves. In fact, this is a primary function…</li>
              <li><strong>No extra attributes.</strong> Scanning for and parsing extra attributes is a lot of JS.</li>
            </ul>

<p>I ended up with minimal JS that transplants content from the iframe into the main document. That was the only thing browsers don’t do (yet).</p>

<p>The only exception to this rule was the <code>setTimeout</code> wrapper which is to prevent browsers from automatically scrolling to the updated content on click. (It’s optional!)</p>

<p>Since the solution was not zero JS anymore, htmz was backronymised as <em><b>H</b>tml with <b>T</b>argeted <b>M</b>anipulation <b>Z</b>ones</em>.</p>

<h2 id="was-it-a-joke">Was it a joke?</h2>

<p><em>(short answer: maybe)</em></p>

<p>Starting with the name itself, htmz sounded like a parody of the more popular htmx. I thought it was obvious that this project was just a fun hack to share.</p>

<p>But some people took it too seriously. I know, this is HN, where serious startups and stuff are posted daily. Or rather, this is the Internet.</p>

<p>I was reminded of <a target="_blank" href="https://en.wikipedia.org/wiki/Poe%27s_law">Poe’s law<span>🡵</span></a>. On the other hand, the initial documentation for the project did give mixed vibes (it was a half-joke half-solution project after all). And the marketing bits were too good for the project’s own good.</p>

<img srcset="" sizes="" spec="100% [664) 664" loading="lazy" width="100%" data-placeholder="" src="https://leanrada.com/notes/htmz-story/logo.png?ref=rss" caption="This project has a favicon while htmx.org has none. Marketing overload! But really, I just enjoy polishing the little details in projects.">
<span>This project has a favicon while htmx.org has none. Marketing overload! But really, I just enjoy polishing the little details in projects.</span>
<p>Orrr maybe I’m the only one who finds humour in a section called ‘Installing’ that, instead of telling you to install a package, tells you to simply copy a snippet. Orrr what about when ‘Extensions’ are not plugins but code you actually have to write yourself… Ha! Get it? 😂😂😂 Subversion of expectations, anyone? No? OK, fine…</p>

<p>In any case, I had my fun writing these aspects of the project!</p>

<p>I made an npm package for good measure:</p>

<img srcset="" sizes="" spec="100% [664) 664" loading="lazy" width="100%" data-placeholder="" src="https://leanrada.com/notes/htmz-story/npm.png?ref=rss" alt="For npm enjoyers, use the following npm commands to automate the simple process of copying the snippet. For maximum npm enjoyment, this npm package contains 25 bonus dependencies!">

<h2 id="code-golfing">Code golfing</h2>

<p>Some commenters pointed out insights which led to significant reductions in the size of the snippet. Some even made pull requests, that I reviewed and merged (Am I an ‘open-source maintainer’ yet?).</p>

<p>My initial release started with <strong>181</strong> bytes:</p>

<pre><code><span><span><span>&lt;</span>iframe</span> <span>hidden</span> <span>name</span><span><span>=</span>htmz</span> <span><span>onload</span><span><span>=</span><span>"</span><span><span>setTimeout</span><span>(</span><span>(</span><span>)</span><span>=&gt;</span>
document<span>.</span><span>querySelector</span><span>(</span><span>this</span><span>.</span>contentWindow<span>.</span>location<span>.</span>hash<span>||</span><span>':not(*)'</span><span>)</span>
<span>?.</span><span>replaceWith</span><span>(</span><span>...</span><span>this</span><span>.</span>contentDocument<span>.</span>body<span>.</span>childNodes<span>)</span><span>)</span></span><span>"</span></span></span><span>&gt;</span></span><span><span><span>&lt;/</span>iframe</span><span>&gt;</span></span></code></pre>

<p>Turns out <code>':not(*)'</code> is <em>not</em> necessary as a selector fallback. <code>querySelector</code> can accept null! Down to <strong>176</strong> bytes:</p>

<pre><code><span><span><span>&lt;</span>iframe</span> <span>hidden</span> <span>name</span><span><span>=</span>htmz</span> <span><span>onload</span><span><span>=</span><span>"</span><span><span>setTimeout</span><span>(</span><span>(</span><span>)</span><span>=&gt;</span>
document<span>.</span><span>querySelector</span><span>(</span><span>this</span><span>.</span>contentWindow<span>.</span>location<span>.</span>hash<span>||</span><span>null</span><span>)</span>
<span>?.</span><span>replaceWith</span><span>(</span><span>...</span><span>this</span><span>.</span>contentDocument<span>.</span>body<span>.</span>childNodes<span>)</span><span>)</span></span><span>"</span></span></span><span>&gt;</span></span><span><span><span>&lt;/</span>iframe</span><span>&gt;</span></span></code></pre>

<p>Apparently, <code>this</code> is also unnecessary within inline attribute scripts when referring to the element it’s attached to. Now down to <strong>166</strong> bytes (its final form as of today):</p>

<pre><code><span><span><span>&lt;</span>iframe</span> <span>hidden</span> <span>name</span><span><span>=</span>htmz</span> <span><span>onload</span><span><span>=</span><span>"</span><span><span>setTimeout</span><span>(</span><span>(</span><span>)</span><span>=&gt;</span>
document<span>.</span><span>querySelector</span><span>(</span>contentWindow<span>.</span>location<span>.</span>hash<span>||</span><span>null</span><span>)</span>
<span>?.</span><span>replaceWith</span><span>(</span><span>...</span>contentDocument<span>.</span>body<span>.</span>childNodes<span>)</span><span>)</span></span><span>"</span></span></span><span>&gt;</span></span><span><span><span>&lt;/</span>iframe</span><span>&gt;</span></span></code></pre>

<p>That’s about 90% of the original! I’m pretty sure this could be reduced further (<code>setTimeout</code> isn’t strictly required) but I left it as it was. This code golfing diversion has been fun and I learned about HTML spec stuff that I wouldn’t normally discover in my day job as a React framework user.</p>

<h2 id="knowledge-sharing">Knowledge sharing</h2>

<p>Some commenters shared similar approaches and techniques. Some tips / workarounds on how to best utilise the snippet were thrown around. There were even discussions in the project’s Issue tracker on GitHub.</p>

<p><span>For one, the new <a target="_blank" href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Sec-Fetch-Dest">Sec-Fetch-Dest<span>🡵</span></a> header that someone mentioned is pretty cool. It lets the server know if the request is for an iframe or for a new tab, etc. Pretty handy for <em>hypertext</em> servers!</span></p>

<p>I learned lots and, not wanting to get these learnings lost into the archives, incorporated these tips into the main documentation, into the examples/demos, and some even became real-ish <a target="_blank" href="https://leanrada.com/leanrada.com/htmz/extensions?ref=rss">extensions<span>🡵</span></a>:</p>

<img srcset="" sizes="" spec="100% [664) 664" loading="lazy" width="100%" data-placeholder="" src="https://leanrada.com/notes/htmz-story/extensions.png?ref=rss" alt="Screenshot of the Extensions page">

<p>It’s a multi-way exchange. htmz and its iframe shenanigans have apparently inspired the creation of new HTML frameworks, such as <a target="_blank" href="https://github.com/joeldrapper/morphlex">morphlex<span>🡵</span></a> and <a target="_blank" href="https://github.com/callionica/htmf">htmf<span>🡵</span></a>. I also saw people taking the idea into different directions, like using <a target="_blank" href="https://zenn.dev/kawarimidoll/articles/33316cf9caa465">iframes to lazy-load HTML partials<span>🡵</span></a>. I feel happy about having inspired people! There are even some who said so via the <a target="_self" href="https://leanrada.com/guestbook?ref=rss">guestbook<span></span></a>, which was especially nice!</p>

<h2 id="future">Future</h2>

<p>I think the htmz story is done and I’m already looking forward to my next project (the 7DRL challenge). It’s still getting some mentions in blogs, podcasts, here and there, but it’s not like I’m gonna turn this into some serious full-time open-source project with versions and releases and (lack of) funds and all that jazz.</p>

<p>GitHub activity (stars, issues, PRs) have slowed down as well. There’s not much you can work with 166 characters, after all.</p>

<p>But the idea lives on; may the snippet proliferate! :D</p>

<img srcset="" sizes="" spec="100% [664) 664" loading="lazy" width="100%" data-placeholder="" src="https://leanrada.com/notes/htmz-story/stars.png?ref=rss" alt="Chart of htmz’s number of GitHub stars over time">
]]></description>
            <link>https://leanrada.com/notes/htmz-story?ref=rss</link>
            <guid isPermaLink="true">https://leanrada.com/notes/htmz-story?ref=rss</guid>
            <pubDate>Fri, 01 Mar 2024 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Pure CSS single-page app routing]]></title>
            <description><![CDATA[
<p>You’re probably a busy person, so here’s the CSS:</p>

<pre><code><span>section:not(:target)</span> <span>{</span>
  <span>display</span><span>:</span> none<span>;</span>
<span>}</span></code></pre>

<p><strong>Demo:</strong> <a target="_blank" href="https://leanrada.com/notes/pure-css-spa-router/example1?ref=rss">Open in a new tab</a>
            </p>
<iframe src="example1/"></iframe>My App<a target="_blank" href="https://leanrada.com/notes/pure-css-spa-router/example1?ref=rss">Open in a new tab</a>
<h2 id="explanation">Explanation</h2>

<p>The <a target="_blank" href="https://developer.mozilla.org/en-US/docs/Web/CSS/:target"><code>:target</code><span>🡵</span></a> CSS selector selects the element that is targeted by the URL fragment.</p>

<p>Combined with <code>:not</code>, we can hide sections that are <em>not</em> referenced by the URL fragment.</p>

<p>Just as JS routers use the fragment to hide/show sections in the DOM, this “CSS router” uses the same fragment to hide/show sections in the DOM.</p>

<h2 id="experiment-default-section">Experiment: Default section</h2>

<p>Notice that the example above doesn’t start with the Home section. The content is blank initially. This is because on initial page load we don’t have a URL fragment to begin with.</p>

<p>We need to make an exception for the Home section.</p>

<p>Let’s start by not hiding the <code>#home</code> section by default. Only hide <code>#home</code> if there’s a specific <code>:target</code> section.</p>

<pre><code><span><span>-</span><span> section:not(:target) {
</span></span><span><span>+</span><span> section:not(#home, :target),
</span><span>+</span><span> :root:has(:target) #home {
</span></span><span><span> </span><span>   display: none;
</span><span> </span><span> }</span></span></code></pre>

<p><strong>Demo v2:</strong> <a target="_blank" href="https://leanrada.com/notes/pure-css-spa-router/example2?ref=rss">Open in a new tab</a>
            </p>
<iframe src="example2/"></iframe>My App<a target="_blank" href="https://leanrada.com/notes/pure-css-spa-router/example2?ref=rss">Open in a new tab</a>
<h2 id="experiment-nested-routes">Experiment: Nested routes</h2>

<p>One thing that makes most client-side routers modular is the ability to nest routes. We can do the same with CSS.</p>

<pre><code><span><span>-</span><span> section:not(:target) {
</span></span><span><span>+</span><span> section:not(:target, :has(:target)) {
</span></span><span><span> </span><span>   display: none;
</span><span> </span><span> }</span></span></code></pre>

<p><strong>Demo v3: This demo is best when you <a target="_blank" href="https://leanrada.com/notes/pure-css-spa-router/example3?ref=rss">view it in a separate tab</a></strong>
            </p>
<iframe src="example3/"></iframe>My App<a target="_blank" href="https://leanrada.com/notes/pure-css-spa-router/example3?ref=rss">Open in a new tab</a>
<h2 id="parameterised-routes">Parameterised routes?</h2>

<p>The ultimate feature for client-side routers is to dynamically catch routes with parameters like for example <code>/post/:id</code>.</p>

<p>Since HTML is static, there’s no real way to do this with CSS. ☹</p>

<p>Unless… you could render all possible <code>:id</code> values in the markup and use it like you would nested routes.</p>

<pre><code><span>&lt;!-- ... --&gt;</span>
<span><span><span>&lt;</span>section</span> <span>id</span><span><span>=</span><span>"</span>post/128<span>"</span></span><span>&gt;</span></span><span>&lt;!-- ... --&gt;</span><span><span><span>&lt;/</span>section</span><span>&gt;</span></span>
<span><span><span>&lt;</span>section</span> <span>id</span><span><span>=</span><span>"</span>post/129<span>"</span></span><span>&gt;</span></span><span>&lt;!-- ... --&gt;</span><span><span><span>&lt;/</span>section</span><span>&gt;</span></span>
<span><span><span>&lt;</span>section</span> <span>id</span><span><span>=</span><span>"</span>post/130<span>"</span></span><span>&gt;</span></span><span>&lt;!-- ... --&gt;</span><span><span><span>&lt;/</span>section</span><span>&gt;</span></span>
<span>&lt;!-- ... --&gt;</span></code></pre>

<p>But that’d be like putting the entire database in HTML. And if you had multiple parameters in the route, it would be combinatorial explosion. So, nope. 👋
            </p>
]]></description>
            <link>https://leanrada.com/notes/pure-css-spa-router?ref=rss</link>
            <guid isPermaLink="true">https://leanrada.com/notes/pure-css-spa-router?ref=rss</guid>
            <pubDate>Tue, 27 Feb 2024 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[getDuolingoStreak()]]></title>
            <description><![CDATA[
<p>How to fetch your Duolingo streak using an unconfirmed API on duolingo.com:</p>

<pre><code><span>function</span> <span>getDuolingoStreak</span><span>(</span><span>username</span><span>)</span> <span>{</span>
  <span>const</span> res <span>=</span> <span>await</span> <span>fetch</span><span>(</span>
    <span><span>`</span><span>https://www.duolingo.com/2017-06-30/users?username=</span><span><span>${</span>username<span>}</span></span><span>&amp;fields=streak,streakData%7BcurrentStreak,previousStreak%7D%7D</span><span>`</span></span>
  <span>)</span><span>;</span>
  <span>const</span> data <span>=</span> <span>await</span> res<span>.</span><span>json</span><span>(</span><span>)</span><span>;</span>
  <span>const</span> userData <span>=</span> data<span>.</span>users<span>[</span><span>0</span><span>]</span><span>;</span>
  <span>// I didn't know which of these fields matter, so I just get the max of them.</span>
  <span>const</span> streak <span>=</span> Math<span>.</span><span>max</span><span>(</span>
    userData<span>?.</span>streak <span>??</span> <span>0</span><span>,</span>
    userData<span>?.</span>streakData<span>?.</span>currentStreak<span>?.</span>length <span>??</span> <span>0</span><span>,</span>
    userData<span>?.</span>streakData<span>?.</span>previousStreak<span>?.</span>length <span>??</span> <span>0</span>
  <span>)</span><span>;</span>
  <span>return</span> streak<span>;</span>
<span>}</span></code></pre>

                340
<img alt="" src="https://leanrada.com/misc/streak.png?ref=rss" loading="lazy">
This card is live ;)<br>That’s my current max streak.
<p>I can then render this data into a card like that. I put one of these cards in the <a target="_self" href="https://leanrada.com/misc?ref=rss">/misc/<span></span></a> section.</p>

<p>Let’s look at the API itself. <code>www.duolingo.com/2017-06-30</code> seems to be the API prefix, which is a bit weird. What is <code>2017-06-30</code>? <a target="_blank" href="https://en.wikipedia.org/wiki/Portal:Current_events/2017_June_30">What happened on that date?<span>🡵</span></a> Maybe the Duolingo team used <a target="_blank" href="https://calver.org/">a date-based versioning<span>🡵</span></a> at the time?</p>

<p>In any case, big thanks to the Duolingo team for keeping this apparently-6-year-old public API alive and accessible.</p>

<p>The query parameters for the <code>/users</code> endpoint are interesting. It’s similar to <a target="_blank" href="https://graphql.org/">GraphQL<span>🡵</span></a> where you can specify exactly which fields you want in the response. You can even specify specific sub-fields within objects, using some kind of a DSL in the <code>fields</code> parameter.</p>

<p>The <code>fields</code> parameter in the above query, when decoded, is <code>fields=streak,streakDate{currentStreak,previousStreak}}</code>. Fields are comma-delimited and objects are enclosed in braces. This could actually be GraphQL! There is an extra closing brace at the end which seems necessary for the request to be successful.
            </p>
]]></description>
            <link>https://leanrada.com/notes/get-duolingo-streak?ref=rss</link>
            <guid isPermaLink="true">https://leanrada.com/notes/get-duolingo-streak?ref=rss</guid>
            <pubDate>Wed, 07 Feb 2024 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Writing a single-file website with Rust]]></title>
            <description><![CDATA[
<p>At the company I work for, there is something called a “professional education leave”, which lets me take a day off to learn something new or attend conferences or whatever professional education means. I took the opportunity to learn the <a target="_blank" href="https://www.rust-lang.org/"><strong>Rust</strong><span>🡵</span></a> programming language.</p>

<p>I didn’t want to follow tutorials, so I thought of a project to learn with, which ended up being “make a single-file website web server”. It was inspired by the article <a target="_blank" href="https://j3s.sh/thought/my-website-is-one-binary.html"><strong>my website is one binary</strong> by j3s<span>🡵</span></a>.</p>

<h2 id="rust-first-impressions">Rust first impressions</h2>

<pre><code>fn <span>main</span><span>(</span><span>)</span> <span>{</span>
  println<span>!</span><span>(</span><span>"Hello World!"</span><span>)</span><span>;</span>
<span>}</span></code></pre>

<p>My first impression was that it is a mature programming language that is crazy about compile-time stuff. For example, the above <code>println!</code> call is a <em>macro</em>, which expands to something more verbose… Apparently, with macros you can also make full-blown <a target="_blank" href="https://doc.rust-lang.org/rust-by-example/macros/dsl.html">DSL<span>🡵</span></a>s that are directly embedded in Rust code.</p>

<p>The <code>rustc</code> compiler’s error messages were very good.</p>

<p>I think I haven’t really dived deep enough to discover the standout features that I keep hearing about like memory management safety. So unfortunately I didn’t get the hype at this time.</p>

<h2 id="building-a-web-server">Building a web server</h2>

<p>The standard Rust library provides a TCP module, but no HTTP one. So it’s a level lower than NodeJS, which is understandable.</p>

<p>I didn’t want to implement the HTTP protocol, so I searched for an HTTP library.</p>

<p>I found <a target="_blank" href="https://github.com/tomaka/rouille"><strong>rouille</strong><span>🡵</span></a>, a web micro-framework. I installed it via <code>cargo</code> which is like <code>npm</code> but for Rust.</p>

<p>It was really easy to get it set up and running.</p>

<p>For starters, I made two pages: <code>/</code> and <code>/about</code>.</p>

<pre><code><span>// main.rs</span>
use rouille<span>:</span><span>:</span>Response<span>;</span>
use rouille<span>:</span><span>:</span>router<span>;</span>

mod pages <span>{</span>
  pub mod index<span>;</span>
  pub mod about<span>;</span>
<span>}</span>

fn <span>main</span><span>(</span><span>)</span> <span>{</span>
  rouille<span>:</span><span>:</span><span>start_server</span><span>(</span><span>"0.0.0.0:8080"</span><span>,</span> move <span>|</span>request<span>|</span> <span>{</span>
    let response <span>=</span> router<span>!</span><span>(</span>request<span>,</span>
      <span>(</span>GET<span>)</span> <span>(</span><span>/</span><span>)</span> <span>=</span><span>&gt;</span> <span>{</span>
        pages<span>:</span><span>:</span>index<span>:</span><span>:</span><span>page</span><span>(</span>request<span>)</span>
      <span>}</span><span>,</span>

      <span>(</span>GET<span>)</span> <span>(</span><span>/</span>about<span>)</span> <span>=</span><span>&gt;</span> <span>{</span>
        pages<span>:</span><span>:</span>about<span>:</span><span>:</span><span>page</span><span>(</span>request<span>)</span>
      <span>}</span><span>,</span>

      _ <span>=</span><span>&gt;</span> Response<span>:</span><span>:</span><span>empty_404</span><span>(</span><span>)</span>
    <span>)</span><span>;</span>

    <span>return</span> response<span>;</span>
  <span>}</span><span>)</span><span>;</span>
<span>}</span></code></pre>

<p>Notice the <code>router!</code> macro! Apparently it allows me to write <code>GET</code> and the routes <code>/</code> and <code>/about</code> plainly into code. Those aren’t strings! Nor are they Rust keywords! It’s macro magic. It’s even more magical than Kotlin’s lambdas. I think this is a powerful but dangerous tool which could make learning Rust codebases harder. I like it though. Instead of parsing these routes at runtime, errors can be caught at compile time.</p>

<h2 id="rust-modules">Rust modules</h2>

<p>One little snag was that Rust’s module system was a little confusing, coming from ES6 where everything is explicit.</p>

<p>In Rust, modules map to files. Module naming and hierarchy follows the filesystem structure.</p>

<p>I didn’t fully understand modules properly but it seems that I can use the <code>mod</code> keyword to import modules. And that was enough knowledge to proceed with the project.</p>

<p>In the above code I separated the code that renders the pages into separate files in <code>pages/index.rs</code> and <code>pages/about.rs</code>. To import them in the main file, I had this declaration at the top:</p>

<pre><code>mod pages <span>{</span>
  pub mod index<span>;</span>
  pub mod about<span>;</span>
<span>}</span></code></pre>

<p>As I defined a top-level <code>page()</code> function in each of these files, calling them from the main file would be something like this: <code>pages::index::page(request)</code>.</p>

<h2 id="rendering-html">Rendering HTML</h2>

<p>The top-level <code>page</code> functions simply return static HTML <code>Response</code>s for now.</p>

<p>Here’s one that handles the root <code>/</code> route:</p>

<pre><code><span>// pages/index.rs</span>
use rouille<span>:</span><span>:</span>Request<span>;</span>
use rouille<span>:</span><span>:</span>Response<span>;</span>

pub fn <span>page</span><span>(</span>_request<span>:</span> <span>&amp;</span>Request<span>)</span> <span>-</span><span>&gt;</span> Response <span>{</span>
  <span>return</span> Response<span>:</span><span>:</span><span>html</span><span>(</span>r#"<span>&lt;</span><span>!</span>doctype html<span>&gt;</span>
    <span>&lt;</span>title<span>&gt;</span>Tiny site<span>&lt;</span><span>/</span>title<span>&gt;</span>
    <span>&lt;</span>h1<span>&gt;</span>Hello<span>,</span> world<span>!</span><span>&lt;</span><span>/</span>h1<span>&gt;</span>
    <span>&lt;</span>p<span>&gt;</span>Welcome to my tiny site<span>!</span><span>&lt;</span><span>/</span>p<span>&gt;</span>
    <span>&lt;</span>a href<span>=</span><span>"/about"</span><span>&gt;</span>About<span>&lt;</span><span>/</span>a<span>&gt;</span>
  "#<span>)</span><span>;</span>
<span>}</span></code></pre>

<p>Which renders this page:</p>
<iframe srcdoc="
<!doctype html>
<title>Tiny site</title>
<h1>Hello, world!</h1>
<p>Welcome to my tiny site!</p>
<a href=&quot;/about&quot;>About</a>
<base href=&quot;about:blank&quot;/>">
            </iframe>
<p>To avoid repetitively escaping double quotes in HTML, I used the raw string literal which looks <code>r#"something like this"#</code> to write the HTML response in Rust.</p>

<h2 id="html-templates--components">HTML templates / components</h2>

<p>I haven’t done this, but I imagine components or “includes” can be implemented by simply calling component functions normally and concatenating the resulting HTML fragments together. Nothing fancy required, for a tiny website.</p>

<p>I wonder if there are templating systems that take advantage of Rust’s compile-time macros. A quick search revealed a lot of them. In fact, that seems to be the “Rust way” of doing HTML templates. One example is <a target="_blank" href="https://maud.lambda.xyz/">Maud<span>🡵</span></a>:</p>

<pre><code>html<span>!</span> <span>{</span>
  article data<span>-</span>index<span>=</span><span>"12345"</span> <span>{</span>
    h1 <span>{</span> <span>"My blog"</span> <span>}</span>
    tag<span>-</span>cloud <span>{</span> <span>"pinkie pie pony cute"</span> <span>}</span>
  <span>}</span>
<span>}</span></code></pre>

<p>That looks a lot like Jetpack Compose in Kotlin. Seems like fun way to write HTML. I fear I might be taken by a strange mood and convert my entire website into Rust. I guess paid hosting for non-static sites would be a good deterrent.</p>

<h2 id="conclusion">Conclusion</h2>

<p>That was a nice dip into Rust. I’m still interested in the hyped-up features like memory management but I guess an HTML web server wouldn’t need much of those things after all. Maybe the next Rust learning exercise would be something like a small video game. Now that’s something that would require memory management and algorithms.</p>

<p>Here’s the repo for my tiny web server in Rust: <a target="_blank" href="https://github.com/Kalabasa/tala"><strong>github.com/Kalabasa/tala</strong><span>🡵</span></a>.
            </p>
]]></description>
            <link>https://leanrada.com/notes/single-file-website-rust?ref=rss</link>
            <guid isPermaLink="true">https://leanrada.com/notes/single-file-website-rust?ref=rss</guid>
            <pubDate>Sat, 30 Dec 2023 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[2023 in review]]></title>
            <description><![CDATA[
<p>What happened in 2023? Stuff happened.</p>

<h2 id="2023-website-redesign-🎨">2023 website redesign 🎨</h2>

<p>Feb 2023, I redesigned <a target="_self" href="https://leanrada.com/wares/personal-website?ref=rss">my site<span></span></a>, with a goal of making it more personal instead of just being a mere portfolio.</p>

<img srcset="" sizes="" spec="100% [664) 664" loading="lazy" width="100%" data-placeholder="" type="windowed" alt="screenshot of 2023 website" src="https://leanrada.com/wares/personal-website/media/v4.png?ref=rss">

<p>It came with a blog section, which made me start writing a blog.</p>

<h2 id="started-a-blog-🖊">Started a blog 🖊</h2>
<blockquote>
              <p>“I’m starting a blog!</p>
              <p>I’ve done some blogging in the past (for gamedev), and I already do write-ups for my projects, so I think it’d be good to officially keep a blog!</p>
              <p>I have some ideas to populate the first few posts, then we’ll see how it goes from there.</p>
              <p>Watch this space!”</p>
              <p><cite>First blog post on the new site (now unpublished), 24 Feb 2023</cite></p>
            </blockquote>
<p>Well, it went well! In 2023 I had:</p>
12 posts
              1.6k visits
              
<p>The hottest posts were:</p>

<ul>
              <li>🔥 <a target="_self" href="https://leanrada.com/notes/sweep-and-prune?ref=rss"><strong>Sort, sweep, and prune: Collision detection algorithms</strong><span></span></a></li>
              <li>🔥 <a target="_self" href="https://leanrada.com/notes/dynamic-patrol-stealth-games?ref=rss"><strong>Dynamic patrol behaviour in stealth games with Markov chains</strong><span></span></a></li>
            </ul>

<p>It is a nice new hobby and something I shall continue. 🙌</p>

<h2 id="side-projects-💻">Side projects 💻</h2>

<p>This year I launched two webapps, <a target="_self" href="https://leanrada.com/wares/portabl.ink?ref=rss">portabl.ink<span></span></a> and <a target="_self" href="https://leanrada.com/guhit-kudlit?ref=rss">GuhitKudlit<span></span></a>!</p>

<img srcset="" sizes="" spec="100% [664) 664" loading="lazy" width="100%" data-placeholder="" type="windowed" alt="screenshot of portablink" src="https://leanrada.com/notes/2023-review/portabl.ink.png?ref=rss" caption="portabl.ink">
portabl.ink
<p><strong>Portablink</strong> was just a fun experiment without much utility. I don’t have analytics on it so I don’t know if anyone visits it. We’ll see if I renew the domain.</p>

<img srcset="" sizes="" spec="100% [664) 664" loading="lazy" width="100%" data-placeholder="" type="windowed" alt="screenshot of GuhitKudlit" src="https://leanrada.com/notes/2023-review/guhit-kudlit.png?ref=rss" caption="GuhitKudlit - Baybayin calligraphy generator">
GuhitKudlit - Baybayin calligraphy generator
<p><strong>GuhitKudlit</strong> did great and is getting regular visitors coming from Google. From the Google Search Console report, it looks like there is demand for baybayin translation and generation or tattoos or whatever. I might rewrite this site properly if it sees more use.</p>

<h2 id="personal--misc-✨">Personal / Misc ✨</h2>

<ul>
              <li>💼 Got a new job. Still a software engineer.</li>
              <li>🎮 Finally finished <a target="_blank" href="https://zelda.nintendo.com/tears-of-the-kingdom/"><strong>Tears of the Kingdom</strong><span>🡵</span></a>.</li>
              <li>🎮 Replayed <strong>Splinter Cell: Chaos Theory</strong>. First was around 15 years ago.</li>
              <li>🎓 Began an attempt to learn the Japanese language.</li>
            </ul>

<h3 id="steam-🫧">Steam 🫧</h3>

<p>Here’s a bit of my <strong>Steam Year in Review</strong>:</p>

<img srcset="" sizes="" spec="100% [664) 664" loading="lazy" width="100%" data-placeholder="" alt="This spider graph shows the kinds of games you spent the most time in 2023. MOBA, 3; Card Battler, 1.7; Puzzle Platformer, 1.3; Automation, 1; Stealth, 3.8; Platformer, 2.6" src="https://leanrada.com/notes/2023-review/steam-spider.png?ref=rss">

<p>MOBA, Platformer, and Stealth… I guess I can conclude that I played a diverse range of games this year? This graph is missing the roguelike category though.</p>

<img srcset="" sizes="" spec="100% [664) 664" loading="lazy" width="100%" data-placeholder="" alt="Dota 2, Splinter Cell: Chaos Theory, Portal 2, Monster Train, Noita, Peglin, Braid, FTL, Factorio, Black Mesa" src="https://leanrada.com/notes/2023-review/steam.png?ref=rss" caption="Most played games on Steam in order">
<span>Most played games on Steam in order</span>
<p>Apparently, I played a lot of <strong>Dota</strong>. I don’t even remember playing it this year.</p>

<p>You might have noticed the bias for the <a target="_blank" href="https://en.wikipedia.org/wiki/Roguelike">roguelike genre<span>🡵</span></a>. Shoutout to <a target="_blank" href="https://store.steampowered.com/app/881100/Noita/"><strong>Noita</strong><span>🡵</span></a>, <a target="_blank" href="https://store.steampowered.com/app/212680/FTL_Faster_Than_Light/"><strong>FTL</strong><span>🡵</span></a>, and <a target="_blank" href="https://store.steampowered.com/app/1102190/Monster_Train/"><strong>Monster Train</strong><span>🡵</span></a>. Great games.</p>

<h3 id="spotify-🎵">Spotify 🎵</h3>

<p>Here’s a nonsensical thing from my <strong>Spotify Wrapped</strong> — <em>My Top Artists</em> in 2023:</p>

<img srcset="" sizes="" spec="100% [664) 664" loading="lazy" width="100%" data-placeholder="" alt="My top artists on Spotify." src="https://leanrada.com/notes/2023-review/spotify.jpg?ref=rss" placeholder-ratio="0.3">

<p><a target="_blank" href="https://open.spotify.com/artist/5oOhM2DFWab8XhSdQiITry"><strong>Tycho</strong><span>🡵</span></a> is chillwave ambient IDM downtempo post-rock instrumental music. Nice listening.</p>

<p><a target="_blank" href="https://open.spotify.com/artist/7pnSUizGuS2tAW2yCAhafn"><strong>Vanilla</strong><span>🡵</span></a> is instrumental hip hop soul-sampling electronic music. Nice grooves.</p>

<p>The third artist is me, so it doesn’t count.</p>

<p>I don’t actually know who the fourth artist is. I’ll explain below.</p>

<p><a target="_blank" href="https://open.spotify.com/artist/0rFHElzeddB9ymDjgpBENX"><strong>Lamp</strong><span>🡵</span></a> is a Japanese band making indie pop jazz pop bossa nova J-pop music. I like the chord progressions.</p>

<p><span>I think I use Spotify a bit differently than most people. I don’t primarily listen to <em>artists</em>. I just use the playlists, especially the dynamic <strong>Discover Weekly</strong> playlist. As such, “top artists” don’t really make sense. These top 5 artists don’t make up a majority of my listens. Accidentally listening to any artist’s song twice skyrockets them to my “top artists” list. Nonetheless, there are some exceptional artists that I discover and do replay from time to time; some were mentioned above.</span></p>

<h2 id="conclusion-💡">Conclusion 💡</h2>

<p>The year two thousand and twenty-three was definitely one of the years of all time.</p>
]]></description>
            <link>https://leanrada.com/notes/2023-review?ref=rss</link>
            <guid isPermaLink="true">https://leanrada.com/notes/2023-review?ref=rss</guid>
            <pubDate>Mon, 25 Dec 2023 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[My personalised 55% split keyboard]]></title>
            <description><![CDATA[<p><em>For RSS readers: This article contains interactive content available on the <a href="https://leanrada.com/notes/my-personalised-keyboard?ref=rss">original post on leanrada.com</a>.</em></p>

<p>I’ve been using my <a target="_blank" href="https://github.com/kata0510/Lily58"><strong>Lily58 split keyboard</strong><span>🡵</span></a> for more than a year now. It’s a compact 58-key split keyboard with column-staggered keys, 55% the size of a standard 104-key keyboard.</p>

<p>Thanks to the open-source firmware/framework <a target="_blank" href="https://qmk.fm/">QMK<span>🡵</span></a>, I customised it and programmed it to my satisfaction. I figured now’s a good time to post about my layout so far.</p>

<img srcset="" sizes="" spec="100% [664) 664" loading="lazy" width="100%" data-placeholder="" src="https://leanrada.com/notes/my-personalised-keyboard/photo.jpg?ref=rss" caption="The keyboard in question">
<span>The keyboard in question</span>
<h2 id="quick-rundown">Quick rundown</h2>

<p><strong>Hardware:</strong> Split keyboard with 58 keys in total. A 32×128 pixel OLED screen on each half. Both halves are connected by wire, and the whole thing is wired USB-C to the computer.</p>

<p><strong>Software:</strong> It runs the QMK firmware, which I used to implement 7-8 layers and several custom functions. I customised the heck out of my keyboard’s firmware.</p>

<h2 id="the-basics">The basics</h2>

<pre>Interactive content: <a href="https://leanrada.com/notes/my-personalised-keyboard?ref=rss">Visit the website to play with interactive content!</a>
Alternative text: Lily58 keyboard layout diagram
  Left hand:
    〔Esc 〕〔 ⌃[ 〕〔 ⌃] 〕〔⌃⇧Tab〕〔⌃Tab〕〔    〕
    〔 ?  〕〔 q  〕〔 w  〕〔 f  〕〔 p  〕〔 b  〕
    〔Tab 〕〔 a  〕〔 r  〕〔 s  〕〔 t  〕〔 g  〕
    〔 +  〕〔 z  〕〔 x  〕〔 c  〕〔 d  〕〔 v  〕
    〔 ⌃  〕〔L(s)〕〔 ❖  〕〔 ␣  〕〔 ◆  〕
  Right hand:
    〔L(e)〕〔Wksp←〕〔Wksp↑〕〔Wksp↓〕〔Wksp→〕〔 ⌫  〕
    〔 j  〕〔 l  〕〔 u  〕〔 y  〕〔 =  〕〔 '  〕
    〔 m  〕〔 n  〕〔 e  〕〔 i  〕〔 o  〕〔 ↵  〕
    〔 k  〕〔 h  〕〔 .  〕〔 ,  〕〔 /  〕〔 -  〕
    〔 ◆  〕〔 ␣  〕〔L(n)〕〔L(#)〕〔L(f)〕</pre>

<p>This is the <em>base layer</em> of my keyboard, where all the typing happens primarily.</p>

<p>Largely in the middle lies the alphabet. Instead of the usual QWERTY layout, it’s in a layout called <a target="_blank" href="https://colemakmods.github.io/mod-dh/"><strong>Colemak-DH</strong><span>🡵</span></a>. It took some time to get used to but I appreciate how easier it was for typing (in English), as the most common letters are in the home row.</p>

<pre>Interactive content: <a href="https://leanrada.com/notes/my-personalised-keyboard?ref=rss">Visit the website to play with interactive content!</a>
Alternative text: Lily58 keyboard layout diagram with highlighted keys
  Left hand:
    〔Esc 〕〔 ⌃[ 〕〔 ⌃] 〕〔⌃⇧Tab〕〔⌃Tab〕〔    〕
    〔 ?  〕〘 q  〙〘 w  〙〘 f  〙〘 p  〙〘 b  〙
    〔Tab 〕〘 a  〙〘 r  〙〘 s  〙〘 t  〙〘 g  〙
    〔 +  〕〘 z  〙〘 x  〙〘 c  〙〘 d  〙〘 v  〙
    〔 ⌃  〕〔L(s)〕〔 ❖  〕〔 ␣  〕〔 ◆  〕
  Right hand:
    〔L(e)〕〔Wksp←〕〔Wksp↑〕〔Wksp↓〕〔Wksp→〕〔 ⌫  〕
    〘 j  〙〘 l  〙〘 u  〙〘 y  〙〘 =  〙〔 '  〕
    〘 m  〙〘 n  〙〘 e  〙〘 i  〙〘 o  〙〔 ↵  〕
    〘 k  〙〘 h  〙〘 .  〙〘 ,  〙〘 /  〙〔 -  〕
    〔 ◆  〕〔 ␣  〕〔L(n)〕〔L(#)〕〔L(f)〕</pre>
Alphabetic input
<p>The alphabet is flanked by the familiar <kbd>Esc</kbd>, <kbd>⌫</kbd>, <kbd>↵</kbd>, and <kbd>Tab</kbd> keys, only to be punctuated by some of the common <em>punctuations</em>.</p>

<p>The bottom row gives access to hidden <em>layers</em> which can be activated by holding down the layer <kbd>L(*)</kbd> keys. More on layers later.</p>

<pre>Interactive content: <a href="https://leanrada.com/notes/my-personalised-keyboard?ref=rss">Visit the website to play with interactive content!</a>
Alternative text: Lily58 keyboard layout diagram with highlighted keys
  Left hand:
    〔Esc 〕〔 ⌃[ 〕〔 ⌃] 〕〔⌃⇧Tab〕〔⌃Tab〕〔    〕
    〔 ?  〕〔 q  〕〔 w  〕〔 f  〕〔 p  〕〔 b  〕
    〔Tab 〕〔 a  〕〔 r  〕〔 s  〕〔 t  〕〔 g  〕
    〔 +  〕〔 z  〕〔 x  〕〔 c  〕〔 d  〕〔 v  〕
    〘 ⌃  〙〘L(s)〙〘 ❖  〙〘 ␣  〙〔 ◆  〕
  Right hand:
    〔L(e)〕〔Wksp←〕〔Wksp↑〕〔Wksp↓〕〔Wksp→〕〔 ⌫  〕
    〔 j  〕〔 l  〕〔 u  〕〔 y  〕〔 =  〕〔 '  〕
    〔 m  〕〔 n  〕〔 e  〕〔 i  〕〔 o  〕〔 ↵  〕
    〔 k  〕〔 h  〕〔 .  〕〔 ,  〕〔 /  〕〔 -  〕
    〔 ◆  〕〘 ␣  〙〘L(n)〙〘L(#)〙〘L(f)〙</pre>
Layer keys, <em>Space</em><kbd>␣</kbd> bar, and primary modifiers <code>Control</code>/<code>Command</code>
<p>The top row is where it gets interesting. Here we have <em>single-key shortcuts</em>.</p>

<pre>Interactive content: <a href="https://leanrada.com/notes/my-personalised-keyboard?ref=rss">Visit the website to play with interactive content!</a>
Alternative text: Lily58 keyboard layout diagram with highlighted keys
  Left hand:
    〔Esc 〕〘 ⌃[ 〙〘 ⌃] 〙〘⌃⇧Tab〙〘⌃Tab〙〔    〕
    〔 ?  〕〔 q  〕〔 w  〕〔 f  〕〔 p  〕〔 b  〕
    〔Tab 〕〔 a  〕〔 r  〕〔 s  〕〔 t  〕〔 g  〕
    〔 +  〕〔 z  〕〔 x  〕〔 c  〕〔 d  〕〔 v  〕
    〔 ⌃  〕〔L(s)〕〔 ❖  〕〔 ␣  〕〔 ◆  〕
  Right hand:
    〔L(e)〕〘Wksp←〙〘Wksp↑〙〘Wksp↓〙〘Wksp→〙〔 ⌫  〕
    〔 j  〕〔 l  〕〔 u  〕〔 y  〕〔 =  〕〔 '  〕
    〔 m  〕〔 n  〕〔 e  〕〔 i  〕〔 o  〕〔 ↵  〕
    〔 k  〕〔 h  〕〔 .  〕〔 ,  〕〔 /  〕〔 -  〕
    〔 ◆  〕〔 ␣  〕〔L(n)〕〔L(#)〕〔L(f)〕</pre>
Top row: shortcuts
<p>On the left hand top row we have “universal” shortcuts for navigating within an application: Back, Forward, Previous tab, and Next tab.</p>

<video muted="" autoplay="" loop="" playsinline="" caption="Using the application navigation keys." data-src="/notes/my-personalised-keyboard/appnav.mp4">
                <source src="https://leanrada.com/notes/my-personalised-keyboard/appnav.mp4?ref=rss">

                Video: | Source: /notes/my-personalised-keyboard/appnav.mp4

              </video>
<span>Using the application navigation keys.</span>
<ul>
              <li><kbd>⌃[</kbd> - Back</li>
              <li><kbd>⌃]</kbd> - Forward</li>
              <li><kbd>⌃⇧Tab</kbd> - Previous tab</li>
              <li><kbd>⌃Tab</kbd> - Next tab</li>
            </ul>

<p>They’re compatible with most web browsers and code editors. Really handy when surfing the web or when tracing code across multiple files.</p>

<p>On the other <em>hand</em>, we have <kbd>Wksp←</kbd> and <kbd>Wksp→</kbd>, shortcuts for switching between workspaces (a.k.a. spaces and virtual desktops in macOS and Windows, respectively).</p>

<video muted="" autoplay="" loop="" playsinline="" aria-label="demo video of using the workspace switcher keys" alt="demo video of using the workspace switcher keys" data-src="/notes/my-personalised-keyboard/wksp.mp4">
                <source src="https://leanrada.com/notes/my-personalised-keyboard/wksp.mp4?ref=rss">

                Video: demo video of using the workspace switcher keys | Source: /notes/my-personalised-keyboard/wksp.mp4

              </video>

<p><kbd>Wksp↑</kbd> and <kbd>Wksp↓</kbd> are bound to desktop-specific actions like Exposé in macOS. I don’t actually remember their exact purposes because they’re not consistent across OSes.</p>

<h2 id="home-row-modifiers">Home row modifiers</h2>

<pre>Interactive content: <a href="https://leanrada.com/notes/my-personalised-keyboard?ref=rss">Visit the website to play with interactive content!</a>
Alternative text: Lily58 keyboard layout diagram with highlighted keys
  Left hand:
    〔Esc 〕〔 ⌃[ 〕〔 ⌃] 〕〔⌃⇧Tab〕〔⌃Tab〕〔    〕
    〔 ?  〕〔 q  〕〔 w  〕〔 f  〕〔 p  〕〔 b  〕
    〔Tab 〕〘a/⇧ 〙〘r/⌘ 〙〘s/⌥ 〙〘t/⌃ 〙〔 g  〕
    〔 +  〕〔 z  〕〔 x  〕〔 c  〕〔 d  〕〔 v  〕
    〔 ⌃  〕〔L(s)〕〔 ❖  〕〔 ␣  〕〔 ◆  〕
  Right hand:
    〔L(e)〕〔Wksp←〕〔Wksp↑〕〔Wksp↓〕〔Wksp→〕〔 ⌫  〕
    〔 j  〕〔 l  〕〔 u  〕〔 y  〕〔 =  〕〔 '  〕
    〔 m  〕〘n/⌃ 〙〘e/⌥ 〙〘i/⌘ 〙〘o/⇧ 〙〔 ↵  〕
    〔 k  〕〔 h  〕〔 .  〕〔 ,  〕〔 /  〕〔 -  〕
    〔 ◆  〕〔 ␣  〕〔L(n)〕〔L(#)〕〔L(f)〕</pre>
Tap/Hold dual purpose home row keys
<p>The home row on the keyboard is where the fingers rest by default. As such, the home row on my keyboard serves a second purpose besides alphabetic input. Some of them can be held down to activate <em>modifiers</em> such as <code>Control</code>, <code>Alt</code>, and <code>Super</code>.</p>

<p>For example, the key <kbd>a</kbd> activates <code>Shift</code> when held down, while a tap produces the letter <code>a</code>.</p>

<p>Home row modifiers make keyboard shortcuts much more comfortable, in contrast to the awkward contortions you have to perform on regular keyboards.</p>

<p>This makes use of the <a target="_blank" href="https://docs.qmk.fm/#/mod_tap"><strong>Mod-Tap</strong><span>🡵</span></a> feature from the QMK framework, a.k.a. Tap/Hold keys.</p>

<p><span>The home row mods, among other things, were inspired by the famous <a target="_blank" href="https://github.com/manna-harbour/miryoku"><strong>Miryoku</strong><span>🡵</span></a> layout. Credits to Manna Harbour for designing the Miryoku layout.</span></p>

<h2 id="layers">Layers</h2>

<p>I use <strong>layers</strong> due to the limited number of physical keys on the keyboard. Inputs such as numbers and symbols have to be organised into separate layers. I can switch between these layers either through dedicated layer keys or programmatically.</p>

<p>Here are the layers I ended up with:</p>

<ol>
              <li>Alphabet (Default)</li>
              <li><img alt="" src="https://leanrada.com/notes/my-personalised-keyboard/shift_layer_oled.png?ref=rss"> Shifted alphabet (Uppercase)</li>
              <li><img alt="" src="https://leanrada.com/notes/my-personalised-keyboard/symbol_layer_oled.png?ref=rss"> Symbols</li>
              <li><img alt="" src="https://leanrada.com/notes/my-personalised-keyboard/navigation_layer_oled.png?ref=rss"> Navigation / manipulation</li>
              <li><img alt="" src="https://leanrada.com/notes/my-personalised-keyboard/number_layer_oled.png?ref=rss"> Numbers</li>
              <li><img alt="" src="https://leanrada.com/notes/my-personalised-keyboard/function_layer_oled.png?ref=rss"> Functions</li>
              <li><img alt="" src="https://leanrada.com/notes/my-personalised-keyboard/emoji_layer_oled.png?ref=rss"> Emojis</li>
            </ol>

<p><span>Btw, the OLED screen is programmed to show the current layer.</span></p>

<p>Let’s dive into each layer in the following sections. 🤿</p>

<h2 id="shift-layer-">Shift layer <img alt="" src="https://leanrada.com/notes/my-personalised-keyboard/shift_layer_oled.png?ref=rss"></h2>

<pre>Interactive content: <a href="https://leanrada.com/notes/my-personalised-keyboard?ref=rss">Visit the website to play with interactive content!</a>
Alternative text: Lily58 keyboard layout diagram
  Left hand:
    〔Esc 〕〔 ~  〕〔 @  〕〔 #  〕〔 %  〕〔    〕
    〔 !  〕〔 Q  〕〔 W  〕〔 F  〕〔 P  〕〔 B  〕
    〔Tab 〕〔 A  〕〔 R  〕〔 S  〕〔 T  〕〔 G  〕
    〔    〕〔 Z  〕〔 X  〕〔 C  〕〔 D  〕〔 V  〕
    〔    〕〔    〕〔    〕〔 ⇧  〕〔    〕
  Right hand:
    〔    〕〔 ^  〕〔 &amp;  〕〔 |  〕〔 \  〕〔 ⌫  〕
    〔 J  〕〔 L  〕〔 U  〕〔 Y  〕〔 _  〕〔 "  〕
    〔 M  〕〔 N  〕〔 E  〕〔 I  〕〔 O  〕〔 ↵  〕
    〔 K  〕〔 H  〕〔 :  〕〔 ;  〕〔 *  〕〔    〕
    〔    〕〔 ␣  〕〔    〕〔    〕〔    〕</pre>
Interactive diagram! Click the highlighted <kbd>⇧</kbd> layer activation key above to toggle between the base layer and the Shift layer.
<p>The <strong>Shift layer</strong> is just a shifted or uppercase version of the base layer. You know, like when you hold <em>Shift</em> on a regular keyboard! This layer is activated by holding down the left <em>Space</em> key <kbd>␣</kbd> instead of the <em>Shift</em> key. It’s another Tap/Hold key. Tapping <em>Space</em> <kbd>␣</kbd> inputs a <em>space character</em>, while holding it activates the Shift layer.</p>

<p>Some of my shifted punctuations differ from their counterparts in a regular QWERTY keyboard. Like how <kbd>?</kbd> shifts into <kbd>!</kbd>, <kbd>.</kbd> to <kbd>:</kbd>, <kbd>,</kbd> to <kbd>;</kbd>, etc…</p>

<p><span>I used this great <a target="_blank" href="https://getreuer.info/posts/keyboards/custom-shift-keys/index.html"><strong>Custom Shift Keys</strong> library<span>🡵</span></a> from Pascal Getreuer to customise the shifted values.</span></p>

<h2 id="symbols-">Symbols <img alt="" src="https://leanrada.com/notes/my-personalised-keyboard/symbol_layer_oled.png?ref=rss"></h2>

<pre>Interactive content: <a href="https://leanrada.com/notes/my-personalised-keyboard?ref=rss">Visit the website to play with interactive content!</a>
Alternative text: Lily58 keyboard layout diagram with highlighted keys
  Left hand:
    〘    〙〘    〙〘    〙〘    〙〘    〙〘    〙
    〘 `  〙〘 \  〙〘 $  〙〘 {  〙〘 }  〙〘    〙
    〘 &lt;  〙〘 =  〙〘 -  〙〘 (  〙〘 )  〙〘 &gt;  〙
    〘    〙〘    〙〘    〙〘 [  〙〘 ]  〙〘    〙
    〔    〕〘L(s)〙〔    〕〔    〕〔    〕
  Right hand:
    〔    〕〔    〕〔    〕〔    〕〔    〕〔    〕
    〔    〕〔    〕〔    〕〔    〕〔    〕〔    〕
    〔    〕〘 ⌃  〙〘 ⌥  〙〘 ⌘  〙〘 ⇧  〙〔    〕
    〔    〕〔    〕〔    〕〔    〕〔    〕〔    〕
    〔    〕〔    〕〔    〕〔    〕〔    〕</pre>

<p>The <strong>Symbol layer</strong> is activated by holding the dedicated <em>Symbol layer key</em> <kbd>L(s)</kbd> with the left thumb. Matching the thumb, the symbols are laid out on the left-hand side only. The right-hand side defaults to home row mods.</p>

<p>There’s a bit of special programming that I added for this layer. The parentheses, brackets, braces, and angle brackets — or the "enclosure" keys — have a nifty little shortcut in them for a smoother coding experience.</p>

<video muted="" autoplay="" loop="" playsinline="" caption="Caret repositioning in brackets" data-src="/notes/my-personalised-keyboard/closing-bracket-reposition.mp4">
                <source src="https://leanrada.com/notes/my-personalised-keyboard/closing-bracket-reposition.mp4?ref=rss">

                Video: | Source: /notes/my-personalised-keyboard/closing-bracket-reposition.mp4

              </video>
<span>Caret repositioning in brackets</span>
<p>What it does exactly is it lets me automatically reposition the caret or cursor inside the brackets without the need for arrow keys. The arrow keys are on a separate layer, and layer-switching has an overhead.</p>

<p>The trigger for it is simple: if I still have the opening symbol’s key held down as I release the closing symbol’s key, it repositions. Otherwise, it types normally. This way I can control whether I want to quickly reposition or not.</p>

<pre>Interactive content: <a href="https://leanrada.com/notes/my-personalised-keyboard?ref=rss">Visit the website to play with interactive content!</a>
Alternative text: interactive simulation of bracket keyboard input</pre>
Demo! You’ll need a keyboard for this.<br>To trigger caret repositioning, hold <kbd>1</kbd>, press <kbd>2</kbd>, release <kbd>2</kbd>, before releasing <kbd>1</kbd>. It’s a reversing motion, mirroring the cursor’s movements.
<h2 id="navigation-">Navigation <img alt="" src="https://leanrada.com/notes/my-personalised-keyboard/navigation_layer_oled.png?ref=rss"></h2>

<pre>Interactive content: <a href="https://leanrada.com/notes/my-personalised-keyboard?ref=rss">Visit the website to play with interactive content!</a>
Alternative text: Lily58 keyboard layout diagram with highlighted keys
  Left hand:
    〔    〕〔    〕〔    〕〔    〕〔    〕〔    〕
    〔    〕〔    〕〔    〕〔    〕〔    〕〔    〕
    〔    〕〘 ⇧  〙〘 ⌘  〙〘 ⌥  〙〘 ⌃  〙〔    〕
    〔    〕〔    〕〔    〕〔    〕〔    〕〔    〕
    〔    〕〔    〕〔    〕〔    〕〔    〕
  Right hand:
    〘    〙〘    〙〘    〙〘⇧Tab〙〘Tab 〙〘 ⌫  〙
    〘 W⌫ 〙〘 W← 〙〘WSel〙〘    〙〘 W→ 〙〘    〙
    〘 ⌦  〙〘 ←  〙〘 ↑  〙〘 ↓  〙〘 →  〙〘 ↵  〙
    〘    〙〘Home〙〘PgUp〙〘PgDn〙〘End 〙〘    〙
    〔    〕〔    〕〘L(n)〙〔    〕〔    〕</pre>

<p>The <strong>Navigation / manipulation layer</strong> provides the arrow keys, page navigation keys, and word navigation, all on the right side. Some text manipulation functions are here as well. This layer is especially useful when editing text.</p>

<p>On the home row sit the arrow keys. These probably are among the the most used keys ever.</p>

<pre>Interactive content: <a href="https://leanrada.com/notes/my-personalised-keyboard?ref=rss">Visit the website to play with interactive content!</a>
Alternative text: Lily58 keyboard layout diagram with highlighted keys
  Left hand:
    〔    〕〔    〕〔    〕〔    〕〔    〕〔    〕
    〔    〕〔    〕〔    〕〔    〕〔    〕〔    〕
    〔    〕〔 ⇧  〕〔 ⌘  〕〔 ⌥  〕〔 ⌃  〕〔    〕
    〔    〕〔    〕〔    〕〔    〕〔    〕〔    〕
    〔    〕〔    〕〔    〕〔    〕〔    〕
  Right hand:
    〔    〕〔    〕〔    〕〔⇧Tab〕〔Tab 〕〔 ⌫  〕
    〔 W⌫ 〕〔 W← 〕〔WSel〕〔    〕〔 W→ 〕〔    〕
    〔 ⌦  〕〘 ←  〙〘 ↑  〙〘 ↓  〙〘 →  〙〔 ↵  〕
    〔    〕〔Home〕〔PgUp〕〔PgDn〕〔End 〕〔    〕
    〔    〕〔    〕〔L(n)〕〔    〕〔    〕</pre>

<p><span>Yes, the Up and Down arrows are in that order — opposite of Vim style. I think it’s more logical this way.</span></p>

<p>Above the arrow keys are the <em>word navigation</em> keys. These operate on <em>words</em> rather than individual letters.</p>

<pre>Interactive content: <a href="https://leanrada.com/notes/my-personalised-keyboard?ref=rss">Visit the website to play with interactive content!</a>
Alternative text: Lily58 keyboard layout diagram with highlighted keys
  Left hand:
    〔    〕〔    〕〔    〕〔    〕〔    〕〔    〕
    〔    〕〔    〕〔    〕〔    〕〔    〕〔    〕
    〔    〕〔 ⇧  〕〔 ⌘  〕〔 ⌥  〕〔 ⌃  〕〔    〕
    〔    〕〔    〕〔    〕〔    〕〔    〕〔    〕
    〔    〕〔    〕〔    〕〔    〕〔    〕
  Right hand:
    〔    〕〔    〕〔    〕〔⇧Tab〕〔Tab 〕〔 ⌫  〕
    〘 W⌫ 〙〘 W← 〙〘WSel〙〘    〙〘 W→ 〙〔    〕
    〔 ⌦  〕〔 ←  〕〔 ↑  〕〔 ↓  〕〔 →  〕〔 ↵  〕
    〔    〕〔Home〕〔PgUp〕〔PgDn〕〔End 〕〔    〕
    〔    〕〔    〕〔L(n)〕〔    〕〔    〕</pre>

<p>The <kbd>W←</kbd> and <kbd>W→</kbd> keys, for instance, let you move the cursor one word at a time.</p>

<video muted="" autoplay="" loop="" playsinline="" caption="Moving the cursor, one word at a time" data-src="/notes/my-personalised-keyboard/word-jump.mp4">
                <source src="https://leanrada.com/notes/my-personalised-keyboard/word-jump.mp4?ref=rss">

                Video: | Source: /notes/my-personalised-keyboard/word-jump.mp4

              </video>
<span>Moving the cursor, one word at a time</span>
<p>Word navigation works by using a lesser-known feature native to most desktop operating systems, which does exactly that — jumping to the next or previous word. On macOS, it’s the keyboard shortcuts <code>Option+Left</code> and <code>Option+Right</code>. On Linux, <code>Control+Left</code> and <code>Control+Right</code>. Depending on the current OS, these shortcuts are mapped to the word navigation <kbd>W←</kbd> and <kbd>W→</kbd> keys.</p>

<p>One of the other word keys is the <strong>Select Word</strong> <kbd>WSel</kbd> key, which selects the current word under the caret.</p>

<video muted="" autoplay="" loop="" playsinline="" aria-label="Word selection demo" alt="Word selection demo" data-src="/notes/my-personalised-keyboard/word-sel.mp4">
                <source src="https://leanrada.com/notes/my-personalised-keyboard/word-sel.mp4?ref=rss">

                Video: Word selection demo | Source: /notes/my-personalised-keyboard/word-sel.mp4

              </video>

<p>The <em>Select Word</em> key itself is just a macro. It’s composed of the following sequence of keystrokes:</p>

<ol>
              <li><kbd>W←</kbd></li>
              <li><kbd>W→</kbd></li>
              <li>Hold <code>Shift</code></li>
              <li><kbd>W←</kbd></li>
              <li>Release <code>Shift</code></li>
            </ol>

<p>Which results in a selection spanning the nearest word boundaries around the caret. There are edge cases with this macro (literally), but they’re not that annoying. This macro has been extremely useful.</p>

<p>The <strong>Delete Word</strong> <kbd>W⌫</kbd> key is just the <em>Select Word</em> macro + <em>Backspace</em> <kbd>⌫</kbd>.</p>

<p>These word navigation functions greatly increase text and code editing efficiency.</p>

<h2 id="numbers-">Numbers <img alt="" src="https://leanrada.com/notes/my-personalised-keyboard/number_layer_oled.png?ref=rss"></h2>

<pre>Interactive content: <a href="https://leanrada.com/notes/my-personalised-keyboard?ref=rss">Visit the website to play with interactive content!</a>
Alternative text: Lily58 keyboard layout diagram
  Left hand:
    〔    〕〔    〕〔    〕〔    〕〔    〕〔    〕
    〔    〕〔    〕〔    〕〔    〕〔    〕〔    〕
    〔    〕〔 ⇧  〕〔 ⌘  〕〔 ⌥  〕〔 ⌃  〕〔    〕
    〔    〕〔    〕〔    〕〔    〕〔    〕〔    〕
    〔    〕〔    〕〔    〕〔    〕〔    〕
  Right hand:
    〔    〕〔    〕〔    〕〔 *  〕〔 /  〕〔 ⌫  〕
    〔    〕〔    〕〔 7  〕〔 8  〕〔 9  〕〔 -  〕
    〔    〕〔 0  〕〔 4  〕〔 5  〕〔 6  〕〔 ↵  〕
    〔    〕〔 +  〕〔 1  〕〔 2  〕〔 3  〕〔 .  〕
    〔    〕〔    〕〔    〕〔L(#)〕〔    〕</pre>

<p>This layer contains numbers and some arithmetic operators laid out like a numpad on the right hand side. Convenient when doing calculations. Nothing special here.</p>

<h2 id="functions-">Functions <img alt="" src="https://leanrada.com/notes/my-personalised-keyboard/function_layer_oled.png?ref=rss"></h2>

<pre>Interactive content: <a href="https://leanrada.com/notes/my-personalised-keyboard?ref=rss">Visit the website to play with interactive content!</a>
Alternative text: Lily58 keyboard layout diagram
  Left hand:
    〔    〕〔QWERTY〕〔    〕〔    〕〔    〕〔    〕
    〔    〕〔    〕〔Linux〕〔    〕〔macOS〕〔    〕
    〔    〕〔 ⇧  〕〔 ⌘  〕〔 ⌥  〕〔 ⌃  〕〔    〕
    〔    〕〔    〕〔    〕〔    〕〔    〕〔    〕
    〔    〕〔    〕〔    〕〔    〕〔    〕
  Right hand:
    〔    〕〔    〕〔🔉- 〕〔🔊+ 〕〔🔅- 〕〔🔆+ 〕
    〔    〕〔    〕〔 ⏮️ 〕〔 ⏯️ 〕〔PrtScr〕〔 ⏭️ 〕
    〔    〕〔 🔇 〕〔FB0 〕〔FB1 〕〔FB2 〕〔FB3 〕
    〔    〕〔    〕〔    〕〔    〕〔    〕〔    〕
    〔    〕〔    〕〔    〕〔    〕〔L(f)〕</pre>

<p>The <strong>Function layer</strong> contains “functions”, or things that do stuff instead of inputting text. Volume buttons, brightness buttons, media controls, you name it.</p>

<p>And of course, the <em>Function</em> keys themselves (i.e., <code>F1</code>, <code>F2</code>, <code>F3</code>, …, <code>F12</code>) can be accessed from this layer, but they’re a <em>bit</em> hidden. The Function keys are entered through the four bit keys <kbd>FB0</kbd>, <kbd>FB1</kbd>, <kbd>FB2</kbd>, and <kbd>FB3</kbd> in a <em>bitwise</em> manner.</p>

<pre>Interactive content: <a href="https://leanrada.com/notes/my-personalised-keyboard?ref=rss">Visit the website to play with interactive content!</a>
Alternative text: Lily58 keyboard layout diagram with highlighted keys
  Left hand:
    〔    〕〔QWERTY〕〔    〕〔    〕〔    〕〔    〕
    〔    〕〔    〕〔Linux〕〔    〕〔macOS〕〔    〕
    〔    〕〔 ⇧  〕〔 ⌘  〕〔 ⌥  〕〔 ⌃  〕〔    〕
    〔    〕〔    〕〔    〕〔    〕〔    〕〔    〕
    〔    〕〔    〕〔    〕〔    〕〔    〕
  Right hand:
    〔    〕〔    〕〔🔉- 〕〔🔊+ 〕〔🔅- 〕〔🔆+ 〕
    〔    〕〔    〕〔 ⏮️ 〕〔 ⏯️ 〕〔PrtScr〕〔 ⏭️ 〕
    〔    〕〔 🔇 〕〘FB0 〙〘FB1 〙〘FB2 〙〘FB3 〙
    〔    〕〔    〕〔    〕〔    〕〔    〕〔    〕
    〔    〕〔    〕〔    〕〔    〕〔L(f)〕</pre>

<p>To illustrate the Function keys’ <strong>bitwise input method</strong>, take <code>F10</code> as an example. The number <strong>10</strong> equals 2<sup><strong>1</strong></sup>&nbsp;+&nbsp;2<sup><strong>3</strong></sup>, corresponding to bits 1 and 3. Therefore, to input <code>F10</code>, you simultaneously press the bit 1 key <kbd>FB1</kbd> and the bit 3 key <kbd>FB3</kbd>!</p>

<pre>Interactive content: <a href="https://leanrada.com/notes/my-personalised-keyboard?ref=rss">Visit the website to play with interactive content!</a>
Alternative text: interactive simulation of bitwise keyboard input</pre>
Demo! Here, the bit keys are mapped to QWER. You’ll need a keyboard for this.
<p>More details and demos in <a target="_blank" href="https://leanrada.com/notes/developing-bitwise-input-method?ref=rss">this post about how the bitwise input works</a>.</p>

<p>On the left side we have the OS switchers, providing the <kbd>macOS</kbd> &amp; <kbd>Linux</kbd> modes. The selected OS determines a lot of things, such as the primary modifier (either <code>Control</code> or <code>Command</code>) and some desktop shortcuts.</p>

<pre>Interactive content: <a href="https://leanrada.com/notes/my-personalised-keyboard?ref=rss">Visit the website to play with interactive content!</a>
Alternative text: Lily58 keyboard layout diagram with highlighted keys
  Left hand:
    〔    〕〘QWERTY〙〔    〕〔    〕〔    〕〔    〕
    〔    〕〔    〕〘Linux〙〘    〙〘macOS〙〔    〕
    〔    〕〔 ⇧  〕〔 ⌘  〕〔 ⌥  〕〔 ⌃  〕〔    〕
    〔    〕〔    〕〔    〕〔    〕〔    〕〔    〕
    〔    〕〔    〕〔    〕〔    〕〔    〕
  Right hand:
    〔    〕〔    〕〔🔉- 〕〔🔊+ 〕〔🔅- 〕〔🔆+ 〕
    〔    〕〔    〕〔 ⏮️ 〕〔 ⏯️ 〕〔PrtScr〕〔 ⏭️ 〕
    〔    〕〔 🔇 〕〔FB0 〕〔FB1 〕〔FB2 〕〔FB3 〕
    〔    〕〔    〕〔    〕〔    〕〔    〕〔    〕
    〔    〕〔    〕〔    〕〔    〕〔L(f)〕</pre>

<p>I don’t use Windows, so I didn’t support it.</p>

<p>Finally, the <kbd>QWERTY</kbd> button. Its function should be obvious enough, but we’ll get to that later.</p>

<h2 id="emojis-">Emojis <img alt="" src="https://leanrada.com/notes/my-personalised-keyboard/emoji_layer_oled.png?ref=rss"></h2>

<pre>Interactive content: <a href="https://leanrada.com/notes/my-personalised-keyboard?ref=rss">Visit the website to play with interactive content!</a>
Alternative text: Lily58 keyboard layout diagram
  Left hand:
    〔Cancel〕〔    〕〔    〕〔    〕〔    〕〔    〕
    〔    〕〔 😭 〕〔 👋 〕〔 🥺 〕〔 🎉 〕〔    〕
    〔    〕〔 😂 〕〔 😃 〕〔 🙂 〕〔 🤔 〕〔    〕
    〔    〕〔    〕〔    〕〔    〕〔    〕〔    〕
    〔    〕〔    〕〔    〕〔    〕〔    〕
  Right hand:
    〔L(e)〕〔 ‘  〕〔 ’  〕〔 “  〕〔 ”  〕〔 ❌  〕
    〔    〕〔 👈 〕〔 ☝  〕〔 👇 〕〔 👉 〕〔 👍 〕
    〔    〕〔 ←  〕〔 ↑  〕〔 ↓  〕〔 →  〕〔 ✔  〕
    〔    〕〔 ⬅  〕〔 ⬆  〕〔 ⬇  〕〔 ➡  〕〔 ✅  〕
    〔    〕〔    〕〔    〕〔    〕〔    〕</pre>

<p>Yep, an <strong>Emoji layer</strong>! 😃 <span>⬅ I typed that with my keyboard!</span> And other useful Unicode symbols.</p>

<p>I mapped the emojis so they line up with the base layer. For instance, 🎉 is on the same position as <kbd>p</kbd>, which can stand for “party”. 👋 on <kbd>w</kbd>ave. 🤔 on <kbd>t</kbd>hink. <code>✔</code> on <code>Enter</code>, and so on. Meanwhile, the arrow symbols correspond to the arrow keys in the Navigation layer.</p>

<p>The Emoji layer works a bit differently. It’s a <a target="_blank" href="https://docs.qmk.fm/#/one_shot_keys">one-shot layer<span>🡵</span></a> in QMK terms. That is, you don’t have to hold down the layer key <kbd>L(e)</kbd> to keep the layer active. It stays active until you select an emoji or you cancel. This allows the Emoji layer key to be tucked in the top corner without sacrificing comfort.</p>

<p>Being a one-shot layer also opens up the possibility of a new gesture, <em>double tap</em>. I’ve set it so that double tapping the Emoji key launches the desktop-level <strong>emoji picker</strong> for all of my other emoji needs.</p>

<img srcset="" sizes="" spec="100% [664) 664" loading="lazy" width="100%" data-placeholder="" src="https://leanrada.com/notes/my-personalised-keyboard/emoji-picker.png?ref=rss" caption="macOS Character Viewer (left) and Linux-based emoji-picker (right)">
<span>macOS Character Viewer (left) and Linux-based emoji-picker (right)</span>
<p>On macOS, it’s <code>Command+Control+Space</code> to bring up Character Viewer. On Windows (hypothetically), that’d be <code>Super+.</code> for the “emoji keyboard”. On Linux there is no standard emoji picker, so I installed one and bound it to some arbitrary shortcut. I’m not liking how the Linux one looks, but it’s what it is.</p>

<h2 id="oled-📺">OLED 📺</h2>

<img srcset="" sizes="" spec="100% [664) 664" loading="lazy" width="100%" data-placeholder="" src="https://leanrada.com/notes/my-personalised-keyboard/oled.jpg?ref=rss" alt="close-up photo of the OLED screen">

<p>I drew and implemented my own graphics for the keyboard’s built-in OLED. You’ve seen some of them from the examples above. The OLED shows the current active layer, the current OS mode, and any active modifiers.</p>

<img srcset="" sizes="" spec="100% [664) 664" loading="lazy" width="100%" data-placeholder="" src="https://leanrada.com/notes/my-personalised-keyboard/legend.png?ref=rss" alt="OLED icons legend">

<p>It has been a struggle to make legible tile graphics at a very low resolution, but I think they turned out fine for my purposes.</p>

<h2 id="layer-lock-🔒">Layer lock 🔒</h2>

<p>Sometimes it gets tiring to hold down a layer key for long. Like when browsing a web page, I would want to have Page Down and Page Up readily accessible.</p>

<p><em>Layer Lock</em> to the rescue. I used another of Getreuer’s modular QMK libraries, the <a target="_blank" href="https://getreuer.info/posts/keyboards/layer-lock/index.html"><strong>Layer Lock library</strong><span>🡵</span></a>, which was really easy to plug in.</p>

<h2 id="gaming-mode--qwerty-🎮">Gaming mode / QWERTY 🎮</h2>

<pre>Interactive content: <a href="https://leanrada.com/notes/my-personalised-keyboard?ref=rss">Visit the website to play with interactive content!</a>
Alternative text: Lily58 keyboard layout diagram
  Left hand:
    〔Esc 〕〔 1  〕〔 2  〕〔 3  〕〔 4  〕〔 5  〕
    〔 `  〕〔 Q  〕〔 W  〕〔 E  〕〔 R  〕〔 T  〕
    〔Tab 〕〔 A  〕〔 S  〕〔 D  〕〔 F  〕〔 G  〕
    〔 ⇧  〕〔 Z  〕〔 X  〕〔 C  〕〔 V  〕〔 B  〕
    〔 ⌃  〕〔 ⌥  〕〔 ❖  〕〔 ␣  〕〔    〕
  Right hand:
    〔 6  〕〔 7  〕〔 8  〕〔 9  〕〔 0  〕〔 ⌫  〕
    〔 Y  〕〔 U  〕〔 I  〕〔 O  〕〔 P  〕〔 -  〕
    〔 H  〕〔 J  〕〔 K  〕〔 L  〕〔 ↑  〕〔 ↵  〕
    〔 N  〕〔 M  〕〔 .  〕〔 ←  〕〔 ↓  〕〔 →  〕
    〔Cancel〕〔 ␣  〕〔 ◆  〕〔    〕〔Chat〕</pre>

<p>I play video games on my computer. Games almost always default to a QWERTY layout, and I couldn’t be bothered to remap the keybindings to my own keyboard layout.</p>

<p>Thus, <strong>QWERTY mode</strong>.</p>

<p>The interesting bit here is the <kbd>Chat</kbd> key, which temporarily activates the base layer for the purpose of chatting in-game. Upon sending a message (on <code>Enter</code>), it reverts back to QWERTY mode so I can get back to the action in no time.</p>

<p>It’s not perfect. When gaming with a mouse, I don’t have access to the right half of the keyboard, as it becomes either too far or inconvenient to reach. It’s a problem if, say, I needed to press the number <kbd>6</kbd> to activate the 6th item in my inventory.</p>

<p>Often I end up remapping keybindings anyway, just to fit them within the left half.</p>

<h2 id="conclusion">Conclusion</h2>

<p>Programming my keyboard was definitely worth it. You see, I get wrist and upper back pain sometimes. Part of the job, I guess. It helps to have a split keyboard, so I can position my arms and hands in a natural position.</p>

<h3 id="ergonomics">Ergonomics</h3>

<p>In a regular keyboard, you kinda squeeze your hands together, and the wrists insists on twisting which plants the seeds of suffering and despair. That wouldn’t be a problem if each hand has its own separate half of the keyboard as in a split keyboard.</p>

<img srcset="" sizes="" spec="100% [664) 664" loading="lazy" width="100%" data-placeholder="" src="https://leanrada.com/notes/my-personalised-keyboard/desk.jpg?ref=rss" caption="My desk setup.">
<span>My desk setup.</span>
<p>The distance between both halves can also be <span aria-label="widened">&nbsp;w&nbsp;i&nbsp;d&nbsp;e&nbsp;n&nbsp;e&nbsp;d&nbsp;</span> which, in turn, widens my shoulders and counters the slouch of the upper back. <em>Fight the slouch, to fight the ouch</em>. It also helps that overall finger movement is reduced, thanks to the customised keyboard layout.</p>

<h3 id="layout">Layout</h3>

<p>It wasn’t easy adjusting to a completely new keyboard layout. I even made <a target="_blank" href="https://leanrada.com/notes/my-personalised-keyboard/layers.pdf?ref=rss">cheatsheets</a> for my own reference. I only got comfortable with it after about 2 months of daily use. Today, I still don’t type as fast as I was before with QWERTY, and I don’t think I ever will be, but I choose comfort over speed. :)</p>

<p>A lot of people say they found it difficult to come back to a regular QWERTY keyboard (like when using a laptop away from their desks), but I did not find it difficult myself. Somehow, I retained my QWERTY muscle memory. I’m guessing it’s because I used a completely different layout, Colemak, on my split keyboard so my brain didn’t confuse it with my existing QWERTY pathways.</p>

<p>It’s also interesting that I struggled typing with QWERTY on <em>this</em> keyboard (I used QWERTY at first before trying Colemak). And that it was easier to learn Colemak than relearn QWERTY on this keyboard.</p>

<p>I think it’s like how you don’t confuse using a mouse with using a touchpad — <em>they’re different pathways</em>. So my advice is to use a completely different layout when trying out a new ortholinear or split keyboard.</p>

<h3 id="fun">Fun</h3>

<p>There’s a fun aspect to it too. Well, if tinkering with a keyboard and optimising it is your idea of fun… I knew I was going to like having a programmable keyboard because of my experience with the Steam Controller which was a kind of a programmable controller in a sense. I might have overdone it with the layers, but in the end it works for me.</p>

<p>As a bonus, I get to practice my C programming skills!</p>

<p>tl;dr:</p>

<ul>
              <li>Comfort 👍</li>
              <li>Speed ❌</li>
              <li>Efficiency ✅</li>
              <li>“Fun” ✅</li>
              <li>Coding practice ✅</li>
            </ul>
]]></description>
            <link>https://leanrada.com/notes/my-personalised-keyboard?ref=rss</link>
            <guid isPermaLink="true">https://leanrada.com/notes/my-personalised-keyboard?ref=rss</guid>
            <pubDate>Fri, 01 Dec 2023 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Baybayin calligraphy generator]]></title>
            <description><![CDATA[
<h1 id="guhitkudlit">GuhitKudlit</h1>

<img srcset="" sizes="" spec="100% [664) 664" loading="lazy" width="100%" data-placeholder="" alt="preview" src="https://leanrada.com/wares/guhit-kudlit/pakita.png?ref=rss">

<h2 id="baybayin-calligraphy-generator">Baybayin calligraphy generator</h2>

<p><a target="_blank" href="https://leanrada.com/guhit-kudlit/">GuhitKudlit<span>🡵</span></a> is a webapp that generates <em>baybayin</em> calligraphy.</p>

<p><a target="_blank" href="https://en.wikipedia.org/wiki/Baybayin">Baybayin<span>🡵</span></a> is an ancient writing system used in the Philippines, mostly for the Tagalog language. I’ve always been fascinated by Philippine languages, and this project was just another fruit of that curiosity.</p>
<aside>
              <div>
                <div>Project details</div>
                <a target="_blank" tag="a" href="https://leanrada.com/guhit-kudlit/">
                  Open the app
                </a>
              </div>
              <div>
                <div>
                  <div>released</div>
                  <div>2023</div>
                </div>
                <div>
                  <div>role</div>
                  <div>creator</div>
                </div>
                <div>
                  <div>platform</div>
                  <div>Web</div>
                </div>
                <div>
                  <div>tech</div>
                  <div>JS</div>
                </div>
              </div>
            </aside>
<img srcset="" sizes="" spec="100% [664) 664" loading="lazy" width="100%" data-placeholder="" alt="Generated baybayin calligraphy of the word ‘guhit’" src="https://leanrada.com/wares/guhit-kudlit/guhit.png?ref=rss" caption="Output of GuhitKudlit for the word ‘guhit’">
<span>Output of GuhitKudlit for the word ‘guhit’</span>
<p>The name comes from <em>‘guhit’</em> meaning line or drawing, and <em>‘kudlit’</em> meaning tick or small mark.</p>

<p>You see, baybayin is an <a target="_blank" href="https://en.wikipedia.org/wiki/Abugida">abugida<span>🡵</span></a> and in baybayin, the <em>kudlit</em> is used to signify the vowel of a character.</p>

<img srcset="" sizes="" spec="100% [664) 664" loading="lazy" width="100%" data-placeholder="" alt="chart of baybayin characters" src="https://leanrada.com/wares/guhit-kudlit/baybayin-chart.png?ref=rss" caption="Chart of baybayin characters from Wikimedia">
<span>Chart of baybayin characters from Wikimedia</span>
<p>The program is divided into two functions: <strong>transliteration</strong> and <strong>calligraphy</strong>. The transliteration process converts ASCII input to baybayin glyphs, and the calligraphy function draws those glyphs onto the canvas using the <a target="_blank" href="https://p5js.org/">p5.js library<span>🡵</span></a>.</p>

<h2 id="transliteration">Transliteration</h2>

<p>The transliteration algorithm that converts ASCII text to baybayin glyphs is quite simple (or should I say, simplistic?). It processes the input letter-by-letter, and produces output one syllable at a time.</p>

<video muted="" autoplay="" loop="" playsinline="" aria-label="video of transliteration" alt="video of transliteration" data-src="/wares/guhit-kudlit/transliteration.mp4">
                <source src="https://leanrada.com/wares/guhit-kudlit/transliteration.mp4?ref=rss">

                Video: video of transliteration | Source: /wares/guhit-kudlit/transliteration.mp4

              </video>

<p>This works great for Tagalog words, not so much for English which has arbitrary rules on syllables &amp; pronunciation. Thus, the converter was only intended to primarily work in Tagalog.</p>

<p>For example, Tagalog doesn’t have a letter for the “j” sound (Compare Japanese, which has no direct “L” sound). The transliteration function deliberately does not handle these cases to avoid misspellings and false assumptions. If you attempt to put in foreign letters, an error will stop you.</p>

<img srcset="" sizes="" spec="100% [664) 664" loading="lazy" width="100%" data-placeholder="" alt="screenshot of error message, saying 'Cannot unambiguously convert this letter. There is no direct baybayin equivalent for the said letter. You can write it first in the Tagalog alphabet (abakada).'" src="https://leanrada.com/wares/guhit-kudlit/ceres.png?ref=rss">

<p>One thing I’ve noticed in other baybayin converters online was that their outputs were <em>opaque</em>. That is, if you can’t read baybayin, you can’t verify the output. This would sometimes trick people into getting silly mispelled tattoos and stuff. While that’s their fault for being ignorant, we can do better.</p>

<img srcset="" sizes="" spec="100% [664) 664" loading="lazy" width="100%" data-placeholder="" alt="example of syllabication. tilapia, ti-la-pi-ya" src="https://leanrada.com/wares/guhit-kudlit/tilapia.png?ref=rss">

<p>GuhitKudlit makes the transliteration process transparent by showing the resulting syllabication, which one-to-one maps to baybayin glyphs. This should allow users to double-check their results and make adjustments.</p>

<p>The module had a single-file test suite:</p>

<pre><code><span>import</span> <span>{</span> baybayin <span>}</span> <span>from</span> <span>"./baybay.mjs"</span><span>;</span>

<span>// Karaniwan</span>
<span>dapat</span><span>(</span><span>baybayin</span><span>(</span><span>"aso"</span><span>)</span><span>)</span><span>.</span><span>ay</span><span>(</span><span>[</span><span>"a"</span><span>,</span> <span>"su"</span><span>]</span><span>)</span><span>;</span>
<span>dapat</span><span>(</span><span>baybayin</span><span>(</span><span>"pusa"</span><span>)</span><span>)</span><span>.</span><span>ay</span><span>(</span><span>[</span><span>"pu"</span><span>,</span> <span>"sa"</span><span>]</span><span>)</span><span>;</span>
<span>dapat</span><span>(</span><span>baybayin</span><span>(</span><span>"araw"</span><span>)</span><span>)</span><span>.</span><span>ay</span><span>(</span><span>[</span><span>"a"</span><span>,</span> <span>"da"</span><span>,</span> <span>"w"</span><span>]</span><span>)</span><span>;</span>
<span>dapat</span><span>(</span><span>baybayin</span><span>(</span><span>"elepante"</span><span>)</span><span>)</span><span>.</span><span>ay</span><span>(</span><span>[</span><span>"i"</span><span>,</span> <span>"li"</span><span>,</span> <span>"pa"</span><span>,</span> <span>"n"</span><span>,</span> <span>"ti"</span><span>]</span><span>)</span><span>;</span>
<span>dapat</span><span>(</span><span>baybayin</span><span>(</span><span>"bantay"</span><span>)</span><span>)</span><span>.</span><span>ay</span><span>(</span><span>[</span><span>"ba"</span><span>,</span> <span>"n"</span><span>,</span> <span>"ta"</span><span>,</span> <span>"y"</span><span>]</span><span>)</span><span>;</span>
<span>dapat</span><span>(</span><span>baybayin</span><span>(</span><span>"daan"</span><span>)</span><span>)</span><span>.</span><span>ay</span><span>(</span><span>[</span><span>"da"</span><span>,</span> <span>"a"</span><span>,</span> <span>"n"</span><span>]</span><span>)</span><span>;</span>
<span>dapat</span><span>(</span><span>baybayin</span><span>(</span><span>"doon"</span><span>)</span><span>)</span><span>.</span><span>ay</span><span>(</span><span>[</span><span>"du"</span><span>,</span> <span>"u"</span><span>,</span> <span>"n"</span><span>]</span><span>)</span><span>;</span>
<span>dapat</span><span>(</span><span>baybayin</span><span>(</span><span>"biik"</span><span>)</span><span>)</span><span>.</span><span>ay</span><span>(</span><span>[</span><span>"bi"</span><span>,</span> <span>"i"</span><span>,</span> <span>"k"</span><span>]</span><span>)</span><span>;</span>
<span>dapat</span><span>(</span><span>baybayin</span><span>(</span><span>"kailan"</span><span>)</span><span>)</span><span>.</span><span>ay</span><span>(</span><span>[</span><span>"ka"</span><span>,</span> <span>"i"</span><span>,</span> <span>"la"</span><span>,</span> <span>"n"</span><span>]</span><span>)</span><span>;</span>
<span>dapat</span><span>(</span><span>baybayin</span><span>(</span><span>"baon"</span><span>)</span><span>)</span><span>.</span><span>ay</span><span>(</span><span>[</span><span>"ba"</span><span>,</span> <span>"u"</span><span>,</span> <span>"n"</span><span>]</span><span>)</span><span>;</span>
<span>dapat</span><span>(</span><span>baybayin</span><span>(</span><span>"baul"</span><span>)</span><span>)</span><span>.</span><span>ay</span><span>(</span><span>[</span><span>"ba"</span><span>,</span> <span>"u"</span><span>,</span> <span>"l"</span><span>]</span><span>)</span><span>;</span>
<span>dapat</span><span>(</span><span>baybayin</span><span>(</span><span>"kain"</span><span>)</span><span>)</span><span>.</span><span>ay</span><span>(</span><span>[</span><span>"ka"</span><span>,</span> <span>"i"</span><span>,</span> <span>"n"</span><span>]</span><span>)</span><span>;</span>
<span>dapat</span><span>(</span><span>baybayin</span><span>(</span><span>"upuan"</span><span>)</span><span>)</span><span>.</span><span>ay</span><span>(</span><span>[</span><span>"u"</span><span>,</span> <span>"pu"</span><span>,</span> <span>"a"</span><span>,</span> <span>"n"</span><span>]</span><span>)</span><span>;</span>

<span>// Di normal na baybay</span>
<span>dapat</span><span>(</span><span>baybayin</span><span>(</span><span>"tilapia"</span><span>)</span><span>)</span><span>.</span><span>ay</span><span>(</span><span>[</span><span>"ti"</span><span>,</span> <span>"la"</span><span>,</span> <span>"pi"</span><span>,</span> <span>"ya"</span><span>]</span><span>)</span><span>;</span>
<span>dapat</span><span>(</span><span>baybayin</span><span>(</span><span>"durian"</span><span>)</span><span>)</span><span>.</span><span>ay</span><span>(</span><span>[</span><span>"du"</span><span>,</span> <span>"di"</span><span>,</span> <span>"ya"</span><span>,</span> <span>"n"</span><span>]</span><span>)</span><span>;</span>

<span>// Bigkas na iba sa baybay</span>
<span>dapat</span><span>(</span><span>baybayin</span><span>(</span><span>"ng"</span><span>)</span><span>)</span><span>.</span><span>ay</span><span>(</span><span>[</span><span>"na"</span><span>,</span> <span>"ng"</span><span>]</span><span>)</span><span>;</span>
<span>dapat</span><span>(</span><span>baybayin</span><span>(</span><span>"mga"</span><span>)</span><span>)</span><span>.</span><span>ay</span><span>(</span><span>[</span><span>"ma"</span><span>,</span> <span>"nga"</span><span>]</span><span>)</span><span>;</span>
<span>// ...</span></code></pre>

<p>(Yes, I wrote all the code for this project in Tagalog)</p>

<p>The transliteration process is just one half of the program. It took me a a while to code it, but what I really wanted to make was the drawing algorithm. While transliteration is essential for a good user experience, the real show starts with the calligraphy algorithm.</p>

<h2 id="calligraphy">Calligraphy</h2>

<p>Once we have a sequence of baybayin glyphs, we can start drawing them on the canvas.</p>

<p>The calligraphy algorithm goes like this (heavily simplified):</p>

<ol start="0">
              <li>A brush head is simulated in 2D space. It has position, size, velocity, pressure, and other properties.</li>
              <li>The brush is continuously pulled along the canvas following the strokes of the current glyph. This simulation mimics natural movement and momentum.</li>
              <li>When the current glyph is finished, the brush head moves down the next available space to start drawing the next glyph, and so on.</li>
            </ol>

<video muted="" autoplay="" loop="" playsinline="" aria-label="video of calligraphy algorithm in action" alt="video of calligraphy algorithm in action" data-src="/wares/guhit-kudlit/calligraphy.mp4">
                <source src="https://leanrada.com/wares/guhit-kudlit/calligraphy.mp4?ref=rss">

                Video: video of calligraphy algorithm in action | Source: /wares/guhit-kudlit/calligraphy.mp4

              </video>

<p>There are four preset calligraphy styles. These variations are created by changing the parameters of the brush simulation, like acceleration, pressure, etc.</p>

<img srcset="" sizes="" spec="100% [664) 664" loading="lazy" width="100%" data-placeholder="" alt="screenshot of different calligraphy styles" src="https://leanrada.com/wares/guhit-kudlit/styles.png?ref=rss" caption="Different styles starting from top-left, clockwise: Modern, Classic, Dry brush, Chisel tip">
<span>Different styles starting from top-left, clockwise: Modern, Classic, Dry brush, Chisel tip</span>
<p>To define the vertices or waypoints that the brush head would follow, I started by decomposing baybayin into individual strokes and identified the common structural elements.</p>

<p>You know how Latin characters have something called “typography anatomy”? Things like ascenders, descenders, stems, bars, etc? These are elements common across Latin letters, like how the loop in ‘b’ is the same loop as in ‘p’, just with a different stem.</p>

<img srcset="" sizes="" spec="100% [664) 664" loading="lazy" width="100%" data-placeholder="" alt="Elements of Latin typography, partial anatomy" src="https://leanrada.com/wares/guhit-kudlit/latin-parts.png?ref=rss">

<p>Well, I tried to decompose baybayin in a similar way. A big inspiration came from others who have done the same before, like <a target="_blank" href="https://nordenx.blogspot.com/2014/04/saving-baybayin-through-technology.html">Nordenx<span>🡵</span></a>. However, for my specific purpose of constructing baybayin forms programmatically, my decomposition strategy is more about the reuse of common elements.</p>

<img srcset="" sizes="" spec="100% [664) 664" loading="lazy" width="100%" data-placeholder="" alt="Elements of Baybayin typography, partial anatomy" src="https://leanrada.com/wares/guhit-kudlit/baybayin-parts.png?ref=rss">

<p>Here’s a partial list of the typographical building blocks that I ended up with:</p>

<img srcset="" sizes="" spec="100% [664) 664" loading="lazy" width="100%" data-placeholder="" alt="My version of elements of Baybayin typography" src="https://leanrada.com/wares/guhit-kudlit/baybayin-elements.png?ref=rss">

<p>The decomposition is more apparent in code:</p>

<pre><code><span>const</span> talaguhitan <span>=</span> <span>{</span>
  <span>"a"</span><span>:</span> <span>[</span>
    <span>...</span>guhitYa<span>,</span>
    <span>[</span>guhitTuwid<span>,</span> <span>0.0</span><span>,</span> <span>0.4</span><span>,</span> <span>0.2</span><span>,</span> <span>0.4</span><span>,</span> <span>0.05</span><span>,</span> <span>-</span><span>0.05</span><span>,</span> <span>PUTOL</span><span>]</span><span>,</span>
  <span>]</span><span>,</span>
  <span>"i"</span><span>:</span> <span>[</span>
    <span>[</span>guhitAlon<span>,</span> <span>0.0</span><span>,</span> <span>0.2</span><span>,</span> <span>1.0</span><span>,</span> <span>0.2</span><span>,</span> <span>0.0</span><span>,</span> <span>0.1</span><span>,</span> <span>PUTOL</span><span>]</span><span>,</span>
    <span>[</span>guhitUlap<span>,</span> <span>0.0</span><span>,</span> <span>0.5</span><span>,</span> <span>1.0</span><span>,</span> <span>0.5</span><span>,</span> <span>0.0</span><span>,</span> <span>0.2</span><span>,</span> <span>PUTOL</span><span>]</span><span>,</span>
  <span>]</span><span>,</span>
  <span>"u"</span><span>:</span> <span>[</span>
    <span>[</span>guhitIlog<span>,</span> <span>0.3</span><span>,</span> <span>0.0</span><span>,</span> <span>0.3</span><span>,</span> <span>1.0</span><span>,</span> <span>0.4</span><span>,</span> <span>0.0</span><span>,</span> <span>PUTOL</span><span>]</span><span>,</span>
  <span>]</span><span>,</span>
  <span>"b"</span><span>:</span> <span>[</span>
    <span>[</span>guhitBundok<span>,</span> <span>0.0</span><span>,</span> <span>0.8</span><span>,</span> <span>0.5</span><span>,</span> <span>0.2</span><span>,</span> <span>1.0</span><span>,</span> <span>0.7</span><span>,</span> <span>0.1</span><span>,</span> <span>0.1</span><span>]</span><span>,</span>
    <span>[</span>guhitUlap<span>,</span> <span>DUGTONG</span><span>,</span> <span>DUGTONG</span><span>,</span> <span>0.05</span><span>,</span> <span>0.7</span><span>,</span> <span>0.0</span><span>,</span> <span>0.3</span><span>,</span> <span>PUTOL</span><span>]</span><span>,</span>
  <span>]</span><span>,</span>
  <span>// ...</span></code></pre>

<p>In the above code, baybayin glyphs (represented by Latin character keys) are defined by an array of elements. The numbers next to each element are parameters that vary the position &amp; form of the element.</p>

<p>Looking at <em>‘b’</em> (ᜊ), we can see that it’s composed of a <code>guhitBundok</code> connected (<code>DUGTONG</code>) to a <code>guhitUlap</code> below it. (“guhit” means stroke in this case)</p>

<pre><code><span>"b"</span><span>:</span> <span>[</span>
  <span>[</span>guhitBundok<span>,</span> <span>0.0</span><span>,</span> <span>0.8</span><span>,</span> <span>0.5</span><span>,</span> <span>0.2</span><span>,</span> <span>1.0</span><span>,</span> <span>0.7</span><span>,</span> <span>0.1</span><span>,</span> <span>0.1</span><span>]</span><span>,</span>
  <span>[</span>guhitUlap<span>,</span> <span>DUGTONG</span><span>,</span> <span>DUGTONG</span><span>,</span> <span>0.05</span><span>,</span> <span>0.7</span><span>,</span> <span>0.0</span><span>,</span> <span>0.3</span><span>,</span> <span>PUTOL</span><span>]</span><span>,</span>
<span>]</span><span>,</span></code></pre>

<p>Sometimes a character can even reuse another character, like <em>‘a’</em> (ᜀ) which is just <em>‘ya’</em> (ᜌ) with an extra <code>guhitTuwid</code> (straight stroke).</p>

<pre><code><span>"a"</span><span>:</span> <span>[</span>
  <span>...</span>guhitYa<span>,</span>
  <span>[</span>guhitTuwid<span>,</span> <span>0.0</span><span>,</span> <span>0.4</span><span>,</span> <span>0.2</span><span>,</span> <span>0.4</span><span>,</span> <span>0.05</span><span>,</span> <span>-</span><span>0.05</span><span>,</span> <span>PUTOL</span><span>]</span><span>,</span>
<span>]</span><span>,</span></code></pre>

<img srcset="" sizes="" spec="100% [664) 664" loading="lazy" width="100%" data-placeholder="" alt="Baybayin of the word ‘nagpaambon’" src="https://leanrada.com/wares/guhit-kudlit/nagpaambon.png?ref=rss" caption="Decomposition of baybayin in the word ᜈᜄ᜕ᜉᜀᜋ᜕ᜊᜓᜈ᜕ (‘nagpaambon’, ‘made something be rained on’)">
<span>Decomposition of baybayin in the word ᜈᜄ᜕ᜉᜀᜋ᜕ᜊᜓᜈ᜕ (‘nagpaambon’, ‘made something be rained on’)</span>
<p>You probably have inferred that these vertices are hardcoded, so the resulting calligraphy is not as dynamic as you might expect. One quick fix I added was to slightly warp them in certain directions with a bit of randomness, but it’s not great. This is something I could improve upon in a future iteration — e.g., make the brush movement purposeful, or arrange vertices with respect to other vertices across the whole word.</p>

<h2 id="end-note">End note</h2>

<p>This was a project that was hastily launched as a proof-of-concept. It was fun, but the codebase got quite spaghetti. The concept seems mildly successful, since it is now getting regular visitors (though, I have no idea what they actually do with it, I haven’t seen an output of this in the wild). Anyway, since this webapp looks useful, I intend to rewrite it with a better and more dynamic calligraphy algorithm. Maybe.</p>

<img srcset="" sizes="" spec="100% [664) 664" loading="lazy" width="100%" data-placeholder="" alt="Generated baybayin calligraphy of the word ‘padayon’" src="https://leanrada.com/wares/guhit-kudlit/padayon.png?ref=rss" caption="This post wouldn’t be complete without writing the now-clichéd word ‘padayon’ in baybayin.">
<span>This post wouldn’t be complete without writing the now-clichéd word ‘padayon’ in baybayin.</span>]]></description>
            <link>https://leanrada.com/wares/guhit-kudlit?ref=rss</link>
            <guid isPermaLink="true">https://leanrada.com/wares/guhit-kudlit?ref=rss</guid>
            <pubDate>Mon, 30 Oct 2023 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Debug CSS boxes with this bookmarklet]]></title>
            <description><![CDATA[
<p>Here’s a quick &amp; simple way to show all element bounds on a page.</p>

<pre><code><span>javascript</span><span>:</span><span>(</span>a<span>=</span><span>(</span>d<span>=</span>document<span>)</span><span>.</span><span>createElement</span><span>(</span><span>'style'</span><span>)</span><span>)</span><span>.</span>innerHTML<span>=</span><span>'*{outline:solid 1px red}'</span><span>;</span>d<span>.</span>head<span>.</span><span>append</span><span>(</span>a<span>)</span></code></pre>

<p>The bookmarklet: <a target="_self" href="https://leanrada.com/notes/debug-css-boxes-bookmarklet/javascript:(a=(d=document).createElement('style')).innerHTML='*{outline:solid 1px red}';d.head.append(a)?ref=rss"><strong>▤outlinify</strong></a></p>

<img srcset="" sizes="" spec="100% [800) 70% [1750) 1225" loading="lazy" width="400%" src="https://leanrada.com/notes/debug-css-boxes-bookmarklet/example.png?ref=rss" media-class="u-media" type="bleed" caption="Example result on threads.net" alt="example of a website with element outlines visible">
<span>Example result on threads.net</span>
<p>Not sure how to use it? Save or <em>drag</em> the following link into your bookmarks:</p>
<a target="_self" tag="aa" href="https://leanrada.com/notes/debug-css-boxes-bookmarklet/javascript:(a=(d=document).createElement('style')).innerHTML='*{outline:solid 1px red}';d.head.append(a)?ref=rss">
                ▤outlinify
              </a>☝
<video muted="" autoplay="" loop="" playsinline="" aria-label="video of dragging the bookmarklet into the bookmarks bar" type="windowed" alt="video of dragging the bookmarklet into the bookmarks bar" data-src="/notes/debug-css-boxes-bookmarklet/drag.web.mp4">
                  <source src="https://leanrada.com/notes/debug-css-boxes-bookmarklet/drag.web.mp4?ref=rss">

                  Video: video of dragging the bookmarklet into the bookmarks bar | Source: /notes/debug-css-boxes-bookmarklet/drag.web.mp4

                </video>

<p>If you prefer different styles:</p>

<ul>
              <li>Dashed: <a target="_self" tag="aa" href="https://leanrada.com/notes/debug-css-boxes-bookmarklet/javascript:(a=(d=document).createElement('style')).innerHTML='*{outline:dashed 1px red}';d.head.append(a)?ref=rss">
                  ▤outlinify
                </a></li>
              <li>Dotted: <a target="_self" tag="aa" href="https://leanrada.com/notes/debug-css-boxes-bookmarklet/javascript:(a=(d=document).createElement('style')).innerHTML='*{outline:dotted 1px red}';d.head.append(a)?ref=rss">
                  ▤outlinify
                </a></li>
            </ul>
]]></description>
            <link>https://leanrada.com/notes/debug-css-boxes-bookmarklet?ref=rss</link>
            <guid isPermaLink="true">https://leanrada.com/notes/debug-css-boxes-bookmarklet?ref=rss</guid>
            <pubDate>Sun, 15 Oct 2023 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Compressing a website into a URL]]></title>
            <description><![CDATA[<p><em>For RSS readers: This article contains interactive content available on the <a href="https://leanrada.com/notes/compressing-websites-into-urls?ref=rss">original post on leanrada.com</a>.</em></p>

<p>This post explains how <a target="_blank" href="https://kalabasa.github.io/portabl.ink/"><strong>portabl.ink</strong><span>🡵</span></a> works. Portablink is a tool that creates self-contained compressed web pages in a single link. Check <a target="_self" href="https://leanrada.com/wares/portabl.ink?ref=rss">portablink project page<span></span></a> for more info.</p>

<p>tl;dr: It uses <strong>data URLs</strong> containing <strong>compressed data</strong> which is bundled with its own <strong>decompression instructions</strong>.</p>

<h2 id="data-urls">Data URLs</h2>

<p>In case you aren’t familiar with <a target="_blank" href="https://en.wikipedia.org/wiki/Data_URI_scheme"><strong>data URLs</strong><span>🡵</span></a>, they are URLs whose contents are in the URL itself. They all start with <code>data:</code>. Here, let me show you with this <em>interactive</em> mock browser:</p>

<pre>Interactive content: <a href="https://leanrada.com/notes/compressing-websites-into-urls?ref=rss">Visit the website to play with interactive content!</a>
Alternative text: browser demo</pre>

<p><em>(Hint: edit the URL in the address bar!)</em></p>

<p>When you load a data URL, the browser shows the content embedded in the URL directly.</p>
<blockquote>
              <p>So, that’s it? Website in a URL?&nbsp;— Use data URLs! Easy!</p>
            </blockquote>
<p>Wait, there’s more! The portablink tool does some more things than just putting your HTML in a data URL. The tool also <strong>compresses</strong> your content so you don’t end up with humongous URLs.</p>

<h2 id="compression">Compression</h2>

<p>Within a data URL, the tool bundles both the compressed data <em>and</em> the instructions needed to decompress and bootstrap that data. This produces a self-contained, compressed document in a single portable link that can be decompressed and rendered by any modern browser.</p>

<p>Here’s an example URL generated by the tool:</p>

<pre><code>data:text/html,<span><span><span>&lt;</span>body</span> <span><span>onload</span><span><span>=</span><span>"</span><span>fetch<span><span>`</span><span>data:;base64,fVTfb5swEH7PX+HxUIFiEpJu0pRgpK0P68OyX8pDpSibDJhwqbGZbdrQpP/7DI7WpluDZPv8fb7Pd8dBXJqKJ3HJaJ7EBgxnyRJEi5aQhYbaIVk8dvhgEGvTdgZCqczbvV0RykHXnLazgrPdvEe2jTZQtGEmhWHCzDI7MeU4ymEjQjCs0id4Yc+GBa2At7MGQiUbkbMce9eg6AaERAuqGvRJmhIy9E3JLx7+3kB2q6nI8ZWsCqkMpXhBxZYqwN4HBZSjH04GLZbevxD6KHnu4SsbUmpdtGxUxkIrqMNaSdwbmikouggf7RhtFOSnSXeIS6CzQpuWhQ2zqfOmEnqmWM2o8S/xpFCBO3gPuSln76O7CoRDSgab0jyDusvSxhgp9k/F0fDAZtN3T24cBAuPvpGDUqlypmZacshRhFJOs9tTwZkwZZiVwHP/UgT4/3g4CfbP9ELOChMe4653rwqK4dtTPyPrl27x+NhC1nI913VSEudwhzJOtSZeV0mv67HY3YAgJ14UeUk8dsBLbnKGm57hoskZzTPc9AwXTc9onuGmJ1w8tvXoagTVBmmVEc9DUjClpCLegDODAG/xLa6wIqsIT/B0jUty8buRZg7CHrxeLj67LTZKkAg/kFxmTWW/uFFX8FW5HuB7UpNEM7OEisnG+L9IsqecKePXQ+dsm1XoN84O5i8VyMMjnkRRMMCU+DaggCT2ja/ccTcPYbi1N2XEah+Jm2NcbvnqlvWoorVvw/HVSMuK+S1J1IjdMdX6O5JQf4fboLuS1MHhcMK0ePcKszvDTMO/XBBc0Kqe99O9b/cD1UcDXQidsbVhpSRJR1Jk3P5zumRS63w4+N1yrPvNMZWVLfhPMlnjzLfSPu0rY59B/4L7Zh/3/9w/</span><span>`</span></span><span>.</span><span>then</span><span>(</span><span>a</span><span>=&gt;</span><span>new</span> <span>Response</span><span>(</span>a<span>.</span>body<span>.</span><span>pipeThrough</span><span>(</span><span>new</span> <span>DecompressionStream</span><span>(</span><span><span>`</span><span>deflate-raw</span><span>`</span></span><span>)</span><span>)</span><span>)</span><span>.</span><span>text</span><span>(</span><span>)</span><span>.</span><span>then</span><span>(</span><span>a</span><span>=&gt;</span>document<span>.</span>documentElement<span>.</span>innerHTML<span>=</span>a<span>)</span><span>)</span></span><span>"</span></span></span><span>&gt;</span></span></code></pre>

<p>The URL above is 1,078 bytes. It was compressed from a source doc of size 1.37 KB, which is a 23% compression!</p>

<p>Btw, the above URL loads a simple tic-tac-toe web game. See for yourself by copying it into your browser’s address bar.</p>

<h2 id="so-how-does-it-work">So, how does it work?</h2>

<p>The embedded document contains a singular <code>&lt;body&gt;</code> tag with an <code>onload</code> callback. The callback itself contains the main script that will decompress and render the desired content.</p>

<p>A small point: Why <code>onload</code>? Well, it’s shorter than using a <code>&lt;script&gt;</code> tag.</p>

<pre><code>A: <span><span><span>&lt;</span>body</span> <span><span>onload</span><span><span>=</span><span>"</span><span><span>/* code */</span></span><span>"</span></span></span><span>&gt;</span></span>
B: <span><span><span>&lt;</span>script</span><span>&gt;</span></span><span><span><span>/* code */</span></span></span><span><span><span>&lt;/</span>script</span><span>&gt;</span></span></code></pre>

<p>The closing tag is optional for <code>body</code> but not for <code>script</code>. In the end, the <code>body</code> tag wins by 1 character! Every character - in a URL - is precious.</p>
<span>
              <code>&lt;img onerror="..."&gt;</code> would’ve worked as well, having equal length as the <code>body</code> option.
            </span>
<p>Now, with that out of the way, let’s break the main script down. I’ll plop the prettified code here first, then explain the interesting bits.</p>

<pre><code><span>fetch</span><span>(</span>
  <span><span>`</span><span>data:;base64,fVTfb5swEH7PX+HxUIFiEpJu0pRgpK0P68OyX8pDpSibDJhwqbGZbdrQpP/7DI7WpluDZPv8fb7Pd8dBXJqKJ3HJaJ7EBgxnyRJEi5aQhYbaIVk8dvhgEGvTdgZCqczbvV0RykHXnLazgrPdvEe2jTZQtGEmhWHCzDI7MeU4ymEjQjCs0id4Yc+GBa2At7MGQiUbkbMce9eg6AaERAuqGvRJmhIy9E3JLx7+3kB2q6nI8ZWsCqkMpXhBxZYqwN4HBZSjH04GLZbevxD6KHnu4SsbUmpdtGxUxkIrqMNaSdwbmikouggf7RhtFOSnSXeIS6CzQpuWhQ2zqfOmEnqmWM2o8S/xpFCBO3gPuSln76O7CoRDSgab0jyDusvSxhgp9k/F0fDAZtN3T24cBAuPvpGDUqlypmZacshRhFJOs9tTwZkwZZiVwHP/UgT4/3g4CfbP9ELOChMe4653rwqK4dtTPyPrl27x+NhC1nI913VSEudwhzJOtSZeV0mv67HY3YAgJ14UeUk8dsBLbnKGm57hoskZzTPc9AwXTc9onuGmJ1w8tvXoagTVBmmVEc9DUjClpCLegDODAG/xLa6wIqsIT/B0jUty8buRZg7CHrxeLj67LTZKkAg/kFxmTWW/uFFX8FW5HuB7UpNEM7OEisnG+L9IsqecKePXQ+dsm1XoN84O5i8VyMMjnkRRMMCU+DaggCT2ja/ccTcPYbi1N2XEah+Jm2NcbvnqlvWoorVvw/HVSMuK+S1J1IjdMdX6O5JQf4fboLuS1MHhcMK0ePcKszvDTMO/XBBc0Kqe99O9b/cD1UcDXQidsbVhpSRJR1Jk3P5zumRS63w4+N1yrPvNMZWVLfhPMlnjzLfSPu0rY59B/4L7Zh/3/9w/</span><span>`</span></span>
<span>)</span>
<span>.</span><span>then</span><span>(</span><span>compressedHtml</span> <span>=&gt;</span>
  <span>new</span> <span>Response</span><span>(</span>
    compressedHtml<span>.</span>body
      <span>.</span><span>pipeThrough</span><span>(</span><span>new</span> <span>DecompressionStream</span><span>(</span><span><span>`</span><span>deflate-raw</span><span>`</span></span><span>)</span><span>)</span>
  <span>)</span>
  <span>.</span><span>text</span><span>(</span><span>)</span>
  <span>.</span><span>then</span><span>(</span><span>html</span> <span>=&gt;</span>
    document<span>.</span>documentElement<span>.</span>innerHTML <span>=</span> html
  <span>)</span>
<span>)</span></code></pre>

<h3 id="1-fetchdatabase64fvtfb5sweh">1. fetch(`data:;base64,fVTfb5swEH...`)</h3>

<p>The first thing you’ll notice is the huge chunk of base64-encoded data wrapped in a <code>fetch()</code> call.</p>

<p>The encoded data is the compressed HTML which has been prepared by a complementary compression script. Since compressed data is binary, it has been encoded in a text-friendly format for it to be a valid URL. Base64, an encoding that’s native to the web, was used for this purpose.</p>

<p>To decode the base64 data, instead of using the standard <a target="_blank" href="https://developer.mozilla.org/en-US/docs/Web/API/atob"><code>atob()</code><span>🡵</span></a> function, <code>fetch()</code> was used. <code>fetch</code> sees the <code>;base64</code> flag in that data URL and decodes it natively. </p>

<p>While it accomplishes the same thing as <code>atob</code>, <code>fetch</code> is slightly better, because:</p>

<ol>
              <li><code>fetch()</code> outputs a stream, the format needed for decompression later.</li>
              <li>Code size. We’re optimising for the total URL length. The <code>atob</code> method requires <a target="_blank" href="https://developer.mozilla.org/en-US/docs/Glossary/Base64#the_unicode_problem">extra massaging for Unicode<span>🡵</span></a>.</li>
            </ol>

<p>Here’s a quick length comparison. A is fetch. B is atob. Below is a character ruler with markings.</p>

<pre><code><span>A</span><span>:</span> fetch<span><span>`</span><span>data:;base64,dVo=</span><span>`</span></span><span>.</span><span>then</span><span>(</span><span>a</span><span>=&gt;</span>a<span>.</span>body<span>)</span>
<span>B</span><span>:</span> <span>new</span> <span>Blob</span><span>(</span><span>[</span>Uint8Array<span>.</span><span>from</span><span>(</span>atob<span><span>`</span><span>dVo=</span><span>`</span></span><span>,</span><span>a</span><span>=&gt;</span>a<span>.</span><span>codePointAt</span><span>(</span><span>0</span><span>)</span><span>)</span><span>]</span><span>)</span><span>.</span><span>stream</span><span>(</span><span>)</span>
                                          <span>^</span>                           <span>^</span>
                                          <span>A</span>                           <span>B</span>
   <span>0</span>        <span>10</span>        <span>20</span>        <span>30</span>        <span>40</span>        <span>50</span>        <span>60</span>       
   <span>12345678901234567890123456789012345678901234567890123456789012345678</span></code></pre>

<p>The <code>atob()</code> method requires additional 28 characters!</p>
<span>
              <strong><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#tagged_templates">Tagged templates</a></strong> can be abused here to save a couple of characters. Instead of <code>fetch("abc")</code>, we can use <code>fetch`abc`</code>!
            </span>
<p>Here is the code described so far:</p>

<pre><code><span><span> </span> <span>/* wrap the compressed data in base64 */</span>
<span> </span> <span>fetch</span><span>(</span><span><span>`</span><span>data:;base64,fVTfb5swEH7PX+HxUIFiEpJu0pRgpK0P68Oy...</span><span>`</span></span><span>)</span>
<span> </span> <span>.</span><span>then</span><span>(</span><span>compressedHtml</span> <span>=&gt;</span>
<span> </span>   <span>/* a binary stream of the compressed data is given by body */</span>
<span> </span>   compressedHtml<span>.</span>body
<span> </span> <span>)</span></span></code></pre>

<h3 id="2-bodypipethroughnew-decompressionstream">2. body.pipeThrough(new DecompressionStream(...))</h3>

<p>Next thing to note is the <code>DecompressionStream</code> class. This is from the new <a target="_blank" href="https://developer.mozilla.org/en-US/docs/Web/API/Compression_Streams_API"><strong>Compression Streams API</strong><span>🡵</span></a> which allows browser native compression and decompression. This saves a lot of decompression code from being bundled with the URL.</p>

<p>As of writing, this API can only consume streams. That’s why the code required streams.</p>

<p>Continuing. The <code>body</code> stream containing the compressed data is piped through the decompressor, which results in the uncompressed, original HTML string - in a <em>stream</em>.</p>

<pre><code><span><span> </span> <span>fetch</span><span>(</span><span><span>`</span><span>data:;base64,fVTfb5swEH7PX+HxUIFiEpJu0pRgpK0P68Oy...</span><span>`</span></span><span>)</span>
<span> </span> <span>.</span><span>then</span><span>(</span><span>compressedHtml</span> <span>=&gt;</span>
</span><span><span>-</span>   compressedHtml<span>.</span>body
</span><span><span>+</span>   <span>/* this results in a stream of the original HTML */</span>
<span>+</span>   compressedHtml<span>.</span>body
<span>+</span>     <span>.</span><span>pipeThrough</span><span>(</span><span>new</span> <span>DecompressionStream</span><span>(</span><span><span>`</span><span>deflate-raw</span><span>`</span></span><span>)</span><span>)</span>
</span><span><span> </span> <span>)</span></span></code></pre>

<p><code>deflate-raw</code> is the compression algorithm. The same algorithm must be specified for both compression and decompression.</p>

<p>To convert the decompressed stream to a usable <em>string</em>, we can use...</p>

<h3 id="3-new-responsestreamtext">3. new Response(stream).text()</h3>

<p>We can abuse the native <a target="_blank" href="https://developer.mozilla.org/en-US/docs/Web/API/Response="><strong>Response</strong><span>🡵</span></a> class’s <code>text()</code> function to convert the stream into a string.</p>

<pre><code><span><span> </span> <span>fetch</span><span>(</span><span><span>`</span><span>data:;base64,fVTfb5swEH7PX+HxUIFiEpJu0pRgpK0P68Oy...</span><span>`</span></span><span>)</span>
<span> </span> <span>.</span><span>then</span><span>(</span><span>compressedHtml</span> <span>=&gt;</span>
</span><span><span>+</span>   <span>/* a Response wrapper will be used to decode into text */</span>
<span>+</span>   <span>new</span> <span>Response</span><span>(</span>
</span><span><span> </span>     compressedHtml<span>.</span>body
<span> </span>       <span>.</span><span>pipeThrough</span><span>(</span><span>new</span> <span>DecompressionStream</span><span>(</span><span><span>`</span><span>deflate-raw</span><span>`</span></span><span>)</span><span>)</span>
</span><span><span>+</span>   <span>)</span>
<span>+</span>   <span>/* decode stream into text */</span>
<span>+</span>   <span>.</span><span>text</span><span>(</span><span>)</span>
</span><span><span> </span> <span>)</span></span></code></pre>

<h3 id="4-documentdocumentelementinnerhtml--html">4. document.documentElement.innerHTML = html</h3>

<p>Finally, the uncompressed HTML in string form is assigned to the whole document. <code>document.write(html)</code> could have been used here, but some browsers don’t like this function. <code>innerHTML</code> works equivalently well.</p>

<p>This brings us to the final form:</p>

<pre><code><span><span> </span> <span>fetch</span><span>(</span><span><span>`</span><span>data:;base64,fVTfb5swEH7PX+HxUIFiEpJu0pRgpK0P68Oy...</span><span>`</span></span><span>)</span>
<span> </span> <span>.</span><span>then</span><span>(</span><span>compressedHtml</span> <span>=&gt;</span>
<span> </span>   <span>new</span> <span>Response</span><span>(</span>
<span> </span>     compressedHtml<span>.</span>body
<span> </span>       <span>.</span><span>pipeThrough</span><span>(</span><span>new</span> <span>DecompressionStream</span><span>(</span><span><span>`</span><span>deflate-raw</span><span>`</span></span><span>)</span><span>)</span>
<span> </span>   <span>)</span>
<span> </span>   <span>.</span><span>text</span><span>(</span><span>)</span>
</span><span><span>+</span>   <span>.</span><span>then</span><span>(</span><span>html</span> <span>=&gt;</span>
<span>+</span>     <span>/* replace page with decoded html */</span>
<span>+</span>     document<span>.</span>documentElement<span>.</span>innerHTML <span>=</span> html
<span>+</span>   <span>)</span>
</span><span><span> </span> <span>)</span></span></code></pre>

<p>I’m pretty sure the above code could be minified further, but this is the smallest I could make it.</p>

<h2 id="preparing-the-compressed-code">Preparing the compressed code</h2>

<p>The above describes the process of <em>decompressing</em> the base64-encoded compressed HTML. Where does that compressed HTML string come from?</p>

<p>The following function creates the base64-encoded compressed string from an input HTML:</p>

<pre><code><span>async</span> <span>function</span> <span>formatPayload</span><span>(</span><span>html</span><span>)</span> <span>{</span>
  <span>const</span> compressed <span>=</span> <span>await</span> <span>new</span> <span>Response</span><span>(</span>
    <span>new</span> <span>Blob</span><span>(</span><span>[</span>html<span>]</span><span>)</span>
      <span>.</span><span>stream</span><span>(</span><span>)</span>
      <span>.</span><span>pipeThrough</span><span>(</span><span>new</span> <span>CompressionStream</span><span>(</span><span>'deflate-raw'</span><span>)</span><span>)</span>
  <span>)</span><span>.</span><span>arrayBuffer</span><span>(</span><span>)</span><span>;</span>
  <span>return</span> <span>btoa</span><span>(</span>String<span>.</span><span>fromCharCode</span><span>(</span><span>...</span><span>new</span> <span>Uint8Array</span><span>(</span>compressed<span>)</span><span>)</span><span>)</span><span>;</span>
<span>}</span></code></pre>

<p>This function is called at authoring time.</p>

<p><span>It’s important to compress the data first before encoding it in base64. Doing it in the wrong order results in a larger size! This is because base64 messes with the byte (octet) alignment but the compression algorithm works in terms of bytes. In addition, base64 encoding in itself inflates the data by 33%.</span></p>

<h2 id="demo">Demo</h2>

<p>This demo was made using the portablink’s core library <code>https://kalabasa.github.io/portabl.ink/pack.js</code>.</p>

<p>Edit the HTML below!</p>
<textarea id="demoHTML" rows="8"></textarea>⬇<textarea id="demoURL" rows="8" readonly=""></textarea><script type="module" async="" defer="" src="/scripts/notes_compressing_websites_into_urls_index_html.js"></script>
<p><span>Note: If your input is not compressible enough, the overhead of bundling the decompression code might not be worth it. The tool may decide to use plain text, whichever is smaller.</span></p>

<p>Check out the full-fledged tool at <a target="_blank" href="https://kalabasa.github.io/portabl.ink/"><strong>portabl.ink</strong><span>🡵</span></a>! It’s got a WYSIWYG editor, pretty pages, and more!</p>

<h2 id="conclusion">Conclusion</h2>

<p>Portablink was a fun weekend project (actually about a week). I learned about new Web APIs and some <a target="_blank" href="https://en.wikipedia.org/wiki/Code_golf">code golfing<span>🡵</span></a> techniques. I launched a “product”!</p>

<p>Potential improvement(s):</p>

<ul>
              <li>Use <a target="_blank" href="https://github.com/kevinAlbs/Base122">Base122<span>🡵</span></a> for more compression. We’re not restricted to ASCII anymore. We can use a larger range of characters than base64. This adds a significant amount of decoder code though.</li>
              <li>Better authoring experience.</li>
            </ul>

<p>Limitation(s):</p>

<ul>
              <li>Data URLs, while portable, are a poor way to share links. Browsers restrict navigation to data URLs. Apps don’t accept them. These URLs are presumed to be malicious nowadays.</li>
            </ul>
]]></description>
            <link>https://leanrada.com/notes/compressing-websites-into-urls?ref=rss</link>
            <guid isPermaLink="true">https://leanrada.com/notes/compressing-websites-into-urls?ref=rss</guid>
            <pubDate>Tue, 10 Oct 2023 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Introducing portabl.ink]]></title>
            <description><![CDATA[
<p>I just released a small weekend project called <a target="_blank" href="https://kalabasa.github.io/portabl.ink/">portabl.ink<span>🡵</span></a>. It’s a tool to compress whole web pages into a self-contained portable link.</p>

<p>Try it out online at <a target="_blank" href="https://kalabasa.github.io/portabl.ink/">kalabasa.github.io/portabl.ink<span>🡵</span></a>!</p>

<img srcset="" sizes="" spec="100% [800) 70% [1750) 1225" loading="lazy" width="400%" type="bleed" alt="screenshot" src="https://leanrada.com/notes/introducing-portabl.ink/hero.png?ref=rss">

<p>For some examples and more details, read the <a target="_self" href="https://leanrada.com/wares/portabl.ink?ref=rss">project page<span></span></a>.</p>

<p>Next, I will write another post on how it works under-the-hood. Stay tuned!
            </p>
]]></description>
            <link>https://leanrada.com/notes/introducing-portabl.ink?ref=rss</link>
            <guid isPermaLink="true">https://leanrada.com/notes/introducing-portabl.ink?ref=rss</guid>
            <pubDate>Mon, 25 Sep 2023 00:00:00 GMT</pubDate>
        </item>
        
        
        
        

    

    

    

    

    
        
        
        
        
        
  </channel>
</rss>